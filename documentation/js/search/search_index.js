var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.286,1,2.778]],["body/controllers/AppController.html",[0,2.454,1,5.102,2,1.815,3,0.213,4,0.213,5,0.189,6,4.766,7,0.165,8,4.745,9,5.182,10,4.106,11,0.42,12,1.256,13,6.443,14,1.547,15,0.016,16,0.536,17,5.5,18,1.038,19,5.767,20,0.257,21,0.73,22,4.415,23,4.766,24,0.257,25,0.248,26,1.744,27,1.547,28,5.5,29,0.013,30,0.013]],["title/modules/AppModule.html",[31,1.14,32,2.778]],["body/modules/AppModule.html",[1,4.542,2,1.874,3,0.166,4,0.166,5,0.147,7,0.129,8,4.049,9,4.421,10,3.503,15,0.016,20,0.302,21,0.569,22,4.476,23,3.711,24,0.22,25,0.212,29,0.011,30,0.011,31,2.066,32,5.715,33,1.825,34,1.825,35,2.004,36,2.004,37,1.825,38,2.981,39,2.004,40,3.711,41,3.711,42,3.711,43,4.792,44,4.792,45,4.792,46,4.792,47,4.792,48,3.967,49,2.657,50,2.004,51,2.004,52,4.282,53,1.729,54,5.678,55,2.941,56,4.282,57,4.282,58,6.37,59,3.053,60,4.282,61,4.282,62,3.751,63,4.282,64,3.711,65,3.751,66,4.282,67,4.282,68,4.282,69,2.218,70,2.642,71,4.282,72,5.678,73,5.678]],["title/injectables/AppService.html",[22,2.404,74,0.542]],["body/injectables/AppService.html",[3,0.217,4,0.217,5,0.192,7,0.168,8,4.797,9,5.238,10,4.151,11,0.428,12,1.412,13,6.482,15,0.015,16,0.546,18,1.057,20,0.217,21,0.744,22,4.449,24,0.26,25,0.251,29,0.013,30,0.013,74,0.936,75,1.775,76,4.853,77,3.679,78,5.6,79,1.323,80,1.147,81,5.6,82,5.6]],["title/controllers/AuthController.html",[0,1.286,83,2.778]],["body/controllers/AuthController.html",[0,1.952,2,1.223,3,0.143,4,0.143,5,0.127,7,0.178,11,0.283,12,0.971,14,1.664,15,0.016,16,0.577,18,1.116,20,0.281,21,0.492,24,0.199,25,0.192,26,1.175,27,1.042,29,0.01,30,0.01,62,2.448,64,4.46,80,1.211,83,4.955,84,3.211,85,2.027,86,3.705,87,2.983,88,5.147,89,3.176,90,2.815,91,5.147,92,4.46,93,3.176,94,1.844,95,5.124,96,6.389,97,3.4,98,3.705,99,1.999,100,3.522,101,3.705,102,3.705,103,3.703,104,3.67,105,1.879,106,3.67,107,4.46,108,2.983,109,0.577,110,0.901,111,0.513,112,0.901,113,3.176,114,4.46,115,4.008,116,2.306,117,3.705,118,5.147,119,3.705,120,3.176,121,3.705,122,3.705,123,3.705,124,3.4,125,4.556,126,2.148,127,3.211,128,3.4,129,3.428,130,2.642,131,2.642,132,3.705,133,2.027,134,3.705,135,3.4,136,3.705,137,2.885,138,1.002,139,4.008,140,3.211,141,3.705,142,1.535,143,0.862,144,3.705,145,3.705,146,5.147,147,2.193,148,3.705,149,3.705,150,3.705,151,3.705,152,3.705,153,3.705]],["title/modules/AuthModule.html",[31,1.14,43,2.574]],["body/modules/AuthModule.html",[2,1.812,3,0.158,4,0.158,5,0.14,7,0.122,12,0.768,15,0.016,16,0.397,18,0.768,19,3.528,20,0.299,21,0.541,24,0.212,25,0.205,29,0.01,30,0.01,31,2.031,33,1.735,34,1.735,35,1.905,36,1.905,37,1.735,38,2.906,39,2.906,43,5.216,49,2.569,50,1.905,51,1.905,55,2.843,83,4.428,99,1.372,104,3.914,109,0.397,110,0.62,111,0.353,112,0.62,129,4.483,130,2.903,147,1.735,154,3.528,155,3.528,156,3.528,157,3.528,158,4.723,159,4.723,160,4.723,161,4.723,162,4.071,163,3.914,164,4.071,165,5.489,166,6.647,167,4.071,168,4.071,169,4.757,170,4.071,171,4.071,172,5.489,173,2.512,174,4.071,175,4.071,176,3.17,177,3.528,178,4.739,179,2.512,180,4.071,181,4.071,182,4.071,183,4.071,184,4.071,185,3.528,186,3.528,187,3.528,188,3.528,189,4.071,190,3.528,191,4.071,192,4.071,193,3.528,194,4.071,195,4.071,196,4.071,197,4.071,198,3.528,199,4.071,200,4.071,201,4.071,202,4.071,203,4.071]],["title/injectables/AuthService.html",[74,0.542,129,2.258]],["body/injectables/AuthService.html",[3,0.126,4,0.126,5,0.112,7,0.141,11,0.249,12,0.886,15,0.016,16,0.588,18,1.039,20,0.272,21,0.432,24,0.213,25,0.175,29,0.009,30,0.009,74,0.653,75,1.031,79,0.64,80,1.234,92,4.067,94,1.789,99,1.975,100,3.437,104,4.895,105,1.269,108,2.72,109,0.588,110,0.919,111,0.554,112,0.919,113,2.896,114,5.223,115,3.654,116,1.269,124,3.982,129,3.704,133,1.779,138,0.88,142,1.448,143,0.802,147,2,163,4.298,176,2.533,178,4.895,179,2.007,204,2.533,205,2.43,206,2.43,207,4.693,208,4.693,209,5.506,210,1.488,211,3.253,212,3.754,213,6.864,214,3.253,215,4.693,216,3.253,217,3.297,218,4.693,219,3.253,220,4.693,221,4.693,222,3.346,223,4.694,224,2.197,225,3.253,226,4.557,227,3.253,228,1.973,229,0.653,230,1.83,231,4.067,232,4.693,233,4.693,234,2.819,235,3.253,236,2.533,237,2.533,238,2.533,239,2.533,240,2.057,241,3.011,242,1.949,243,5.506,244,0.85,245,2.567,246,3.253,247,3.253,248,3.253,249,1.549,250,3.253,251,4.693,252,4.693,253,2.007,254,2.896,255,2.819,256,4.693,257,3.253,258,3.253,259,2.533,260,2.533,261,2.533,262,2.533,263,2.533,264,2.533,265,2.533,266,2.533,267,3.654,268,2.819]],["title/classes/CreateEventDto.html",[25,0.145,269,2.404]],["body/classes/CreateEventDto.html",[3,0.155,4,0.155,5,0.137,7,0.214,11,0.306,14,2.001,15,0.016,16,0.694,20,0.21,24,0.21,25,0.229,29,0.01,30,0.01,79,1.56,109,0.529,110,0.826,111,0.669,143,1.036,229,0.755,244,1.287,245,3.609,269,4.628,270,1.218,271,6.303,272,2.851,273,1.943,274,4.47,275,1.864,276,4.792,277,4.792,278,4.792,279,3.187,280,4.792,281,3.153,282,3.999,283,3.999,284,3.465,285,5.718,286,4.699,287,3.999,288,1.79,289,2.027,290,4.699,291,4.699,292,4.359,293,3.465,294,4.223,295,2.467,296,3.999,297,3.999,298,4.699,299,4.699,300,4.699,301,2.538,302,1.433,303,2.642,304,3.465,305,3.465]],["title/classes/CreateHomeworkDto.html",[25,0.145,306,2.404]],["body/classes/CreateHomeworkDto.html",[3,0.148,4,0.148,5,0.206,7,0.195,11,0.292,14,1.973,15,0.016,16,0.684,20,0.203,24,0.203,25,0.241,29,0.01,30,0.01,69,3.112,79,1.505,99,1.314,100,2.888,109,0.513,111,0.664,112,0.986,143,1.022,147,2.24,229,0.901,244,1.172,245,3.287,270,1.163,273,1.883,275,1.807,279,3.515,281,3.062,288,1.735,289,1.964,292,3.97,295,2.357,301,2.46,302,1.369,306,4.583,307,6.227,308,2.724,309,3.582,310,6.787,311,6.009,312,4.679,313,3.82,314,5.256,315,3.82,316,3.748,317,4.555,318,4.555,319,4.555,320,3.449,321,3.82,322,3.82,323,5.256,324,2.345,325,5.609,326,3.31,327,3.82,328,4.555,329,3.82,330,4.555,331,4.555,332,3.82,333,5.256,334,2.724,335,3.287,336,4.093,337,2.974,338,3.31,339,2.974]],["title/classes/CreateRoleDto.html",[25,0.145,340,2.574]],["body/classes/CreateRoleDto.html",[3,0.209,4,0.209,5,0.185,7,0.162,11,0.412,14,1.517,15,0.016,16,0.526,20,0.209,24,0.254,25,0.282,29,0.012,30,0.012,79,1.395,110,1.002,111,0.57,143,0.786,229,1.028,244,1.19,270,1.642,273,2.356,275,2.261,279,3.674,281,2.802,295,3.327,301,3.077,302,1.932,340,4.879,341,5.698,342,4.199,343,4.039,344,4.673]],["title/classes/EditResponseDto.html",[25,0.145,345,2.574]],["body/classes/EditResponseDto.html",[3,0.165,4,0.165,5,0.147,7,0.128,11,0.326,14,1.906,15,0.016,16,0.661,20,0.219,24,0.219,25,0.252,29,0.011,30,0.011,69,2.934,79,1.495,100,3.234,109,0.552,111,0.666,143,0.987,229,0.943,244,1.026,270,1.3,273,2.03,275,1.948,281,2.886,288,2.236,289,2.531,301,3.17,302,1.529,316,4.039,320,3.331,334,3.043,335,3.856,336,4.411,337,3.323,339,3.323,345,4.885,346,4.086,347,6.109,348,3.323,349,2.308,350,4.952,351,4.952,352,4.534,353,4.952,354,3.698,355,3.698,356,4.909,357,3.753,358,4.201,359,3.698,360,4.909,361,3.698,362,4.411,363,4.909,364,3.698]],["title/classes/EditSolutionDto.html",[25,0.145,365,2.574]],["body/classes/EditSolutionDto.html",[3,0.205,4,0.205,5,0.182,7,0.159,11,0.405,14,1.491,15,0.015,16,0.517,20,0.205,24,0.252,25,0.262,29,0.012,30,0.012,79,1.384,109,0.634,111,0.564,143,0.772,229,1.022,244,1.178,270,1.614,273,2.331,275,2.237,281,2.772,288,2.147,289,2.431,295,3.27,301,3.045,302,1.899,309,3.045,349,2.651,357,3.802,365,4.85,366,5.638,367,4.127,368,5.482,369,5.3,370,5.066]],["title/controllers/EventsController.html",[0,1.286,371,2.778]],["body/controllers/EventsController.html",[0,1.755,2,1.01,3,0.118,4,0.118,5,0.105,7,0.187,11,0.234,12,0.847,14,1.648,15,0.016,16,0.571,18,1.105,20,0.267,21,0.406,24,0.174,25,0.286,26,0.97,27,0.861,29,0.009,30,0.009,53,1.367,77,3.203,79,1.359,80,1.335,85,1.673,94,1.837,103,4.005,105,1.938,109,0.717,110,0.892,111,0.508,112,0.892,116,1.193,126,3.082,138,0.827,142,1.498,143,0.853,224,2.316,229,1.078,230,2.542,240,2.678,244,1.18,249,0.861,253,2.77,269,4.263,274,4.506,288,1.933,371,4.803,372,2.651,373,4.12,374,2.77,375,2.77,376,1.037,377,1.407,378,3.495,379,3.495,380,3.89,381,4.14,382,2.651,383,3.06,384,3.203,385,2.651,386,3.489,387,3.06,388,3.06,389,4.12,390,3.06,391,2.965,392,2.965,393,2.488,394,1.482,395,2.965,396,1.677,397,2.651,398,4.735,399,3.791,400,3.06,401,2.386,402,1.829,403,1.829,404,2.77,405,1.365,406,3.28,407,2.651,408,1.888,409,4.14,410,2.182,411,2.101,412,2.182,413,1.365,414,2.182,415,2.182,416,2.382,417,3.06,418,3.06,419,3.06,420,3.06,421,3.06,422,2.182,423,3.06,424,3.06,425,3.06]],["title/modules/EventsModule.html",[31,1.14,44,2.574]],["body/modules/EventsModule.html",[2,2.079,3,0.195,4,0.195,5,0.173,7,0.151,15,0.016,20,0.287,21,0.668,24,0.244,25,0.269,29,0.012,30,0.012,31,2.172,33,2.144,34,2.144,35,2.354,36,2.354,37,2.144,38,3.218,39,2.354,44,5.243,49,2.948,50,2.354,51,2.354,55,3.262,274,3.651,371,4.904,376,1.455,377,1.514,406,4.672,407,4.36,426,4.36,427,4.36,428,4.36,429,3.544,430,4.672,431,5.031,432,5.031,433,4.36,434,2.916]],["title/injectables/EventsRepository.html",[74,0.542,430,2.404]],["body/injectables/EventsRepository.html",[3,0.102,4,0.102,5,0.091,7,0.185,11,0.202,12,1.027,15,0.016,16,0.602,18,1.106,20,0.188,21,0.351,24,0.156,25,0.28,26,0.837,27,0.743,29,0.008,30,0.008,53,1.225,74,0.56,75,0.837,80,1.415,87,2.823,90,3.376,94,1.837,105,1.735,109,0.762,110,0.941,111,0.643,112,0.941,138,0.714,142,1.408,143,0.854,210,0.837,217,3.617,224,2.527,228,2.553,229,1.031,242,1.425,244,1.227,249,0.743,273,1.441,274,4.516,320,3.035,349,1.639,373,4.239,376,0.929,377,0.966,378,3.132,379,3.132,380,3.485,381,3.132,394,1.607,396,1.503,401,1.984,402,2.218,403,1.639,430,4.081,435,2.289,436,2.331,437,4.022,438,1.745,439,2.754,440,2.642,441,4.022,442,3.78,443,2.642,444,4.353,445,2.331,446,4.022,447,2.642,448,1.882,449,6.775,450,2.823,451,3.005,452,2.482,453,4.022,454,2.642,455,1.569,456,1.714,457,1.639,458,2.083,459,1.714,460,2.331,461,4.022,462,2.642,463,1.639,464,1.639,465,2.823,466,2.664,467,2.823,468,5.859,469,2.823,470,4.87,471,2.331,472,2.331,473,4.022,474,2.642,475,4.87,476,1.445,477,1.531,478,4.022,479,2.642,480,4.022,481,1.745,482,2.642,483,2.642]],["title/injectables/EventsService.html",[74,0.542,406,2.404]],["body/injectables/EventsService.html",[3,0.099,4,0.099,5,0.088,7,0.197,11,0.196,12,0.741,15,0.016,16,0.594,18,1.09,20,0.236,21,0.34,24,0.152,25,0.287,26,0.811,27,0.72,29,0.007,30,0.01,53,1.196,74,0.546,75,0.811,77,2.147,79,1.288,80,1.341,94,1.826,99,1.339,105,1.062,109,0.706,110,0.929,111,0.529,112,0.929,116,0.998,138,0.692,142,1.465,143,0.842,205,2.033,206,2.033,210,0.811,224,2.397,228,1.919,229,1.077,230,1.531,240,2.676,242,1.398,244,1.262,249,1.625,269,4.143,273,1.407,274,4.536,276,4.171,277,4.747,278,4.171,288,1.768,289,1.467,294,3.057,349,1.6,376,0.907,377,1.465,378,3.057,379,3.057,381,3.057,382,3.402,385,3.402,386,2.033,389,4.436,393,2.853,394,1.768,397,3.402,398,3.816,401,1.6,402,2.182,403,1.6,405,1.752,406,4.04,408,1.579,409,3.719,410,1.825,413,1.142,430,3.761,433,2.218,448,1.837,455,2.089,456,1.673,459,1.673,484,2.218,485,3.926,486,3.926,487,2.56,488,2.56,489,2.56,490,2.56,491,3.926,492,2.56,493,2.423,494,2.423,495,3.926,496,2.56,497,2.147,498,2.033,499,2.033,500,6.096,501,2.56,502,2.8,503,2.8,504,2.947,505,2.423,506,2.56,507,3.926,508,3.057,509,3.402,510,3.926,511,2.349,512,3.926,513,3.926,514,3.926,515,1.4,516,2.56,517,2.423,518,1.4,519,1.4,520,1.4,521,2.56,522,2.56,523,2.56]],["title/classes/FindEventDto.html",[25,0.145,389,2.574]],["body/classes/FindEventDto.html",[3,0.15,4,0.15,5,0.133,7,0.212,11,0.296,14,1.983,15,0.016,16,0.687,20,0.206,24,0.206,25,0.226,29,0.01,30,0.01,79,1.509,109,0.518,110,0.81,111,0.666,112,1.169,143,1.027,229,0.739,245,4.124,270,1.182,272,2.766,274,4.448,275,1.826,276,4.717,277,4.717,278,4.717,279,3.137,280,4.717,281,2.908,284,3.362,285,5.646,286,4.604,288,1.753,289,1.985,290,4.604,291,4.604,292,4.002,293,3.362,294,4.137,298,4.604,299,4.604,300,4.604,301,2.486,302,1.39,303,2.563,304,3.362,305,3.362,335,3.947,358,2.563,389,4.924,457,2.164,463,2.164,464,2.164,524,6.253,525,3.079,526,4.32,527,3.88,528,3.88,529,3.88,530,3.362,531,3.88,532,3.88]],["title/classes/FindFileDto.html",[25,0.145,533,2.778]],["body/classes/FindFileDto.html",[3,0.205,4,0.205,5,0.259,7,0.159,11,0.405,14,1.491,15,0.015,16,0.517,20,0.205,24,0.252,25,0.262,29,0.012,30,0.012,79,1.384,99,1.626,109,0.634,111,0.564,143,0.772,229,0.905,270,1.614,275,2.237,281,2.772,288,2.147,289,2.431,295,3.27,301,3.045,302,1.899,457,2.651,463,2.651,464,2.651,525,3.771,533,5.235,534,5.638,535,4.593,536,5.02,537,5.3,538,5.638]],["title/classes/FindHomeworkDto.html",[25,0.145,539,2.574]],["body/classes/FindHomeworkDto.html",[3,0.166,4,0.166,5,0.219,7,0.204,11,0.328,14,1.91,15,0.016,16,0.662,20,0.166,24,0.22,25,0.238,29,0.011,30,0.011,79,1.533,99,1.421,100,2.536,109,0.554,111,0.652,112,1.146,143,0.989,147,2.422,229,0.791,270,1.306,275,1.954,279,3.657,281,3.009,288,1.876,289,2.124,301,2.66,302,1.537,308,3.059,309,3.518,312,4.964,316,4.053,317,4.926,318,4.926,319,4.926,325,4.926,326,3.717,328,4.926,330,4.926,331,4.926,335,3.863,338,3.717,352,4.546,358,2.834,457,2.316,463,2.316,464,2.316,525,3.295,526,4.053,539,4.891,540,6.12,541,4.29,542,4.29,543,4.29,544,4.29]],["title/classes/FindResponseDto.html",[25,0.145,545,2.574]],["body/classes/FindResponseDto.html",[3,0.163,4,0.163,5,0.145,7,0.127,11,0.322,14,1.895,15,0.016,16,0.657,20,0.217,24,0.217,25,0.251,29,0.011,30,0.011,69,2.907,79,1.491,100,3.221,109,0.547,111,0.664,112,1.141,143,0.982,229,0.781,270,1.282,275,1.93,281,2.871,288,2.224,289,2.518,301,3.153,302,1.508,316,4.003,320,3.313,334,3.002,335,3.838,336,4.371,337,3.278,339,3.278,346,4.068,348,3.278,350,4.918,351,4.918,352,4.503,353,4.918,354,3.648,355,3.648,356,4.865,357,3.738,358,4.172,359,3.648,360,4.865,361,3.648,362,4.371,363,4.865,364,3.648,457,2.287,463,2.287,464,2.287,525,3.254,545,4.868,546,6.082]],["title/classes/FindRoleDto.html",[25,0.145,547,2.778]],["body/classes/FindRoleDto.html",[3,0.207,4,0.207,5,0.184,7,0.161,11,0.408,14,1.504,15,0.016,16,0.521,20,0.207,24,0.253,25,0.263,29,0.012,30,0.012,79,1.39,109,0.638,110,0.997,111,0.567,143,0.779,229,0.91,270,1.628,275,2.249,279,3.66,281,2.787,295,3.298,301,3.061,302,1.916,342,4.163,343,4.027,344,4.633,457,2.665,458,3.387,463,2.665,464,2.665,525,3.791,547,5.25,548,5.668]],["title/classes/FindSolutionDto.html",[25,0.145,549,2.574]],["body/classes/FindSolutionDto.html",[3,0.19,4,0.19,5,0.169,7,0.148,11,0.375,14,1.745,15,0.016,16,0.605,20,0.19,24,0.24,25,0.253,29,0.012,30,0.012,79,1.48,99,1.551,109,0.605,111,0.62,143,0.904,229,0.863,270,1.496,275,2.133,281,2.898,288,2.358,289,2.67,301,3.183,302,1.76,309,2.904,335,3.72,357,3.898,358,4.099,362,4.831,367,3.824,368,5.296,370,4.831,457,2.528,463,2.528,464,2.528,525,3.596,549,4.868,550,5.894,551,6.802,552,4.911,553,4.911]],["title/classes/FindUserDto.html",[25,0.145,554,2.574]],["body/classes/FindUserDto.html",[3,0.144,4,0.144,5,0.128,7,0.112,11,0.285,14,2.009,15,0.016,16,0.696,20,0.144,24,0.2,25,0.221,29,0.01,30,0.01,79,1.548,99,1.602,109,0.505,110,1.088,111,0.671,112,1.178,120,4.705,143,1.04,229,0.72,240,2.516,245,3.247,254,4.154,270,1.137,275,1.779,281,2.968,288,2.116,289,1.933,292,3.418,302,1.338,335,3.982,343,2.83,457,2.108,463,2.108,464,2.108,525,2.999,526,4.8,530,3.235,554,4.944,555,6.309,556,2.662,557,5.834,558,5.834,559,5.145,560,4.233,561,3.733,562,3.733,563,3.733,564,3.689,565,3.235,566,3.733,567,6.036,568,3.733,569,4.029,570,3.733,571,4.483,572,3.733,573,4.029]],["title/controllers/HomeworksController.html",[0,1.286,574,2.778]],["body/controllers/HomeworksController.html",[0,1.617,2,0.88,3,0.103,4,0.103,5,0.092,7,0.177,11,0.204,12,0.765,14,1.539,15,0.016,16,0.534,18,1.033,20,0.268,21,0.354,24,0.157,25,0.286,26,0.846,27,0.75,29,0.008,30,0.008,53,1.234,77,2.992,79,1.304,80,1.269,85,1.459,94,1.784,99,1.891,103,3.845,105,1.874,109,0.696,110,0.834,111,0.475,112,0.834,116,1.58,126,2.348,128,1.762,133,1.459,135,3.237,137,2.077,138,0.721,142,1.632,143,0.797,224,2.023,229,1.088,230,2.702,240,2.668,242,0.781,244,1.122,249,1.14,253,2.5,288,1.806,306,4.275,309,3.64,324,3.256,373,2.677,374,2.5,375,2.5,376,0.936,377,1.315,384,2.992,386,3.334,391,2.677,392,2.677,393,2.293,394,1.337,395,2.677,396,1.514,399,2.889,401,2.229,402,1.651,403,1.651,404,3.023,405,1.19,408,1.646,410,1.902,411,1.896,412,1.902,413,1.19,414,1.902,415,1.902,416,2.077,422,1.902,539,3.887,574,4.591,575,2.311,576,4.245,577,3.155,578,4.052,579,3.815,580,4.245,581,2.311,582,2.667,583,2.667,584,2.667,585,2.667,586,4.577,587,3.845,588,2.667,589,2.667,590,3.511,591,3.376,592,2.667,593,2.667,594,2.667,595,3.511,596,3.237,597,2.077,598,3.023,599,2.311,600,3.815,601,2.077,602,1.902,603,1.902,604,2.667,605,2.667,606,2.667,607,2.667,608,2.077,609,2.667,610,2.667,611,3.155,612,2.667,613,3.511,614,2.667,615,2.667,616,2.667]],["title/modules/HomeworksModule.html",[31,1.14,45,2.574]],["body/modules/HomeworksModule.html",[2,2.045,3,0.19,4,0.19,5,0.168,7,0.147,15,0.016,20,0.291,21,0.651,24,0.24,25,0.231,29,0.012,30,0.012,31,2.156,33,2.088,34,2.088,35,2.294,36,2.294,37,2.088,38,3.18,39,2.294,45,5.273,48,4.114,49,2.9,50,2.294,51,2.294,55,3.209,309,2.9,376,1.431,377,1.489,429,3.52,434,2.841,574,4.845,598,4.641,599,4.247,617,4.247,618,4.247,619,4.901,620,4.641,621,4.901,622,5.37,623,4.901,624,4.247,625,3.817]],["title/injectables/HomeworksRepository.html",[74,0.542,620,2.404]],["body/injectables/HomeworksRepository.html",[3,0.103,4,0.103,5,0.091,7,0.186,11,0.203,12,1.031,15,0.016,16,0.603,18,1.109,20,0.189,21,0.353,24,0.156,25,0.28,26,0.843,27,0.748,29,0.008,30,0.008,53,1.231,74,0.562,75,0.843,80,1.418,87,2.343,90,3.384,94,1.839,105,1.739,109,0.76,110,0.943,111,0.643,112,0.943,116,2.292,138,0.719,142,1.412,143,0.856,147,1.722,210,0.843,217,3.625,228,2.556,229,1.032,242,1.431,244,1.229,249,0.748,273,1.448,309,3.627,320,3.043,349,1.647,376,0.933,377,0.971,394,1.614,396,1.51,401,1.992,402,2.226,403,1.647,436,2.343,438,1.756,439,2.761,442,3.786,444,4.33,445,2.343,448,1.891,450,2.343,451,2.494,452,2.494,455,1.576,456,1.722,457,1.647,458,2.093,459,1.722,460,2.343,463,1.647,464,1.647,465,2.834,466,2.674,467,2.834,469,2.834,471,2.343,472,2.343,476,1.454,477,1.541,576,5.573,577,3.147,579,3.147,608,3.147,620,4.089,626,2.304,627,4.042,628,3.502,629,3.502,630,2.659,631,4.042,632,2.659,633,4.042,634,2.659,635,4.042,636,2.659,637,4.042,638,2.659,639,6.627,640,5.875,641,4.889,642,4.042,643,2.659,644,4.889,645,4.042,646,2.659,647,2.659,648,3.147,649,2.659,650,2.659,651,2.659]],["title/injectables/HomeworksService.html",[74,0.542,598,2.404]],["body/injectables/HomeworksService.html",[3,0.08,4,0.08,5,0.179,7,0.183,11,0.159,12,0.629,15,0.016,16,0.544,18,0.987,20,0.227,21,0.276,24,0.129,25,0.283,27,0.937,29,0.006,30,0.009,53,1.015,69,2.89,74,0.464,75,0.658,79,1.391,80,1.375,94,1.749,99,1.193,105,0.901,109,0.674,110,0.85,111,0.484,112,0.85,116,1.862,138,0.562,142,1.55,143,0.762,205,1.725,206,1.725,210,1.056,228,1.711,229,1.064,230,1.299,240,2.615,241,1.822,242,1.398,244,1.235,249,1.919,268,1.799,273,1.194,279,1.075,288,2.012,289,2.085,306,4.067,309,3.662,312,4.345,324,3.122,349,1.357,376,0.769,377,1.341,386,1.725,393,2.612,394,1.576,401,1.357,402,1.945,403,1.357,405,1.487,408,1.281,410,1.481,413,0.927,448,1.559,455,1.862,456,1.42,459,1.42,493,2.056,494,2.056,497,1.822,498,1.725,499,1.725,502,2.376,503,2.376,504,2.574,505,2.946,508,4.071,509,2.887,511,2.571,515,2.859,517,2.946,518,2.859,519,2.859,520,2.612,536,4.181,539,4.154,577,2.594,579,3.249,580,3.616,581,2.887,586,4.355,587,3.533,591,2.946,598,3.76,600,3.249,608,3.718,620,3.443,624,1.799,628,2.887,629,2.887,652,1.799,653,2.077,654,3.036,655,2.077,656,2.077,657,3.332,658,2.077,659,3.332,660,2.077,661,2.077,662,2.077,663,3.718,664,2.077,665,2.077,666,1.617,667,2.077,668,1.799,669,3.332,670,4.172,671,3.332,672,2.887,673,2.077,674,2.077,675,2.887,676,2.077,677,3.405,678,2.077,679,1.617,680,4.172,681,2.077,682,1.799,683,3.332,684,4.172,685,4.172,686,2.077,687,2.077,688,2.077,689,2.077,690,2.077,691,2.077,692,1.799,693,2.077,694,2.077]],["title/classes/IsAfterConstraint.html",[25,0.145,695,3.034]],["body/classes/IsAfterConstraint.html",[3,0.165,4,0.165,5,0.146,7,0.128,11,0.325,12,1.068,15,0.016,16,0.552,18,1.068,20,0.165,24,0.219,25,0.237,29,0.011,30,0.011,79,1.386,80,1.386,97,4.197,109,0.62,110,1.032,111,0.491,112,1.032,113,2.629,124,3.738,142,1.36,224,1.945,229,0.593,237,3.317,242,1.86,244,1.024,245,3.095,270,1.297,302,2.028,303,4.472,498,2.206,695,5.271,696,3.317,697,4.035,698,3.683,699,4.53,700,5.866,701,4.903,702,3.692,703,6.704,704,4.26,705,4.406,706,3.692,707,4.26,708,3.683,709,4.035,710,5.64,711,4.903,712,4.903,713,3.692,714,3.317,715,5.64,716,3.692,717,5.271,718,3.317,719,4.406,720,4.903,721,3.317,722,3.692,723,3.692,724,3.692,725,5.866,726,4.903,727,3.692,728,4.26,729,4.26,730,4.26,731,4.26,732,3.317,733,4.26]],["title/classes/JwtAuthGuard.html",[25,0.145,62,2.574]],["body/classes/JwtAuthGuard.html",[3,0.18,4,0.18,5,0.16,7,0.14,11,0.355,12,1.131,15,0.016,16,0.585,18,0.878,20,0.28,21,0.618,24,0.232,25,0.223,26,1.475,29,0.011,30,0.011,59,3.317,62,4.381,80,1.228,106,4.274,109,0.585,110,0.913,111,0.52,112,0.913,125,4.274,140,4.032,147,1.982,163,4.274,173,2.871,210,1.475,222,4.274,223,4.668,224,2.061,242,1.362,244,0.842,270,1.417,698,3.474,709,4.274,734,5.747,735,3.623,736,4.274,737,3.474,738,4.274,739,3.698,740,3.844,741,6.632,742,5.747,743,4.653,744,6.542,745,4.653,746,4.032,747,5.454,748,4.653,749,5.747,750,4.032,751,3.623,752,3.623,753,3.317,754,3.623,755,5.194,756,4.653,757,4.032,758,4.032,759,4.653]],["title/injectables/JwtStrategy.html",[74,0.542,160,2.574]],["body/injectables/JwtStrategy.html",[3,0.159,4,0.159,5,0.141,7,0.166,11,0.313,12,1.041,15,0.016,16,0.538,18,0.773,20,0.277,21,0.544,24,0.213,25,0.205,29,0.01,30,0.01,74,0.767,75,1.299,80,1.276,93,3.402,94,1.557,97,3.642,99,1.666,105,1.108,106,3.931,108,2.375,109,0.538,110,0.84,111,0.478,112,0.84,116,1.598,120,3.402,130,2.922,142,0.985,143,0.597,160,4.403,173,2.528,178,5.108,179,2.528,198,3.551,210,1.748,212,4.003,222,4.443,223,4.293,228,2.567,230,2.15,234,3.551,239,5.416,240,1.531,241,2.241,242,1.199,244,0.742,249,1.153,255,3.551,259,3.191,260,3.191,261,3.191,262,3.191,263,3.191,264,3.191,265,3.191,266,3.191,267,4.293,450,3.196,511,2.015,515,2.241,518,2.241,519,2.241,520,2.241,697,3.931,736,3.931,739,3.402,740,3.612,754,3.191,760,3.551,761,5.513,762,5.4,763,3.551,764,4.098,765,5.513,766,4.098,767,5.513,768,4.778,769,5.513,770,5.513,771,5.513,772,4.778,773,4.778,774,4.778,775,3.551,776,4.098,777,3.551,778,3.191,779,4.098,780,4.098,781,4.098,782,4.098,783,4.098]],["title/classes/LocalAuthGuard.html",[25,0.145,131,2.778]],["body/classes/LocalAuthGuard.html",[3,0.22,4,0.22,5,0.195,7,0.171,15,0.015,20,0.22,24,0.262,25,0.253,29,0.013,30,0.013,106,4.836,131,5.172,163,4.836,173,3.503,270,1.729,698,3.931,735,4.421,736,4.836,737,3.931,738,4.836,739,4.185,740,4.204,750,4.919,784,4.919,785,5.281,786,7.253]],["title/injectables/LocalStrategy.html",[74,0.542,161,2.574]],["body/injectables/LocalStrategy.html",[3,0.167,4,0.167,5,0.148,7,0.171,11,0.329,12,1.076,15,0.016,16,0.556,18,0.814,20,0.263,21,0.573,24,0.221,25,0.213,26,1.367,29,0.011,30,0.011,74,0.794,75,1.367,79,1.48,80,1.168,93,3.519,94,1.598,95,4.943,97,3.768,99,1.853,107,4.943,108,4.493,109,0.556,110,0.869,111,0.495,112,0.869,120,4.197,129,4.213,130,3.075,142,1.371,143,0.628,161,4.494,173,2.661,210,1.367,224,2.198,228,2.437,242,1.262,244,0.781,249,1.213,254,4.644,511,2.12,564,4.067,697,4.067,736,4.067,739,3.519,740,3.705,754,3.358,762,5.539,768,4.943,772,4.943,773,4.943,774,4.943,775,3.737,777,3.737,778,3.358,785,3.358,787,3.737,788,4.494,789,4.312,790,4.312,791,5.704,792,4.312,793,5.704,794,4.312,795,4.312]],["title/classes/LoginUserDto.html",[25,0.145,226,2.778]],["body/classes/LoginUserDto.html",[3,0.2,4,0.2,5,0.177,7,0.155,11,0.394,14,1.451,15,0.016,16,0.624,20,0.2,24,0.247,25,0.259,29,0.012,30,0.012,79,1.498,99,1.817,104,4.561,108,4.333,109,0.624,111,0.631,120,3.947,143,0.932,226,5.331,229,0.89,254,4.613,270,1.57,275,2.199,302,1.848,556,3.677,564,4.561,573,5.415,796,6.027,797,5.156,798,6.397,799,5.156]],["title/classes/MatchConstraint.html",[25,0.145,800,3.034]],["body/classes/MatchConstraint.html",[3,0.167,4,0.167,5,0.149,7,0.13,11,0.331,12,1.079,15,0.016,16,0.558,18,1.079,20,0.167,24,0.248,25,0.239,29,0.011,30,0.011,79,1.393,80,1.395,97,3.777,109,0.624,110,1.079,111,0.496,112,0.871,124,3.777,142,1.374,229,0.602,242,1.874,270,1.318,302,2.049,396,2.545,498,2.241,499,2.241,697,4.077,698,3.711,699,4.566,700,5.902,701,4.954,702,4.954,703,6.527,705,3.37,706,4.954,708,3.948,709,3.086,710,5.665,711,4.954,712,4.954,714,4.452,715,5.515,717,4.986,718,3.37,719,4.452,720,4.954,721,3.37,722,3.75,723,3.75,724,3.75,725,5.549,726,3.75,727,4.954,732,3.37,788,2.859,800,5.304,801,3.37,802,4.327,803,5.549,804,4.327,805,3.75,806,4.954,807,3.75,808,3.75,809,4.327,810,4.327,811,4.327,812,4.327,813,4.327]],["title/modules/PrismaModule.html",[31,1.14,429,1.823]],["body/modules/PrismaModule.html",[3,0.206,4,0.206,5,0.183,7,0.16,10,4.025,15,0.015,20,0.252,21,0.707,24,0.252,25,0.243,29,0.012,30,0.012,31,2.208,33,2.268,34,2.268,35,2.491,36,2.491,37,2.268,38,3.301,39,3.301,49,3.053,50,2.491,51,2.491,429,3.674,439,3.584,814,4.613,815,4.613,816,4.613,817,5.323,818,6.523,819,6.523,820,4.651,821,5.323]],["title/injectables/PrismaService.html",[74,0.542,439,1.738]],["body/injectables/PrismaService.html",[3,0.171,4,0.171,5,0.152,7,0.133,8,4.134,10,3.577,11,0.338,12,1.296,15,0.016,16,0.631,18,1.221,20,0.224,21,0.587,24,0.224,25,0.216,29,0.011,30,0.011,31,2.01,53,1.766,74,0.807,75,1.401,93,3.577,94,1.93,109,0.431,110,0.674,111,0.383,112,0.674,138,1.195,143,0.845,205,3.003,206,3.003,249,1.82,439,3.182,699,4.613,740,3.75,820,4.134,822,3.83,823,5.798,824,5.798,825,5.798,826,6.868,827,5.798,828,7.458,829,7.458,830,5.798,831,6.868,832,4.42,833,4.42,834,4.42,835,6.868,836,6.868,837,5.798,838,5.798,839,5.798,840,5.798,841,4.42,842,5.798,843,5.798,844,4.42,845,4.42,846,4.42,847,4.42,848,4.42]],["title/classes/RegisterUserDto.html",[25,0.145,849,2.574]],["body/classes/RegisterUserDto.html",[3,0.141,4,0.141,5,0.125,7,0.11,11,0.279,14,1.996,15,0.016,16,0.706,20,0.197,24,0.197,25,0.218,29,0.01,30,0.01,79,1.559,99,1.898,108,4.112,109,0.496,110,1.081,111,0.675,112,0.775,120,4.265,143,1.054,229,0.708,240,1.902,244,1.375,245,3.206,254,4.118,270,1.11,275,1.749,281,3.084,292,3.873,302,1.306,335,2.783,343,2.783,396,1.362,526,2.599,556,2.599,557,5.783,558,5.783,559,5.08,560,4.18,564,3.628,565,3.159,567,5.991,569,3.962,571,4.41,573,4.565,849,4.972,850,6.371,851,6.344,852,5.08,853,3.645,854,5.088,855,3.645,856,5.088,857,3.645,858,3.645,859,3.645,860,3.645,861,3.645,862,3.645]],["title/controllers/RolesController.html",[0,1.286,863,2.778]],["body/controllers/RolesController.html",[0,2.156,2,1.488,3,0.174,4,0.174,5,0.155,7,0.177,11,0.344,12,1.108,14,1.268,15,0.016,16,0.44,18,1.108,20,0.29,21,0.599,24,0.227,25,0.258,26,1.429,27,1.268,29,0.011,30,0.011,53,2.108,65,2.978,80,0.923,85,2.466,94,1.633,103,3.404,105,1.588,109,0.44,110,0.687,111,0.391,112,0.687,126,3.404,127,3.907,138,1.219,142,1.083,224,2.019,229,0.963,230,2.699,244,1.332,279,2.335,340,4.951,343,4.024,374,3.624,375,3.624,376,1.356,377,1.411,384,3.212,404,2.782,408,2.782,411,3.057,415,3.215,820,4.188,863,4.658,864,3.907,865,4.316,866,4.573,867,4.508,868,4.508,869,4.508,870,3.786,871,3.907,872,3.907,873,3.907,874,4.508,875,4.508,876,4.508,877,4.508,878,4.508,879,4.508,880,4.508]],["title/guards/RolesGuard.html",[65,2.574,881,3.034]],["body/guards/RolesGuard.html",[3,0.176,4,0.176,5,0.156,7,0.136,11,0.347,12,1.114,15,0.016,16,0.575,18,0.857,20,0.285,21,0.603,24,0.228,25,0.22,29,0.011,30,0.011,59,3.238,65,4.331,74,0.821,80,1.209,99,1.798,109,0.575,110,0.899,111,0.512,112,0.899,125,4.208,138,1.228,147,1.935,210,1.871,224,2.029,241,3.228,242,1.727,244,0.822,343,3.228,411,2.762,698,3.421,699,4.208,709,4.208,737,3.421,738,4.208,739,3.641,742,6.389,744,6.595,746,3.936,747,5.404,749,5.681,751,3.536,757,3.936,758,3.936,788,3.899,870,4.274,873,3.936,882,4.542,883,3.936,884,5.901,885,4.542,886,4.542,887,4.542,888,3.536,889,4.542,890,4.542,891,3.936,892,4.542,893,4.542]],["title/modules/RolesModule.html",[31,1.14,158,2.574]],["body/modules/RolesModule.html",[2,2.045,3,0.19,4,0.19,5,0.168,7,0.147,15,0.016,20,0.285,21,0.651,24,0.24,25,0.266,29,0.012,30,0.012,31,2.156,33,2.088,34,2.088,35,2.294,36,2.294,37,2.088,38,3.18,39,3.18,49,2.9,50,2.294,51,2.294,55,3.209,158,5.25,376,1.431,377,1.489,429,3.52,434,2.841,863,4.845,865,4.094,870,4.606,871,4.247,894,4.247,895,4.901,896,4.247,897,4.247,898,4.641,899,4.901,900,6.197,901,4.901,902,4.247]],["title/injectables/RolesRepository.html",[74,0.542,898,2.404]],["body/injectables/RolesRepository.html",[3,0.126,4,0.126,5,0.112,7,0.181,11,0.248,12,1.137,15,0.016,16,0.587,18,1.038,20,0.213,21,0.431,24,0.181,25,0.262,26,1.03,27,0.914,29,0.009,30,0.009,53,1.428,74,0.652,75,1.03,80,1.363,89,3.395,90,3.009,94,1.789,105,1.856,109,0.766,110,0.918,111,0.63,112,0.918,138,0.878,142,1.322,143,0.802,210,1.03,217,3.64,224,2.46,228,2.289,229,0.955,242,0.951,244,1.242,249,0.914,320,3.273,343,3.753,376,1.083,377,1.127,394,1.816,396,1.752,405,2.092,411,2.819,436,2.718,439,2.688,442,3.64,444,4.31,445,2.718,455,1.829,456,1.998,457,1.91,458,2.849,459,1.998,460,2.718,463,1.91,464,1.91,465,3.189,466,3.295,467,3.189,469,3.189,471,2.718,472,2.718,476,3.009,477,1.883,820,3.343,865,4.533,866,3.651,898,4.107,903,2.815,904,4.688,905,4.688,906,2.815,907,3.248,908,4.688,909,3.248,910,4.688,911,5.502,912,4.688,913,3.248,914,6.656,915,4.688,916,3.248,917,5.502,918,5.502,919,3.248,920,3.248,921,3.248,922,2.529]],["title/injectables/RolesService.html",[74,0.542,870,2.258]],["body/injectables/RolesService.html",[3,0.115,4,0.115,5,0.102,7,0.174,11,0.227,12,0.83,15,0.016,16,0.601,18,1.09,20,0.239,21,0.395,24,0.17,25,0.282,26,0.943,27,0.837,29,0.008,30,0.011,53,0.906,74,0.612,75,0.943,77,3.16,79,1.348,80,1.404,94,1.827,99,1.613,105,1.189,109,0.704,110,0.939,111,0.535,112,0.939,113,2.713,138,0.805,142,1.481,143,0.842,205,2.277,206,2.277,210,0.943,224,2.513,228,1.874,229,1.027,230,1.16,240,1.112,242,1.531,244,1.209,249,1.625,273,1.576,279,3.193,340,4.073,343,3.749,370,3.424,376,1.015,377,1.551,393,2.704,394,1.907,405,1.962,408,1.836,411,2.704,413,1.327,455,2.253,456,1.874,459,1.874,493,2.713,494,2.713,497,3.16,498,2.277,499,2.277,504,1.836,505,2.713,508,3.424,511,2.162,515,1.627,518,1.627,519,1.627,520,1.627,547,4.991,560,4.12,569,2.317,668,3.81,788,2.905,865,5.075,866,4.073,870,3.87,872,3.81,898,3.982,902,2.578,923,2.578,924,4.397,925,4.397,926,5.23,927,2.975,928,2.975,929,2.975,930,2.975,931,4.397,932,2.975,933,4.397,934,2.975,935,2.975,936,2.975,937,4.397,938,5.23,939,4.397,940,3.81,941,4.397,942,4.397,943,2.975,944,2.975,945,2.975,946,2.975,947,2.975,948,4.397,949,2.975,950,2.975,951,2.975,952,2.975,953,2.975,954,2.975]],["title/controllers/SolutionsController.html",[0,1.286,955,2.778]],["body/controllers/SolutionsController.html",[0,1.63,2,0.892,3,0.105,4,0.105,5,0.093,7,0.178,11,0.206,12,0.772,14,1.55,15,0.016,16,0.537,18,1.039,20,0.264,21,0.359,24,0.158,25,0.286,26,0.857,27,0.76,29,0.008,30,0.008,53,1.246,77,3.012,79,1.31,80,1.275,85,1.478,94,1.79,99,1.904,103,3.861,105,1.88,109,0.698,110,0.839,111,0.478,112,0.839,116,1.926,126,2.372,133,1.478,135,3.262,137,2.104,138,0.731,142,1.638,143,0.802,229,1.09,230,2.711,240,2.64,244,1.127,249,1.151,253,2.525,288,1.818,309,1.915,324,3.294,357,4.009,365,4.505,373,2.703,374,2.525,375,2.525,376,0.945,377,1.323,384,3.012,386,3.349,391,2.703,392,2.703,393,2.311,394,1.351,395,2.703,396,1.529,399,2.918,401,2.244,402,1.667,403,1.667,404,3.047,405,1.206,411,1.915,412,1.927,413,1.206,414,1.927,422,1.927,549,3.909,587,3.861,590,3.546,591,3.398,595,3.546,596,3.262,597,2.104,601,2.104,602,1.927,603,1.927,611,3.186,613,3.546,955,4.611,956,2.342,957,4.279,958,3.186,959,4.092,960,3.845,961,4.279,962,2.342,963,2.702,964,2.702,965,2.702,966,2.342,967,6.024,968,2.342,969,2.702,970,2.702,971,2.342,972,2.702,973,3.047,974,2.342,975,3.546,976,1.927,977,2.702,978,2.702,979,2.702,980,2.702,981,2.702,982,2.702,983,2.342,984,2.702,985,2.702,986,2.702,987,2.702]],["title/modules/SolutionsModule.html",[31,1.14,46,2.574]],["body/modules/SolutionsModule.html",[2,2.045,3,0.19,4,0.19,5,0.168,7,0.147,15,0.016,20,0.291,21,0.651,24,0.24,25,0.231,29,0.012,30,0.012,31,2.156,33,2.088,34,2.088,35,2.294,36,2.294,37,2.088,38,3.18,39,2.294,46,5.273,48,4.114,49,2.9,50,2.294,51,2.294,55,3.209,357,3.209,376,1.431,377,1.489,429,3.52,434,2.841,622,5.37,625,3.817,955,4.845,973,4.641,974,4.247,988,4.247,989,4.901,990,4.247,991,4.641,992,4.901,993,4.901,994,4.247]],["title/injectables/SolutionsRepository.html",[74,0.542,991,2.404]],["body/injectables/SolutionsRepository.html",[3,0.103,4,0.103,5,0.091,7,0.186,11,0.203,12,1.03,15,0.016,16,0.603,18,1.108,20,0.189,21,0.352,24,0.156,25,0.28,26,0.841,27,0.746,29,0.008,30,0.008,53,1.229,74,0.562,75,0.841,80,1.417,87,2.339,90,3.381,94,1.839,105,1.738,109,0.76,110,0.942,111,0.643,112,0.942,116,2.289,138,0.717,142,1.41,143,0.855,147,1.719,210,0.841,217,3.622,228,2.555,229,1.032,242,1.429,244,1.228,249,0.746,273,1.446,320,3.04,324,1.8,349,1.644,357,4.013,376,0.932,377,0.97,394,1.612,396,1.508,401,1.99,402,2.223,403,1.644,436,2.339,438,1.753,439,2.758,442,3.784,444,4.328,445,2.339,448,1.888,450,2.339,451,2.49,452,2.49,455,1.574,456,1.719,457,1.644,458,2.09,459,1.719,460,2.339,463,1.644,464,1.644,465,2.83,466,2.671,467,2.83,469,2.83,471,2.339,472,2.339,476,1.451,477,1.538,481,1.753,648,3.142,957,5.569,958,3.142,960,3.142,991,4.086,995,2.299,996,4.035,997,3.497,998,3.497,999,2.653,1000,4.035,1001,2.653,1002,4.035,1003,2.653,1004,4.035,1005,2.653,1006,4.035,1007,2.653,1008,6.623,1009,5.87,1010,4.883,1011,4.035,1012,2.653,1013,4.883,1014,4.035,1015,2.653,1016,4.035,1017,2.653,1018,2.653]],["title/injectables/SolutionsService.html",[74,0.542,973,2.404]],["body/injectables/SolutionsService.html",[3,0.081,4,0.081,5,0.21,7,0.168,11,0.16,12,0.632,15,0.016,16,0.573,18,0.99,20,0.227,21,0.277,24,0.13,25,0.283,27,0.942,29,0.006,30,0.009,53,1.02,74,0.466,75,0.662,79,1.406,80,1.352,94,1.751,99,1.197,105,0.905,109,0.675,110,0.853,111,0.485,112,0.853,116,1.869,128,2.211,138,0.565,142,1.553,143,0.764,205,1.734,206,1.734,210,1.061,228,1.717,229,1.065,230,1.306,240,2.646,241,2.868,242,1.638,244,1.236,249,1.921,273,1.199,275,1.151,288,2.016,289,2.091,309,1.567,324,3.16,349,1.364,357,4.055,365,4.512,368,3.262,376,0.773,377,1.344,386,1.734,393,2.618,394,1.581,401,1.364,402,1.952,403,1.364,405,1.494,413,0.932,448,1.567,455,1.869,456,1.426,459,1.426,493,2.065,494,2.065,497,1.831,498,1.734,499,1.734,502,2.387,503,2.387,504,2.585,505,2.956,511,2.578,515,2.868,517,3.452,518,2.868,519,2.868,520,2.868,536,4.794,549,4.162,587,3.54,591,2.956,596,3.165,654,3.044,663,3.731,666,1.627,672,2.901,675,2.901,677,3.416,679,3.731,708,1.211,737,1.211,753,1.489,958,2.607,960,3.262,961,3.63,962,2.901,966,1.81,967,4.544,973,3.769,975,2.901,976,1.489,991,3.452,994,1.81,997,2.901,998,2.901,1019,1.81,1020,3.63,1021,2.089,1022,2.089,1023,2.089,1024,3.347,1025,2.089,1026,3.347,1027,2.089,1028,2.089,1029,2.089,1030,2.089,1031,2.089,1032,1.627,1033,2.089,1034,4.189,1035,3.731,1036,3.347,1037,2.089,1038,2.901,1039,3.347,1040,2.901,1041,2.089,1042,3.347,1043,2.089,1044,3.347,1045,2.089,1046,2.089]],["title/controllers/TeacherResponsesController.html",[0,1.286,1047,2.778]],["body/controllers/TeacherResponsesController.html",[0,1.677,2,0.935,3,0.11,4,0.11,5,0.097,7,0.181,11,0.216,12,0.8,14,1.587,15,0.016,16,0.55,18,1.064,20,0.254,21,0.376,24,0.164,25,0.288,27,0.797,29,0.008,30,0.008,53,1.291,69,1.467,70,3.726,77,3.085,79,1.328,80,1.346,85,1.549,94,1.808,100,1.891,103,3.916,105,1.902,109,0.705,110,0.859,111,0.489,112,0.859,116,2.2,126,2.457,133,1.549,142,1.579,143,0.822,210,0.898,229,1.083,230,2.472,240,2.629,241,1.549,244,1.147,249,0.797,253,2.615,288,1.861,324,3.321,345,4.564,346,3.5,373,2.8,374,2.615,375,2.615,376,0.979,377,1.355,384,3.085,386,3.403,391,2.8,392,2.8,393,1.984,394,1.399,395,2.8,396,1.584,399,3.023,401,2.298,402,1.727,403,1.727,404,3.134,405,1.264,411,1.984,412,2.019,413,1.264,414,2.019,415,2.019,416,2.205,422,2.019,545,3.989,587,3.916,591,3.48,596,3.356,597,2.205,601,2.205,602,2.019,611,3.301,968,2.454,971,2.454,976,2.019,983,2.454,1047,4.685,1048,2.454,1049,2.454,1050,5.55,1051,3.673,1052,4.239,1053,5.08,1054,4.402,1055,2.454,1056,2.832,1057,4.239,1058,2.832,1059,4.239,1060,2.832,1061,5.854,1062,2.832,1063,2.454,1064,2.832,1065,3.134,1066,2.454,1067,3.673,1068,2.832,1069,2.832,1070,2.832,1071,2.832,1072,2.832,1073,2.832,1074,2.832]],["title/modules/TeacherResponsesModule.html",[31,1.14,47,2.574]],["body/modules/TeacherResponsesModule.html",[2,2.033,3,0.188,4,0.188,5,0.167,7,0.146,15,0.016,20,0.29,21,0.644,24,0.238,25,0.265,29,0.012,30,0.012,31,2.149,33,2.068,34,2.068,35,2.271,36,2.271,37,2.068,38,3.166,39,2.271,47,5.267,48,4.104,49,2.882,50,2.271,51,2.271,55,3.189,69,3.503,70,2.994,346,2.813,376,1.422,377,1.48,429,3.511,434,2.813,625,3.779,1047,4.823,1050,4.391,1065,4.63,1066,4.206,1075,4.206,1076,4.206,1077,4.853,1078,4.63,1079,4.853,1080,4.853,1081,4.206]],["title/injectables/TeacherResponsesRepository.html",[74,0.542,1078,2.404]],["body/injectables/TeacherResponsesRepository.html",[3,0.098,4,0.098,5,0.087,7,0.183,11,0.194,12,1.007,15,0.016,16,0.593,18,1.087,20,0.184,21,0.337,24,0.151,25,0.278,26,0.806,27,0.715,29,0.007,30,0.007,53,1.189,70,3.906,74,0.543,75,0.806,80,1.401,87,2.756,90,3.324,94,1.824,100,3.105,105,1.712,109,0.763,110,0.926,111,0.638,112,0.926,116,2.246,138,0.687,142,1.383,143,0.839,147,1.664,210,0.806,217,3.573,228,2.562,229,1.032,242,1.392,244,1.238,249,0.715,273,1.399,320,2.989,324,1.742,346,3.669,349,1.591,376,0.902,377,0.938,394,1.569,396,1.459,401,1.937,402,2.174,403,1.591,436,2.263,438,1.679,439,2.712,442,3.741,444,4.376,445,2.263,448,1.827,450,2.756,451,2.934,452,2.409,455,1.523,456,1.664,457,1.591,458,2.462,459,1.664,460,2.263,463,1.591,464,1.591,465,2.756,466,2.601,467,2.756,469,2.756,471,2.263,472,2.263,476,1.39,477,1.473,481,1.679,648,3.04,1049,5.485,1050,5.247,1078,4.031,1082,2.202,1083,3.905,1084,3.905,1085,3.905,1086,3.905,1087,3.905,1088,2.541,1089,3.905,1090,2.541,1091,4.755,1092,3.905,1093,2.541,1094,6.7,1095,3.905,1096,2.541,1097,6.078,1098,3.905,1099,2.541,1100,4.755,1101,3.905,1102,2.541,1103,4.755,1104,2.541,1105,3.905,1106,2.541,1107,2.541]],["title/injectables/TeacherResponsesService.html",[74,0.542,1065,2.404]],["body/injectables/TeacherResponsesService.html",[3,0.081,4,0.081,5,0.202,7,0.168,11,0.159,12,0.631,15,0.016,16,0.573,18,0.989,20,0.227,21,0.277,24,0.129,25,0.283,27,0.941,29,0.006,30,0.009,53,1.019,69,2.168,70,3.767,74,0.466,75,0.662,79,1.239,80,1.352,94,1.751,100,2.339,105,0.905,109,0.675,110,0.852,111,0.485,112,0.852,116,1.868,138,0.564,142,1.467,143,0.764,205,1.732,206,1.732,210,1.06,228,1.716,229,1.064,230,1.305,240,2.671,241,2.866,242,1.637,244,1.236,249,1.921,273,1.199,275,1.15,288,1.581,289,1.25,324,3.159,345,4.161,346,3.539,349,1.363,350,2.605,351,4.081,352,4.189,353,2.605,357,2.168,376,0.773,377,1.344,386,1.732,393,2.617,394,1.581,401,1.363,402,1.951,403,1.363,405,1.493,413,0.931,448,1.566,455,1.868,456,1.425,459,1.425,493,2.064,494,2.064,497,1.83,498,1.732,499,1.732,502,2.385,503,2.385,504,2.583,505,2.955,511,2.577,515,2.866,517,3.451,518,2.866,519,2.866,520,2.866,536,2.385,545,4.161,587,3.539,591,2.955,596,3.164,654,3.043,666,1.625,677,3.415,679,3.729,708,1.21,737,1.21,753,1.488,976,1.488,1020,3.628,1032,1.625,1035,3.729,1040,1.809,1050,5.486,1051,2.899,1054,3.628,1055,2.899,1061,5.458,1063,1.809,1065,3.767,1067,2.899,1078,3.451,1081,1.809,1108,1.809,1109,3.345,1110,3.345,1111,4.186,1112,2.087,1113,2.087,1114,2.087,1115,3.345,1116,2.087,1117,3.345,1118,2.087,1119,2.087,1120,2.087,1121,2.087,1122,2.087,1123,2.087,1124,4.186,1125,3.345,1126,3.345,1127,2.087,1128,3.345,1129,2.087,1130,2.087,1131,2.087,1132,2.087,1133,3.345,1134,3.345,1135,4.186,1136,3.345,1137,3.345,1138,2.087,1139,2.087,1140,2.087,1141,2.087]],["title/classes/UpdateEventDto.html",[25,0.145,398,2.574]],["body/classes/UpdateEventDto.html",[3,0.22,4,0.22,5,0.195,7,0.171,15,0.015,20,0.263,24,0.263,25,0.253,29,0.013,30,0.013,109,0.662,229,0.945,269,3.511,270,1.733,272,4.057,274,3.937,349,2.767,384,3.112,398,4.797,409,4.431,740,4.208,1142,4.931,1143,7.26,1144,4.931,1145,4.431,1146,4.431]],["title/classes/UpdateHomeworkDto.html",[25,0.145,586,2.574]],["body/classes/UpdateHomeworkDto.html",[3,0.22,4,0.22,5,0.195,7,0.171,15,0.015,20,0.263,24,0.263,25,0.253,29,0.013,30,0.013,109,0.662,229,0.945,270,1.733,306,3.511,308,4.057,309,3.178,349,2.767,384,3.112,586,4.797,600,4.431,740,4.208,1144,4.931,1145,4.431,1146,4.431,1147,4.931,1148,7.26]],["title/controllers/UploadController.html",[0,1.286,1149,2.778]],["body/controllers/UploadController.html",[0,2.199,2,1.55,3,0.182,4,0.182,5,0.161,7,0.181,11,0.359,12,1.138,14,1.321,15,0.016,16,0.458,18,0.886,20,0.258,21,0.624,24,0.233,25,0.262,26,1.489,27,1.321,29,0.011,30,0.011,79,1.382,80,1.235,85,2.569,93,4.59,94,1.665,100,3.525,109,0.458,110,0.716,111,0.407,112,0.716,128,3.984,133,2.569,142,1.601,143,0.684,224,2.29,229,0.839,240,2.254,249,1.321,324,3.136,376,1.393,654,3.45,1149,5.012,1150,4.07,1151,4.697,1152,4.696,1153,5.773,1154,4.697,1155,6.031,1156,4.697,1157,6.031,1158,6.031,1159,6.661,1160,6.031,1161,4.07,1162,4.697,1163,4.697,1164,4.697]],["title/modules/UploadModule.html",[31,1.14,48,2.131]],["body/modules/UploadModule.html",[2,1.995,3,0.182,4,0.182,5,0.229,7,0.142,15,0.016,20,0.293,21,0.626,24,0.234,25,0.262,29,0.011,30,0.011,31,2.13,33,2.009,34,2.009,35,2.206,36,2.206,37,2.009,38,3.123,39,3.123,48,4.323,49,2.829,50,2.206,51,2.206,55,3.131,147,2.009,169,5.239,177,4.086,179,2.909,185,4.086,186,4.086,187,4.086,188,4.086,190,4.086,193,4.086,376,1.396,377,1.453,429,3.485,434,2.733,654,4.094,1149,4.758,1161,4.086,1165,4.086,1166,4.086,1167,4.715,1168,4.086,1169,4.595,1170,4.715,1171,4.715,1172,4.086,1173,4.715,1174,4.715]],["title/injectables/UploadRepository.html",[74,0.542,1169,2.404]],["body/injectables/UploadRepository.html",[3,0.098,4,0.098,5,0.265,7,0.183,11,0.194,12,1.006,15,0.016,16,0.593,18,1.086,20,0.184,21,0.337,24,0.151,25,0.278,26,0.805,27,0.714,29,0.007,30,0.007,53,1.188,74,0.543,75,0.805,80,1.4,87,2.754,90,3.323,94,1.824,100,2.12,105,1.711,109,0.761,110,0.926,111,0.638,112,0.926,138,0.687,142,1.383,143,0.838,210,0.805,217,3.572,224,2.508,228,2.53,229,1.032,242,1.391,244,1.213,249,0.714,273,1.398,320,3.471,324,2.823,349,1.59,376,0.901,377,0.937,394,1.568,396,1.458,401,1.936,402,2.173,403,1.59,436,2.261,438,1.677,439,2.711,442,3.74,444,4.351,445,2.261,448,1.826,450,2.754,451,2.932,452,2.407,455,1.522,456,1.662,457,1.59,458,2.461,459,1.662,460,2.261,463,1.59,464,1.59,465,3.522,466,3.323,467,3.522,469,3.522,471,2.261,472,2.261,476,1.389,477,1.471,481,1.677,1169,4.03,1175,2.2,1176,3.901,1177,3.901,1178,3.901,1179,3.901,1180,3.901,1181,2.539,1182,3.901,1183,2.539,1184,3.381,1185,3.901,1186,2.539,1187,7.059,1188,3.901,1189,2.539,1190,6.076,1191,6.076,1192,3.901,1193,2.539,1194,3.901,1195,2.539,1196,4.752,1197,3.901,1198,2.539,1199,3.901,1200,2.539,1201,2.539]],["title/injectables/UploadService.html",[74,0.542,654,2.018]],["body/injectables/UploadService.html",[3,0.097,4,0.097,5,0.264,7,0.172,11,0.192,12,0.731,15,0.016,16,0.559,18,1.001,20,0.264,21,0.334,24,0.15,25,0.254,27,1.089,29,0.007,30,0.01,53,1.615,74,0.539,75,0.797,79,1.444,80,1.173,89,2.388,93,3.734,94,1.76,99,1.326,100,3.183,105,1.047,109,0.559,110,0.873,111,0.497,112,0.873,115,3.014,128,1.66,133,1.374,138,0.68,142,1.515,143,0.773,147,2.012,178,4.315,179,1.55,205,2.005,206,2.005,210,1.227,224,2.238,228,1.901,229,0.906,230,2.069,240,2.496,241,2.117,242,2.111,244,0.855,249,1.774,280,3.014,288,1.997,289,2.261,324,3.143,376,0.894,377,1.564,386,2.005,393,2.21,394,1.278,405,1.727,413,1.121,448,1.812,455,1.51,458,1.301,497,2.117,498,2.005,499,2.005,511,2.322,515,2.117,517,1.55,518,2.117,519,2.117,520,1.374,533,4.085,538,3.354,587,3.075,654,3.265,663,3.014,677,1.792,692,2.178,721,3.014,737,2.737,763,2.178,940,3.354,1032,3.014,1035,4.461,1153,4.597,1169,3.89,1172,2.178,1184,4.597,1202,2.178,1203,3.871,1204,4.721,1205,2.513,1206,3.871,1207,2.513,1208,3.871,1209,2.513,1210,3.871,1211,3.871,1212,3.871,1213,2.513,1214,2.513,1215,2.513,1216,5.304,1217,3.871,1218,4.721,1219,2.513,1220,2.513,1221,2.513,1222,2.513,1223,2.513,1224,2.513,1225,3.871,1226,2.513,1227,2.513,1228,2.513,1229,2.513,1230,3.871,1231,2.513,1232,4.721,1233,2.513,1234,2.513,1235,3.871,1236,2.513,1237,2.513,1238,2.513,1239,2.513,1240,4.721,1241,2.513,1242,2.513,1243,2.513,1244,2.513,1245,4.721,1246,2.513,1247,2.513,1248,2.513,1249,3.871,1250,2.513,1251,2.513,1252,2.513,1253,2.513,1254,2.513,1255,4.721,1256,2.513,1257,2.513,1258,2.513,1259,2.513,1260,2.513,1261,2.513,1262,2.513,1263,2.513,1264,2.513,1265,2.513,1266,2.513]],["title/controllers/UsersController.html",[0,1.286,1267,2.778]],["body/controllers/UsersController.html",[0,2.033,2,1.322,3,0.155,4,0.155,5,0.138,7,0.185,11,0.306,12,1.025,14,1.527,15,0.016,16,0.529,18,1.025,20,0.267,21,0.532,24,0.21,25,0.283,26,1.27,27,1.127,29,0.01,30,0.01,77,3.611,80,1.352,85,2.191,89,4.258,94,1.778,99,1.913,103,3.827,105,1.924,109,0.74,110,0.827,111,0.471,112,0.827,126,3.57,138,1.083,142,1.304,143,0.791,212,3.368,224,2.446,229,0.919,230,2.117,236,4.227,244,1.195,253,3.35,374,3.35,375,3.35,376,1.254,377,1.586,384,2.969,391,3.587,392,3.587,394,1.792,395,3.587,396,2.029,404,2.471,413,1.787,554,4.559,849,4.89,1267,4.921,1268,3.471,1269,4.227,1270,5.429,1271,3.471,1272,4.005,1273,5.429,1274,4.005,1275,4.005,1276,6.159,1277,3.471,1278,3.471,1279,4.005,1280,4.005,1281,4.005,1282,4.005,1283,4.005]],["title/modules/UsersModule.html",[31,1.14,159,2.574]],["body/modules/UsersModule.html",[2,2.05,3,0.19,4,0.19,5,0.169,7,0.148,15,0.016,20,0.285,21,0.653,24,0.24,25,0.267,29,0.012,30,0.012,31,2.158,33,2.097,34,2.097,35,2.303,36,2.303,37,2.097,38,3.186,39,3.186,49,2.907,50,2.303,51,2.303,55,3.217,99,1.553,159,5.253,212,4.349,376,1.435,377,1.493,429,3.524,434,2.852,1267,4.854,1277,4.264,1284,4.264,1285,4.264,1286,4.921,1287,4.264,1288,4.646,1289,4.921,1290,4.921,1291,4.264]],["title/injectables/UsersRepository.html",[74,0.542,1288,2.404]],["body/injectables/UsersRepository.html",[3,0.102,4,0.102,5,0.091,7,0.185,11,0.202,12,1.027,15,0.016,16,0.602,18,1.106,20,0.188,21,0.351,24,0.156,25,0.28,26,0.837,27,0.743,29,0.008,30,0.008,53,1.225,74,0.56,75,0.837,80,1.415,87,2.823,89,3.959,90,3.376,94,1.837,99,1.947,105,1.735,109,0.762,110,0.941,111,0.643,112,0.941,138,0.714,142,1.408,143,0.854,210,0.837,217,3.617,224,2.527,228,2.553,229,1.031,242,1.425,244,1.227,249,0.743,273,1.441,320,3.035,349,1.639,376,0.929,377,0.966,394,1.607,396,1.503,401,1.984,402,2.218,403,1.639,436,2.331,439,2.429,442,3.78,444,4.353,445,2.331,448,1.882,450,2.823,451,3.005,452,2.482,455,1.569,456,1.714,457,1.639,458,2.083,459,1.714,460,2.331,463,1.639,464,1.639,465,2.823,466,2.664,467,2.823,469,2.823,471,2.331,472,2.331,476,2.664,477,1.531,906,2.289,1269,3.132,1288,4.081,1292,2.289,1293,4.022,1294,3.485,1295,3.485,1296,4.022,1297,2.642,1298,4.022,1299,2.642,1300,4.022,1301,2.642,1302,6.775,1303,4.022,1304,2.642,1305,4.022,1306,2.642,1307,5.859,1308,4.87,1309,4.022,1310,2.642,1311,4.87,1312,4.022,1313,2.642,1314,2.642,1315,2.642,1316,2.642,1317,2.642]],["title/injectables/UsersService.html",[74,0.542,212,2.131]],["body/injectables/UsersService.html",[3,0.122,4,0.122,5,0.108,7,0.178,11,0.24,12,0.864,15,0.016,16,0.578,18,1.019,20,0.255,21,0.417,24,0.177,25,0.284,26,0.996,27,0.884,29,0.009,30,0.011,53,1.394,74,0.637,75,0.996,80,1.347,94,1.774,99,1.967,105,1.237,108,3.129,109,0.703,110,0.904,111,0.514,112,0.904,138,0.849,142,1.297,143,0.786,205,2.37,206,2.37,210,0.996,212,3.598,224,2.44,228,2.125,229,1.046,230,1.785,236,3.563,238,2.446,240,1.174,242,1.845,244,1.26,249,1.773,254,2.823,259,2.446,260,2.446,261,2.446,262,2.446,263,2.446,264,2.446,265,2.446,266,2.446,267,3.563,273,1.934,376,1.057,377,1.581,393,3.079,394,1.957,405,2.042,413,1.402,455,2.313,456,1.95,459,1.95,466,1.718,481,2.075,493,2.823,494,2.823,497,2.503,498,2.37,499,2.37,504,1.938,505,2.823,511,2.25,515,1.718,517,1.938,518,1.718,519,1.718,520,1.718,554,4.689,560,3.263,849,4.689,852,4.677,865,2.075,922,2.446,1269,3.563,1271,3.965,1278,2.722,1288,4.059,1291,2.722,1294,3.965,1295,3.965,1318,2.722,1319,3.141,1320,3.141,1321,3.141,1322,4.576,1323,3.141,1324,4.576,1325,3.141,1326,3.141,1327,3.141,1328,4.576,1329,3.141,1330,3.141,1331,4.576,1332,3.141,1333,4.576,1334,3.141,1335,3.141]],["title/coverage.html",[1336,4.617]],["body/coverage.html",[0,2.354,1,2.283,5,0.11,6,2.775,15,0.016,22,1.976,25,0.29,29,0.009,30,0.009,37,1.364,62,2.115,65,2.115,70,3.367,74,1.08,76,2.775,83,2.283,84,2.775,111,0.278,129,1.856,131,2.283,135,2.115,139,2.493,160,2.115,161,2.115,204,2.493,212,1.751,226,2.283,244,0.58,269,1.976,271,2.775,272,3.891,289,1.197,303,2.115,306,1.976,307,2.775,308,3.891,340,2.115,341,2.775,342,3.613,345,2.115,346,3.682,347,2.775,348,3.613,365,2.115,366,2.775,367,3.613,371,2.283,372,2.775,389,2.115,396,1.197,398,2.115,406,1.976,411,1.499,430,1.976,435,2.775,439,1.429,484,2.775,524,2.775,533,2.283,534,2.775,535,2.775,539,2.115,540,2.775,545,2.115,546,2.775,547,2.283,548,2.775,549,2.115,550,2.775,554,2.115,555,2.775,556,3.891,574,2.283,575,2.775,586,2.115,598,1.976,603,3.309,620,1.976,626,2.775,652,2.775,654,1.658,682,4.729,695,2.493,696,3.613,719,4.249,734,2.775,735,3.613,752,2.493,760,2.775,784,2.775,787,2.775,796,2.775,800,2.493,801,3.613,822,2.775,849,2.115,850,2.775,863,2.283,864,2.775,870,1.856,881,2.493,883,2.775,888,2.493,898,1.976,903,2.775,923,2.775,955,2.283,956,2.775,973,1.976,991,1.976,995,2.775,1019,2.775,1047,2.283,1048,2.775,1065,1.976,1078,1.976,1082,2.775,1108,2.775,1142,2.775,1147,2.775,1149,2.283,1150,2.775,1169,1.976,1175,2.775,1202,2.775,1267,2.283,1268,2.775,1288,1.976,1292,2.775,1318,2.775,1336,2.775,1337,3.202,1338,3.202,1339,4.64,1340,4.64,1341,8.002,1342,3.202,1343,5.457,1344,5.457,1345,4.021,1346,6.623,1347,7.131,1348,2.775,1349,5.457,1350,4.021,1351,4.021,1352,5.984,1353,5.984,1354,6.623,1355,4.64,1356,4.64,1357,4.64,1358,4.64,1359,3.202,1360,5.457,1361,3.202,1362,6.997,1363,6.997,1364,5.457,1365,3.202,1366,5.457,1367,6.832,1368,2.775,1369,4.64,1370,3.202,1371,3.202]],["title/dependencies.html",[34,1.998,1372,2.815]],["body/dependencies.html",[15,0.016,21,0.729,25,0.248,29,0.013,30,0.013,34,2.338,59,3.913,133,3.002,138,1.484,173,3.386,176,4.274,179,3.386,222,3.913,238,4.274,302,1.967,334,3.913,476,3.002,602,3.913,751,4.274,778,5.567,785,4.274,1145,4.274,1146,4.274,1373,7.149,1374,5.488,1375,5.488,1376,5.488,1377,6.646,1378,5.488,1379,5.488,1380,5.488,1381,5.488,1382,5.488,1383,5.488,1384,5.488,1385,5.488,1386,5.488,1387,5.488,1388,5.488,1389,5.488,1390,5.488]],["title/miscellaneous/enumerations.html",[1391,1.777,1392,4.063]],["body/miscellaneous/enumerations.html",[11,0.46,15,0.015,29,0.013,30,0.013,69,3.637,99,1.858,411,3.479,708,4.31,1391,3.294,1392,5.219,1393,6.022,1394,6.022,1395,6.022,1396,6.022,1397,7.023]],["title/miscellaneous/functions.html",[1152,3.651,1391,1.777]],["body/miscellaneous/functions.html",[7,0.193,10,3.202,11,0.396,15,0.014,29,0.012,30,0.012,37,2.972,79,1.433,109,0.711,110,1.141,111,0.557,112,0.979,113,3.202,124,4.242,237,4.041,245,2.838,303,4.242,396,2.4,499,2.687,696,4.041,698,3.722,705,5.001,708,4.042,710,6.085,713,4.497,714,5.431,715,6.134,716,4.497,717,5.675,718,5.001,732,4.041,788,3.428,801,4.041,805,4.497,806,5.565,807,4.497,808,4.497,1152,4.041,1368,4.497,1391,2.838,1398,5.189,1399,5.189,1400,5.189,1401,5.189,1402,5.189,1403,5.189]],["title/index.html",[11,0.298,1404,3.376]],["body/index.html",[2,1.212,15,0.016,22,3.631,29,0.01,30,0.01,31,1.075,32,5.557,33,1.565,34,1.565,35,1.719,36,1.719,37,1.565,38,1.719,39,1.719,40,3.182,41,3.182,42,3.182,43,5.094,44,4.865,45,4.979,46,4.979,47,4.979,48,4.19,49,2.394,50,1.719,51,1.719,75,1.164,129,4.121,154,3.182,155,3.182,156,3.182,157,3.182,158,4.927,159,4.927,160,3.888,161,3.888,212,3.888,270,1.118,406,3.631,426,3.182,427,3.182,428,3.182,429,3.558,430,3.631,439,3.172,598,3.631,617,3.182,618,3.182,620,3.631,654,3.682,814,3.182,815,3.182,816,3.182,870,4.121,881,2.86,894,3.182,896,3.182,897,3.182,898,3.631,922,2.86,973,3.631,988,3.182,990,3.182,991,3.631,1065,3.631,1075,3.182,1076,3.182,1078,3.631,1165,3.182,1166,3.182,1168,3.182,1169,3.631,1284,3.182,1285,3.182,1287,3.182,1288,3.631,1404,3.182,1405,3.672,1406,3.672,1407,3.672,1408,3.672]],["title/modules.html",[33,2.27]],["body/modules.html",[15,0.013,29,0.013,30,0.013,32,4.02,33,2.402,43,3.725,44,3.725,45,3.725,46,3.725,47,3.725,48,3.084,158,3.725,159,3.725,429,2.639,1409,8.027,1410,8.027,1411,8.027,1412,8.027]],["title/properties.html",[275,1.612,1372,2.815]],["body/properties.html",[7,0.186,15,0.015,29,0.014,30,0.014,275,2.133,1038,5.376,1413,6.203,1414,6.203,1415,6.203,1416,6.203]],["title/miscellaneous/typealiases.html",[1391,1.777,1417,4.689]],["body/miscellaneous/typealiases.html",[11,0.475,15,0.014,29,0.014,30,0.014,111,0.621,204,4.843,239,5.572,442,3.401,1391,3.401,1418,6.219,1419,6.219]],["title/miscellaneous/variables.html",[1391,1.777,1420,4.063]],["body/miscellaneous/variables.html",[11,0.37,15,0.016,29,0.012,30,0.012,79,1.329,80,1.384,89,3.795,99,1.211,105,1.31,111,0.586,113,2.989,116,1.889,125,4.819,135,4.063,139,4.789,147,2.064,231,5.33,244,0.877,411,3.163,455,1.889,497,2.649,511,2.382,603,3.454,698,3.917,708,4.347,737,3.565,738,4.386,739,3.795,747,4.789,752,4.789,753,5.433,755,4.197,803,5.33,888,4.789,891,4.197,1345,5.857,1348,5.33,1350,4.197,1351,4.197,1391,2.649,1420,4.197,1421,6.151,1422,6.151,1423,6.151,1424,4.844,1425,4.844,1426,4.844,1427,4.844,1428,4.844,1429,4.844,1430,4.844,1431,4.844,1432,4.844,1433,4.844,1434,4.844,1435,4.844,1436,4.844,1437,4.844,1438,4.844,1439,4.844]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":682,"title":{},"body":{"injectables/HomeworksService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1414,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1389,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1380,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1379,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1384,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1349,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":922,"title":{},"body":{"injectables/RolesRepository.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["1.0.0",{"_index":1386,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1382,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1347,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1340,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1353,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1405,"title":{},"body":{"index.html":{}}}],["10.0.0",{"_index":1373,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1376,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1375,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1341,"title":{},"body":{"coverage.html":{}}}],["19",{"_index":1407,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":1354,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1358,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1408,"title":{},"body":{"index.html":{}}}],["3.1.1",{"_index":1374,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1360,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1365,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1352,"title":{},"body":{"coverage.html":{}}}],["4.0.1",{"_index":1385,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1342,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":1344,"title":{},"body":{"coverage.html":{}}}],["5.1.1",{"_index":1378,"title":{},"body":{"dependencies.html":{}}}],["5.8.0",{"_index":1377,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1367,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1356,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1339,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":1363,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":1369,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1357,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":1390,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1366,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1364,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":1359,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1343,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1355,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1362,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1406,"title":{},"body":{"index.html":{}}}],["9/9",{"_index":1361,"title":{},"body":{"coverage.html":{}}}],["_data",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["absolute",{"_index":1231,"title":{},"body":{"injectables/UploadService.html":{}}}],["absolutepath",{"_index":1237,"title":{},"body":{"injectables/UploadService.html":{}}}],["access",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["access_roles_key",{"_index":888,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accessroles",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actions",{"_index":836,"title":{},"body":{"injectables/PrismaService.html":{}}}],["add",{"_index":1128,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["adding",{"_index":910,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["additional",{"_index":718,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["address",{"_index":564,"title":{},"body":{"classes/FindUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["admin",{"_index":1397,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":1418,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":946,"title":{},"body":{"injectables/RolesService.html":{}}}],["answered",{"_index":360,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{}}}],["any)[relatedpropertyname",{"_index":811,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["app",{"_index":833,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.close",{"_index":848,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"miscellaneous/functions.html":{}}}],["applied",{"_index":503,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{}}}],["appmodule",{"_index":32,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["appservice",{"_index":22,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["args",{"_index":803,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/variables.html":{}}}],["args.constraints",{"_index":809,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["args.object",{"_index":810,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["async",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/RolesController.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["at(0",{"_index":481,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersService.html":{}}}],["attached",{"_index":591,"title":{},"body":{"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{}}}],["auth",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":735,"title":{},"body":{"classes/JwtAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":745,"title":{},"body":{"classes/JwtAuthGuard.html":{}}}],["auth.guard.ts:18",{"_index":748,"title":{},"body":{"classes/JwtAuthGuard.html":{}}}],["auth.service",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/jwt",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/role.guard",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":83,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":798,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["authentication",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{}}}],["authguard",{"_index":750,"title":{},"body":{"classes/JwtAuthGuard.html":{},"classes/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":741,"title":{},"body":{"classes/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":786,"title":{},"body":{"classes/LocalAuthGuard.html":{}}}],["authmodule",{"_index":43,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["authodid",{"_index":551,"title":{},"body":{"classes/FindSolutionDto.html":{}}}],["author",{"_index":1038,"title":{},"body":{"injectables/SolutionsService.html":{},"properties.html":{}}}],["authorid",{"_index":1041,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["authorization",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtAuthGuard.html":{},"classes/LocalAuthGuard.html":{}}}],["authservice",{"_index":129,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"index.html":{}}}],["automatically",{"_index":1130,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["available",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["badrequestexception",{"_index":504,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('a",{"_index":945,"title":{},"body":{"injectables/RolesService.html":{}}}],["badrequestexception('invalid",{"_index":1330,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["belong",{"_index":939,"title":{},"body":{"injectables/RolesService.html":{}}}],["belongs",{"_index":370,"title":{},"body":{"classes/EditSolutionDto.html":{},"classes/FindSolutionDto.html":{},"injectables/RolesService.html":{}}}],["between",{"_index":825,"title":{},"body":{"injectables/PrismaService.html":{}}}],["birthday",{"_index":557,"title":{},"body":{"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["body",{"_index":404,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/RolesController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":709,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"classes/MatchConstraint.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["browse",{"_index":1412,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1409,"title":{},"body":{"modules.html":{}}}],["canactivate",{"_index":742,"title":{},"body":{"classes/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":746,"title":{},"body":{"classes/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["case",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":518,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["certain",{"_index":392,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UsersController.html":{}}}],["check",{"_index":941,"title":{},"body":{"injectables/RolesService.html":{}}}],["checking",{"_index":788,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/MatchConstraint.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"miscellaneous/functions.html":{}}}],["clas",{"_index":622,"title":{},"body":{"modules/HomeworksModule.html":{},"modules/SolutionsModule.html":{}}}],["class",{"_index":25,"title":{"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":270,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"index.html":{}}}],["cluster_appmodule",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_providers",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_eventsmodule",{"_index":426,"title":{},"body":{"modules/EventsModule.html":{},"index.html":{}}}],["cluster_eventsmodule_imports",{"_index":427,"title":{},"body":{"modules/EventsModule.html":{},"index.html":{}}}],["cluster_eventsmodule_providers",{"_index":428,"title":{},"body":{"modules/EventsModule.html":{},"index.html":{}}}],["cluster_homeworksmodule",{"_index":617,"title":{},"body":{"modules/HomeworksModule.html":{},"index.html":{}}}],["cluster_homeworksmodule_imports",{"_index":619,"title":{},"body":{"modules/HomeworksModule.html":{}}}],["cluster_homeworksmodule_providers",{"_index":618,"title":{},"body":{"modules/HomeworksModule.html":{},"index.html":{}}}],["cluster_prismamodule",{"_index":814,"title":{},"body":{"modules/PrismaModule.html":{},"index.html":{}}}],["cluster_prismamodule_exports",{"_index":816,"title":{},"body":{"modules/PrismaModule.html":{},"index.html":{}}}],["cluster_prismamodule_providers",{"_index":815,"title":{},"body":{"modules/PrismaModule.html":{},"index.html":{}}}],["cluster_rolesmodule",{"_index":894,"title":{},"body":{"modules/RolesModule.html":{},"index.html":{}}}],["cluster_rolesmodule_exports",{"_index":897,"title":{},"body":{"modules/RolesModule.html":{},"index.html":{}}}],["cluster_rolesmodule_imports",{"_index":895,"title":{},"body":{"modules/RolesModule.html":{}}}],["cluster_rolesmodule_providers",{"_index":896,"title":{},"body":{"modules/RolesModule.html":{},"index.html":{}}}],["cluster_solutionsmodule",{"_index":988,"title":{},"body":{"modules/SolutionsModule.html":{},"index.html":{}}}],["cluster_solutionsmodule_imports",{"_index":989,"title":{},"body":{"modules/SolutionsModule.html":{}}}],["cluster_solutionsmodule_providers",{"_index":990,"title":{},"body":{"modules/SolutionsModule.html":{},"index.html":{}}}],["cluster_teacherresponsesmodule",{"_index":1075,"title":{},"body":{"modules/TeacherResponsesModule.html":{},"index.html":{}}}],["cluster_teacherresponsesmodule_imports",{"_index":1077,"title":{},"body":{"modules/TeacherResponsesModule.html":{}}}],["cluster_teacherresponsesmodule_providers",{"_index":1076,"title":{},"body":{"modules/TeacherResponsesModule.html":{},"index.html":{}}}],["cluster_uploadmodule",{"_index":1165,"title":{},"body":{"modules/UploadModule.html":{},"index.html":{}}}],["cluster_uploadmodule_exports",{"_index":1168,"title":{},"body":{"modules/UploadModule.html":{},"index.html":{}}}],["cluster_uploadmodule_imports",{"_index":1167,"title":{},"body":{"modules/UploadModule.html":{}}}],["cluster_uploadmodule_providers",{"_index":1166,"title":{},"body":{"modules/UploadModule.html":{},"index.html":{}}}],["cluster_usersmodule",{"_index":1284,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_exports",{"_index":1287,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_imports",{"_index":1286,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1285,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["common",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/PrismaService.html":{}}}],["compare",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"classes/IsAfterConstraint.html":{},"miscellaneous/functions.html":{}}}],["compare(string(password",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["completing",{"_index":314,"title":{},"body":{"classes/CreateHomeworkDto.html":{}}}],["completion",{"_index":286,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{}}}],["configmodule",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"modules/UploadModule.html":{}}}],["configmodule.forroot",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"modules/UploadModule.html":{}}}],["configservice",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UploadService.html":{}}}],["configservice.get('jwt_expiration",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configure",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure(consumer",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["confirmation",{"_index":856,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["confirmpassword",{"_index":852,"title":{},"body":{"classes/RegisterUserDto.html":{},"injectables/UsersService.html":{}}}],["connect",{"_index":517,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["connecting",{"_index":818,"title":{},"body":{"modules/PrismaModule.html":{}}}],["console.error(error",{"_index":520,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["console.log(error",{"_index":692,"title":{},"body":{"injectables/HomeworksService.html":{},"injectables/UploadService.html":{}}}],["const",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MatchConstraint.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["constraints",{"_index":724,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["constructor",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":789,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":763,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UploadService.html":{}}}],["constructor(eventsrepository",{"_index":487,"title":{},"body":{"injectables/EventsService.html":{}}}],["constructor(homeworksrepository",{"_index":653,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["constructor(prisma",{"_index":906,"title":{},"body":{"injectables/RolesRepository.html":{},"injectables/UsersRepository.html":{}}}],["constructor(prismaservice",{"_index":438,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{}}}],["constructor(private",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"classes/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/RolesController.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":743,"title":{},"body":{"classes/JwtAuthGuard.html":{}}}],["constructor(rolesrepository",{"_index":927,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(rolesservice",{"_index":885,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(solutionsrepository",{"_index":1021,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["constructor(teacherresponsesrepository",{"_index":1112,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["constructor(usersrepository",{"_index":1319,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["consumer.apply(cookieparser()).forroutes",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["contained",{"_index":1211,"title":{},"body":{"injectables/UploadService.html":{}}}],["containing",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/PrismaService.html":{},"controllers/RolesController.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["contains",{"_index":508,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/RolesService.html":{}}}],["content",{"_index":316,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/EditResponseDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{}}}],["context",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"classes/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":758,"title":{},"body":{"classes/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":757,"title":{},"body":{"classes/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gettype",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest().user",{"_index":891,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["context.switchtorpc().getdata().user",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/RolesController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/RolesController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('events",{"_index":417,"title":{},"body":{"controllers/EventsController.html":{}}}],["controller('homeworks",{"_index":604,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["controller('media",{"_index":1162,"title":{},"body":{"controllers/UploadController.html":{}}}],["controller('responses",{"_index":1068,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["controller('roles",{"_index":876,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('solutions",{"_index":979,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["controller('users",{"_index":1279,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["cookie",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["cookieparser",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["correct",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["correctness",{"_index":768,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["corresponding",{"_index":457,"title":{},"body":{"injectables/EventsRepository.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["corresponds",{"_index":494,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UsersService.html":{}}}],["coverage",{"_index":1336,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":384,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/RolesController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UsersController.html":{}}}],["created",{"_index":445,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["createevent",{"_index":378,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{}}}],["createevent(@body",{"_index":420,"title":{},"body":{"controllers/EventsController.html":{}}}],["createevent(createeventdto",{"_index":382,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["createevent(params",{"_index":441,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["createeventdto",{"_index":269,"title":{"classes/CreateEventDto.html":{}},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["createfile",{"_index":1176,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["createfile(params",{"_index":1182,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["createhomework",{"_index":627,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["createhomework(params",{"_index":631,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["createhomeworkdto",{"_index":306,"title":{"classes/CreateHomeworkDto.html":{}},"body":{"classes/CreateHomeworkDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"classes/UpdateHomeworkDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrole",{"_index":866,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{}}}],["createrole(@body",{"_index":878,"title":{},"body":{"controllers/RolesController.html":{}}}],["createrole(createroledto",{"_index":867,"title":{},"body":{"controllers/RolesController.html":{}}}],["createrole(params",{"_index":908,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["createrole(undefined",{"_index":929,"title":{},"body":{"injectables/RolesService.html":{}}}],["createroledto",{"_index":340,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["createroledto.title",{"_index":880,"title":{},"body":{"controllers/RolesController.html":{}}}],["createsolution",{"_index":996,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["createsolution(params",{"_index":1000,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["createsolutiondto",{"_index":967,"title":{},"body":{"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{}}}],["createteacherresponse",{"_index":1083,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["createteacherresponse(params",{"_index":1089,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["createuser",{"_index":1269,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":1282,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(params",{"_index":1298,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["createuser(registeruserdto",{"_index":1271,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["creating",{"_index":273,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/RolesService.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["crypto",{"_index":1226,"title":{},"body":{"injectables/UploadService.html":{}}}],["current",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsAfterConstraint.html":{},"injectables/RolesService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":1395,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["currentuser",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cursor",{"_index":467,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["data",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":820,"title":{},"body":{"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/RolesController.html":{},"injectables/RolesRepository.html":{}}}],["databaseroles",{"_index":948,"title":{},"body":{"injectables/RolesService.html":{}}}],["date",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/FindEventDto.html":{},"classes/FindUserDto.html":{},"classes/IsAfterConstraint.html":{},"classes/RegisterUserDto.html":{},"miscellaneous/functions.html":{}}}],["date(relatedvalue",{"_index":730,"title":{},"body":{"classes/IsAfterConstraint.html":{}}}],["date(value",{"_index":729,"title":{},"body":{"classes/IsAfterConstraint.html":{}}}],["dates",{"_index":513,"title":{},"body":{"injectables/EventsService.html":{}}}],["deadline",{"_index":310,"title":{},"body":{"classes/CreateHomeworkDto.html":{}}}],["declarations",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["decorator",{"_index":698,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"classes/MatchConstraint.html":{},"guards/RolesGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{}}}],["decorators/current",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/public.decorator",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"classes/JwtAuthGuard.html":{}}}],["decorators/roles.decorator",{"_index":873,"title":{},"body":{"controllers/RolesController.html":{},"guards/RolesGuard.html":{}}}],["default",{"_index":753,"title":{},"body":{"classes/JwtAuthGuard.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":701,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["defaultmessage(validationarguments",{"_index":702,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["defaultmessage?(validationarguments",{"_index":731,"title":{},"body":{"classes/IsAfterConstraint.html":{}}}],["defined",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":386,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{}}}],["delete(id",{"_index":1206,"title":{},"body":{"injectables/UploadService.html":{}}}],["deleted",{"_index":452,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["deleteevent",{"_index":379,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{}}}],["deleteevent(@query('id",{"_index":424,"title":{},"body":{"controllers/EventsController.html":{}}}],["deleteevent(id",{"_index":385,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["deleteevent(params",{"_index":446,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["deletefile",{"_index":1177,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["deletefile(params",{"_index":1185,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["deletehomework",{"_index":577,"title":{},"body":{"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{}}}],["deletehomework(@query('id",{"_index":615,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["deletehomework(id",{"_index":581,"title":{},"body":{"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{}}}],["deletehomework(params",{"_index":633,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["deleteresponse",{"_index":1051,"title":{},"body":{"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{}}}],["deleteresponse(@query('id",{"_index":1073,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["deleteresponse(id",{"_index":1055,"title":{},"body":{"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{}}}],["deletesolution",{"_index":958,"title":{},"body":{"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{}}}],["deletesolution(@query('id",{"_index":986,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["deletesolution(id",{"_index":962,"title":{},"body":{"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{}}}],["deletesolution(params",{"_index":1002,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["deleteteacherresponse",{"_index":1084,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["deleteteacherresponse(params",{"_index":1092,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["deleteuser",{"_index":1293,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["deleteuser(params",{"_index":1300,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["deleting",{"_index":448,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"injectables/UsersRepository.html":{}}}],["dependencies",{"_index":34,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["deprive",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["depriving",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["designates",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desired",{"_index":394,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["disable",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["documentation",{"_index":1337,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":319,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/FindHomeworkDto.html":{}}}],["down",{"_index":840,"title":{},"body":{"injectables/PrismaService.html":{}}}],["download",{"_index":1153,"title":{},"body":{"controllers/UploadController.html":{},"injectables/UploadService.html":{}}}],["download(fileid",{"_index":1154,"title":{},"body":{"controllers/UploadController.html":{}}}],["download(id",{"_index":1208,"title":{},"body":{"injectables/UploadService.html":{}}}],["downloading",{"_index":1157,"title":{},"body":{"controllers/UploadController.html":{}}}],["dto/create",{"_index":408,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["dto/edit",{"_index":976,"title":{},"body":{"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{}}}],["dto/find",{"_index":413,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/register",{"_index":1278,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":410,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{}}}],["during",{"_index":842,"title":{},"body":{"injectables/PrismaService.html":{}}}],["each",{"_index":338,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/FindHomeworkDto.html":{}}}],["editresponsedto",{"_index":345,"title":{"classes/EditResponseDto.html":{}},"body":{"classes/EditResponseDto.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{},"coverage.html":{}}}],["editsolutiondto",{"_index":365,"title":{"classes/EditSolutionDto.html":{}},"body":{"classes/EditSolutionDto.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"coverage.html":{}}}],["editsolutiondto.homeworkid",{"_index":1042,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["email",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"classes/FindUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/UsersService.html":{}}}],["enableshutdownhooks",{"_index":827,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":830,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":512,"title":{},"body":{"injectables/EventsService.html":{}}}],["endtime",{"_index":276,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{}}}],["entire",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["entry",{"_index":1401,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enumerations",{"_index":1392,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envfilepath",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"modules/UploadModule.html":{}}}],["equal",{"_index":807,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["equality",{"_index":805,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["error",{"_index":519,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["error('unknown",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error(`the",{"_index":1263,"title":{},"body":{"injectables/UploadService.html":{}}}],["eslint",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["eslint/no",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["evaluation",{"_index":356,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{}}}],["event",{"_index":274,"title":{},"body":{"classes/CreateEventDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/UpdateEventDto.html":{}}}],["event.dto",{"_index":409,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{}}}],["event.dto.ts",{"_index":272,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["event.dto.ts:17",{"_index":296,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:23",{"_index":531,"title":{},"body":{"classes/FindEventDto.html":{}}}],["event.dto.ts:25",{"_index":282,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:32",{"_index":527,"title":{},"body":{"classes/FindEventDto.html":{}}}],["event.dto.ts:33",{"_index":287,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:41",{"_index":293,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{}}}],["event.dto.ts:50",{"_index":284,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{}}}],["event.dto.ts:58",{"_index":297,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:60",{"_index":529,"title":{},"body":{"classes/FindEventDto.html":{}}}],["event.dto.ts:69",{"_index":532,"title":{},"body":{"classes/FindEventDto.html":{}}}],["event.userid",{"_index":522,"title":{},"body":{"injectables/EventsService.html":{}}}],["events",{"_index":373,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{}}}],["events.controller",{"_index":432,"title":{},"body":{"modules/EventsModule.html":{}}}],["events.repository",{"_index":433,"title":{},"body":{"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["events.service",{"_index":407,"title":{},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{}}}],["events/events.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["eventscontroller",{"_index":371,"title":{"controllers/EventsController.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["eventsmodule",{"_index":44,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"index.html":{},"modules.html":{}}}],["eventsrepository",{"_index":430,"title":{"injectables/EventsRepository.html":{}},"body":{"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"coverage.html":{},"index.html":{}}}],["eventsservice",{"_index":406,"title":{"injectables/EventsService.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"coverage.html":{},"index.html":{}}}],["exactly",{"_index":813,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["example",{"_index":838,"title":{},"body":{"injectables/PrismaService.html":{}}}],["executioncontext",{"_index":747,"title":{},"body":{"classes/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["existing",{"_index":402,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["exists",{"_index":569,"title":{},"body":{"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/RolesService.html":{}}}],["existssync",{"_index":1221,"title":{},"body":{"injectables/UploadService.html":{}}}],["existssync(absolutepath",{"_index":1238,"title":{},"body":{"injectables/UploadService.html":{}}}],["existssync(path",{"_index":1262,"title":{},"body":{"injectables/UploadService.html":{}}}],["expires",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["expires.getseconds",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["expires.setseconds",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["express",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":587,"title":{},"body":{"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{}}}],["extends",{"_index":740,"title":{},"body":{"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{}}}],["extension",{"_index":1242,"title":{},"body":{"injectables/UploadService.html":{}}}],["extensions",{"_index":328,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/FindHomeworkDto.html":{}}}],["extname",{"_index":1220,"title":{},"body":{"injectables/UploadService.html":{}}}],["extname(file.originalname",{"_index":1243,"title":{},"body":{"injectables/UploadService.html":{}}}],["extractjwt",{"_index":776,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":780,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["field",{"_index":715,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1252,"title":{},"body":{"injectables/UploadService.html":{}}}],["file.dto",{"_index":1219,"title":{},"body":{"injectables/UploadService.html":{}}}],["file.dto.ts",{"_index":535,"title":{},"body":{"classes/FindFileDto.html":{},"coverage.html":{}}}],["file.dto.ts:16",{"_index":537,"title":{},"body":{"classes/FindFileDto.html":{}}}],["file.id",{"_index":1136,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["file.relative",{"_index":1233,"title":{},"body":{"injectables/UploadService.html":{}}}],["file.size",{"_index":1257,"title":{},"body":{"injectables/UploadService.html":{}}}],["file.url",{"_index":983,"title":{},"body":{"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{}}}],["fileabsolute",{"_index":1247,"title":{},"body":{"injectables/UploadService.html":{}}}],["fileid",{"_index":1159,"title":{},"body":{"controllers/UploadController.html":{}}}],["filename",{"_index":1245,"title":{},"body":{"injectables/UploadService.html":{}}}],["filerelative",{"_index":1249,"title":{},"body":{"injectables/UploadService.html":{}}}],["files",{"_index":324,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{}}}],["files.length",{"_index":681,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["files.map(async",{"_index":1241,"title":{},"body":{"injectables/UploadService.html":{}}}],["filesinterceptor",{"_index":601,"title":{},"body":{"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{}}}],["filter((role",{"_index":950,"title":{},"body":{"injectables/RolesService.html":{}}}],["findevent",{"_index":437,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["findevent(params",{"_index":453,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["findeventdto",{"_index":389,"title":{"classes/FindEventDto.html":{}},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"coverage.html":{}}}],["findevents",{"_index":380,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsRepository.html":{}}}],["findevents(@body",{"_index":418,"title":{},"body":{"controllers/EventsController.html":{}}}],["findevents(params",{"_index":461,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["findevents(props",{"_index":388,"title":{},"body":{"controllers/EventsController.html":{}}}],["findfile",{"_index":1178,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["findfile(params",{"_index":1188,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["findfiledto",{"_index":533,"title":{"classes/FindFileDto.html":{}},"body":{"classes/FindFileDto.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["findfiles",{"_index":1179,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["findfiles(params",{"_index":1192,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["findhomework",{"_index":628,"title":{},"body":{"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{}}}],["findhomework(params",{"_index":635,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["findhomework(props",{"_index":657,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["findhomeworkdto",{"_index":539,"title":{"classes/FindHomeworkDto.html":{}},"body":{"classes/FindHomeworkDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"coverage.html":{}}}],["findhomeworks",{"_index":629,"title":{},"body":{"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{}}}],["findhomeworks(params",{"_index":637,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["findhomeworks(props",{"_index":659,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["findresponse",{"_index":1109,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["findresponse(props",{"_index":1115,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["findresponsedto",{"_index":545,"title":{"classes/FindResponseDto.html":{}},"body":{"classes/FindResponseDto.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{},"coverage.html":{}}}],["findresponses",{"_index":1110,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["findresponses(props",{"_index":1117,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["findrole",{"_index":904,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["findrole(params",{"_index":912,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["findroledto",{"_index":547,"title":{"classes/FindRoleDto.html":{}},"body":{"classes/FindRoleDto.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["findroles",{"_index":905,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["findroles(params",{"_index":915,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["findsolution",{"_index":997,"title":{},"body":{"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{}}}],["findsolution(params",{"_index":1004,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["findsolution(props",{"_index":1024,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["findsolutiondto",{"_index":549,"title":{"classes/FindSolutionDto.html":{}},"body":{"classes/FindSolutionDto.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"coverage.html":{}}}],["findsolutions",{"_index":998,"title":{},"body":{"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{}}}],["findsolutions(params",{"_index":1006,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["findsolutions(props",{"_index":1026,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["findteacherresponse",{"_index":1085,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["findteacherresponse(params",{"_index":1095,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["findteacherresponses",{"_index":1086,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["findteacherresponses(params",{"_index":1098,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["finduser",{"_index":1294,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["finduser(params",{"_index":1303,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["finduser(props",{"_index":1322,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserdto",{"_index":554,"title":{"classes/FindUserDto.html":{}},"body":{"classes/FindUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findusers",{"_index":1295,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["findusers(params",{"_index":1305,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["findusers(props",{"_index":1324,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":459,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["fit",{"_index":471,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["fits",{"_index":460,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["folder",{"_index":1217,"title":{},"body":{"injectables/UploadService.html":{}}}],["found",{"_index":1264,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs",{"_index":1224,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs/promises",{"_index":1228,"title":{},"body":{"injectables/UploadService.html":{}}}],["function",{"_index":719,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"coverage.html":{}}}],["functions",{"_index":1152,"title":{"miscellaneous/functions.html":{}},"body":{"controllers/UploadController.html":{},"miscellaneous/functions.html":{}}}],["gensalt",{"_index":1326,"title":{},"body":{"injectables/UsersService.html":{}}}],["gensalt(10",{"_index":1332,"title":{},"body":{"injectables/UsersService.html":{}}}],["get('/validate",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':fileid",{"_index":1155,"title":{},"body":{"controllers/UploadController.html":{}}}],["getcurrentuserbycontext",{"_index":1348,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuserbycontext(context",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getevent",{"_index":485,"title":{},"body":{"injectables/EventsService.html":{}}}],["getevent(props",{"_index":491,"title":{},"body":{"injectables/EventsService.html":{}}}],["getevents",{"_index":486,"title":{},"body":{"injectables/EventsService.html":{}}}],["getevents(props",{"_index":495,"title":{},"body":{"injectables/EventsService.html":{}}}],["getfiles",{"_index":1203,"title":{},"body":{"injectables/UploadService.html":{}}}],["getfiles(props",{"_index":1212,"title":{},"body":{"injectables/UploadService.html":{}}}],["gethello",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethomeworks",{"_index":578,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["gethomeworks(@body",{"_index":605,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["gethomeworks(props",{"_index":583,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["getresponses",{"_index":1052,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["getresponses(props",{"_index":1057,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["getrole",{"_index":924,"title":{},"body":{"injectables/RolesService.html":{}}}],["getrole(props",{"_index":931,"title":{},"body":{"injectables/RolesService.html":{}}}],["getroles",{"_index":925,"title":{},"body":{"injectables/RolesService.html":{}}}],["getroles(props",{"_index":933,"title":{},"body":{"injectables/RolesService.html":{}}}],["getsolutions",{"_index":959,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["getsolutions(@body",{"_index":980,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["getsolutions(props",{"_index":964,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["gettargetdir",{"_index":1020,"title":{},"body":{"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{}}}],["getting",{"_index":455,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["getusers",{"_index":1270,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(@body",{"_index":1280,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(userdto",{"_index":1274,"title":{},"body":{"controllers/UsersController.html":{}}}],["global",{"_index":900,"title":{},"body":{"modules/RolesModule.html":{}}}],["greater",{"_index":733,"title":{},"body":{"classes/IsAfterConstraint.html":{}}}],["group",{"_index":738,"title":{},"body":{"classes/JwtAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["guard",{"_index":881,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["guards",{"_index":882,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/role.guard",{"_index":874,"title":{},"body":{"controllers/RolesController.html":{}}}],["handler",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/RolesController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UsersController.html":{}}}],["hash",{"_index":1327,"title":{},"body":{"injectables/UsersService.html":{}}}],["hash(string(password",{"_index":1334,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":1333,"title":{},"body":{"injectables/UsersService.html":{}}}],["hello",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["homework",{"_index":309,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/EditSolutionDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindSolutionDto.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"classes/UpdateHomeworkDto.html":{}}}],["homework.dto",{"_index":600,"title":{},"body":{"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"classes/UpdateHomeworkDto.html":{}}}],["homework.dto.ts",{"_index":308,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/FindHomeworkDto.html":{},"classes/UpdateHomeworkDto.html":{},"coverage.html":{}}}],["homework.dto.ts:17",{"_index":544,"title":{},"body":{"classes/FindHomeworkDto.html":{}}}],["homework.dto.ts:24",{"_index":332,"title":{},"body":{"classes/CreateHomeworkDto.html":{}}}],["homework.dto.ts:26",{"_index":541,"title":{},"body":{"classes/FindHomeworkDto.html":{}}}],["homework.dto.ts:32",{"_index":315,"title":{},"body":{"classes/CreateHomeworkDto.html":{}}}],["homework.dto.ts:35",{"_index":543,"title":{},"body":{"classes/FindHomeworkDto.html":{}}}],["homework.dto.ts:40",{"_index":329,"title":{},"body":{"classes/CreateHomeworkDto.html":{}}}],["homework.dto.ts:44",{"_index":542,"title":{},"body":{"classes/FindHomeworkDto.html":{}}}],["homework.dto.ts:48",{"_index":313,"title":{},"body":{"classes/CreateHomeworkDto.html":{}}}],["homework.dto.ts:57",{"_index":327,"title":{},"body":{"classes/CreateHomeworkDto.html":{}}}],["homework.dto.ts:68",{"_index":322,"title":{},"body":{"classes/CreateHomeworkDto.html":{}}}],["homework.images",{"_index":688,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["homework.images.map((image",{"_index":609,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["homework.images.map(async",{"_index":683,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["homework.supportedfiletypes",{"_index":691,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["homework.teacherid",{"_index":689,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["homeworkid",{"_index":368,"title":{},"body":{"classes/EditSolutionDto.html":{},"classes/FindSolutionDto.html":{},"injectables/SolutionsService.html":{}}}],["homeworks",{"_index":576,"title":{},"body":{"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{}}}],["homeworks.controller",{"_index":623,"title":{},"body":{"modules/HomeworksModule.html":{}}}],["homeworks.repository",{"_index":624,"title":{},"body":{"modules/HomeworksModule.html":{},"injectables/HomeworksService.html":{}}}],["homeworks.service",{"_index":599,"title":{},"body":{"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{}}}],["homeworks/homeworks.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["homeworkscontroller",{"_index":574,"title":{"controllers/HomeworksController.html":{}},"body":{"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"coverage.html":{}}}],["homeworksmodule",{"_index":45,"title":{"modules/HomeworksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeworksModule.html":{},"index.html":{},"modules.html":{}}}],["homeworksrepository",{"_index":620,"title":{"injectables/HomeworksRepository.html":{}},"body":{"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"coverage.html":{},"index.html":{}}}],["homeworksservice",{"_index":598,"title":{"injectables/HomeworksService.html":{}},"body":{"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksService.html":{},"coverage.html":{},"index.html":{}}}],["http",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:3000/media/${res.id",{"_index":1260,"title":{},"body":{"injectables/UploadService.html":{}}}],["httponly",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterUserDto.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["identified",{"_index":771,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["identifier",{"_index":289,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"injectables/HomeworksService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["identify",{"_index":451,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["image",{"_index":684,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["image.id",{"_index":675,"title":{},"body":{"injectables/HomeworksService.html":{},"injectables/SolutionsService.html":{}}}],["image.url",{"_index":610,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["images",{"_index":608,"title":{},"body":{"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{}}}],["implements",{"_index":699,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":648,"title":{},"body":{"injectables/HomeworksRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{}}}],["incorrectly",{"_index":514,"title":{},"body":{"injectables/EventsService.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":831,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["initialization",{"_index":843,"title":{},"body":{"injectables/PrismaService.html":{}}}],["inject",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["injectable",{"_index":74,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["input",{"_index":772,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["interacting",{"_index":819,"title":{},"body":{"modules/PrismaModule.html":{}}}],["interaction",{"_index":824,"title":{},"body":{"injectables/PrismaService.html":{}}}],["internalservererrorexception",{"_index":505,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UsersService.html":{}}}],["is_public_key",{"_index":752,"title":{},"body":{"classes/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isafter",{"_index":303,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{},"classes/IsAfterConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isafter('starttime",{"_index":305,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{}}}],["isafter('starttime')@isdatestring",{"_index":283,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isafter(property",{"_index":1403,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isafterconstraint",{"_index":695,"title":{"classes/IsAfterConstraint.html":{}},"body":{"classes/IsAfterConstraint.html":{},"coverage.html":{}}}],["isdatestring",{"_index":292,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/FindEventDto.html":{},"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isemail",{"_index":573,"title":{},"body":{"classes/FindUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isglobal",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"modules/UploadModule.html":{}}}],["isnotempty",{"_index":301,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{}}}],["isnumber",{"_index":336,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{}}}],["isoptional",{"_index":335,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/EditResponseDto.html":{},"classes/FindEventDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isoptional()@isafter('starttime')@isdatestring",{"_index":528,"title":{},"body":{"classes/FindEventDto.html":{}}}],["isoptional()@isdatestring",{"_index":530,"title":{},"body":{"classes/FindEventDto.html":{},"classes/FindUserDto.html":{}}}],["isoptional()@isemail",{"_index":562,"title":{},"body":{"classes/FindUserDto.html":{}}}],["isoptional()@isstring",{"_index":526,"title":{},"body":{"classes/FindEventDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isoptional()@isstring()@isnotempty",{"_index":358,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindEventDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindSolutionDto.html":{}}}],["isoptional()@isstring({each",{"_index":326,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/FindHomeworkDto.html":{}}}],["isoptional()@transform(undefined)@isnumber()@min(0",{"_index":321,"title":{},"body":{"classes/CreateHomeworkDto.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(0",{"_index":354,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{}}}],["ispasswordsequal",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispublic",{"_index":755,"title":{},"body":{"classes/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":281,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isstring()@isnotempty",{"_index":295,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditSolutionDto.html":{},"classes/FindFileDto.html":{},"classes/FindRoleDto.html":{}}}],["issuing",{"_index":1210,"title":{},"body":{"injectables/UploadService.html":{}}}],["isuserbelong",{"_index":926,"title":{},"body":{"injectables/RolesService.html":{}}}],["isuserbelong(targetrolenames",{"_index":935,"title":{},"body":{"injectables/RolesService.html":{}}}],["joi",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"modules/UploadModule.html":{}}}],["joi.number().required",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["joi.object",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"modules/UploadModule.html":{}}}],["joi.string().required",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"modules/UploadModule.html":{}}}],["join",{"_index":1032,"title":{},"body":{"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{}}}],["join('responses",{"_index":1141,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["join('solutions",{"_index":1046,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["join(absolutepath",{"_index":1248,"title":{},"body":{"injectables/UploadService.html":{}}}],["join(process.cwd",{"_index":1232,"title":{},"body":{"injectables/UploadService.html":{}}}],["join(targetlocation",{"_index":1250,"title":{},"body":{"injectables/UploadService.html":{}}}],["jwt",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expiration",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_secret",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":62,"title":{"classes/JwtAuthGuard.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":779,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":160,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["last",{"_index":571,"title":{},"body":{"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["later",{"_index":716,"title":{},"body":{"classes/IsAfterConstraint.html":{},"miscellaneous/functions.html":{}}}],["layer",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/PrismaService.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["license",{"_index":1415,"title":{},"body":{"properties.html":{}}}],["line",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["link",{"_index":298,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{}}}],["list",{"_index":395,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UsersController.html":{}}}],["literal",{"_index":442,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{},"miscellaneous/typealiases.html":{}}}],["local",{"_index":785,"title":{},"body":{"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":131,"title":{"classes/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":161,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"index.html":{}}}],["located",{"_index":1158,"title":{},"body":{"controllers/UploadController.html":{}}}],["logic",{"_index":697,"title":{},"body":{"classes/IsAfterConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MatchConstraint.html":{}}}],["login",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{}}}],["login(user",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuser(user",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":226,"title":{"classes/LoginUserDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["logout",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@res",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(response",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutuser",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["logoutuser(response",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":458,"title":{},"body":{"injectables/EventsRepository.html":{},"classes/FindRoleDto.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"injectables/UsersRepository.html":{}}}],["lts.1",{"_index":1383,"title":{},"body":{"dependencies.html":{}}}],["made",{"_index":330,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/FindHomeworkDto.html":{}}}],["main",{"_index":823,"title":{},"body":{"injectables/PrismaService.html":{}}}],["manipulating",{"_index":376,"title":{},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["map((role",{"_index":952,"title":{},"body":{"injectables/RolesService.html":{}}}],["marked",{"_index":714,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["marking",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["match",{"_index":396,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"classes/MatchConstraint.html":{},"classes/RegisterUserDto.html":{},"injectables/RolesRepository.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["match('password",{"_index":854,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["match(property",{"_index":808,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["matchconstraint",{"_index":800,"title":{"classes/MatchConstraint.html":{}},"body":{"classes/MatchConstraint.html":{},"coverage.html":{}}}],["matching",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxfilescount",{"_index":311,"title":{},"body":{"classes/CreateHomeworkDto.html":{}}}],["maximum",{"_index":323,"title":{},"body":{"classes/CreateHomeworkDto.html":{}}}],["media",{"_index":1151,"title":{},"body":{"controllers/UploadController.html":{}}}],["meeting",{"_index":299,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{}}}],["memberof",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1388,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["methods",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MatchConstraint.html":{},"injectables/PrismaService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["min",{"_index":337,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{}}}],["min(0",{"_index":339,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{}}}],["miscellaneous",{"_index":1391,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mkdirsync",{"_index":1222,"title":{},"body":{"injectables/UploadService.html":{}}}],["mkdirsync(absolutepath",{"_index":1239,"title":{},"body":{"injectables/UploadService.html":{}}}],["module",{"_index":31,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modules",{"_index":33,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["multer",{"_index":1381,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateRoleDto.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindRoleDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MatchConstraint.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["necessary",{"_index":493,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":502,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{}}}],["needs",{"_index":318,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/FindHomeworkDto.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"classes/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1145,"title":{},"body":{"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":602,"title":{},"body":{"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"dependencies.html":{}}}],["never",{"_index":847,"title":{},"body":{"injectables/PrismaService.html":{}}}],["new",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newimages",{"_index":680,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["newimages.map((image",{"_index":687,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["newimages.map(async",{"_index":693,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["next",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["null",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HomeworksService.html":{}}}],["number",{"_index":320,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/EditResponseDto.html":{},"injectables/EventsRepository.html":{},"classes/FindResponseDto.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["number(responsedto.score",{"_index":1134,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["object",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["object.constructor",{"_index":722,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["objects",{"_index":377,"title":{},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":749,"title":{},"body":{"classes/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["ones",{"_index":525,"title":{},"body":{"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{}}}],["onmoduledestroy",{"_index":828,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":829,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateHomeworkDto.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MatchConstraint.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":723,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["orderby",{"_index":469,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["organizer",{"_index":277,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{}}}],["organizes",{"_index":291,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{}}}],["out",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["overview",{"_index":1404,"title":{"index.html":{}},"body":{"index.html":{}}}],["owner",{"_index":1254,"title":{},"body":{"injectables/UploadService.html":{}}}],["ownerid",{"_index":1216,"title":{},"body":{"injectables/UploadService.html":{}}}],["owns",{"_index":538,"title":{},"body":{"classes/FindFileDto.html":{},"injectables/UploadService.html":{}}}],["package",{"_index":1372,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MatchConstraint.html":{},"controllers/RolesController.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["param('fileid",{"_index":1163,"title":{},"body":{"controllers/UploadController.html":{}}}],["parameter",{"_index":498,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["parameters",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":444,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["parser",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["partialtype",{"_index":1144,"title":{},"body":{"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{}}}],["partialtype(createeventdto",{"_index":1143,"title":{},"body":{"classes/UpdateEventDto.html":{}}}],["partialtype(createhomeworkdto",{"_index":1148,"title":{},"body":{"classes/UpdateHomeworkDto.html":{}}}],["passed",{"_index":464,"title":{},"body":{"injectables/EventsRepository.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["passport",{"_index":778,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":775,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":762,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passthrough",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/UsersService.html":{}}}],["path",{"_index":737,"title":{},"body":{"classes/JwtAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["paths",{"_index":739,"title":{},"body":{"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["patronymic",{"_index":558,"title":{},"body":{"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["payload",{"_index":770,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":783,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["person",{"_index":290,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{}}}],["place",{"_index":300,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{}}}],["point",{"_index":1402,"title":{},"body":{"miscellaneous/functions.html":{}}}],["possible",{"_index":1396,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["post",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/RolesController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@useinterceptors(undefined",{"_index":593,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["prefix",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/RolesController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{}}}],["presented",{"_index":769,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["prisma",{"_index":476,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{}}}],["prisma.eventcreateinput",{"_index":478,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["prisma.eventorderbywithrelationinput",{"_index":470,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["prisma.eventupdateinput",{"_index":475,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["prisma.eventwhereinput",{"_index":468,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["prisma.eventwhereuniqueinput",{"_index":449,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["prisma.filecreateinput",{"_index":1197,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["prisma.fileorderbywithrelationinput",{"_index":1191,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["prisma.fileupdateinput",{"_index":1196,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["prisma.filewhereinput",{"_index":1190,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["prisma.filewhereuniqueinput",{"_index":1187,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["prisma.homeworkcreateinput",{"_index":645,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["prisma.homeworkorderbywithrelationinput",{"_index":641,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["prisma.homeworkupdateinput",{"_index":644,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["prisma.homeworkwhereinput",{"_index":640,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["prisma.homeworkwhereuniqueinput",{"_index":639,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["prisma.service",{"_index":821,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.solutioncreateinput",{"_index":1014,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["prisma.solutionorderbywithrelationinput",{"_index":1010,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["prisma.solutionupdateinput",{"_index":1013,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["prisma.solutionwhereinput",{"_index":1009,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["prisma.solutionwhereuniqueinput",{"_index":1008,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["prisma.teacherresponsecreateinput",{"_index":1091,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["prisma.teacherresponseorderbywithrelationinput",{"_index":1100,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["prisma.teacherresponseupdateinput",{"_index":1103,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["prisma.teacherresponsewhereinput",{"_index":1097,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["prisma.teacherresponsewhereuniqueinput",{"_index":1094,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["prisma.usercreateinput",{"_index":1312,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":1308,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["prisma.userrolecreateinput",{"_index":911,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["prisma.userroleorderbywithrelationinput",{"_index":918,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["prisma.userrolewhereinput",{"_index":914,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["prisma.userrolewhereuniqueinput",{"_index":917,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["prisma.userupdateinput",{"_index":1311,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["prisma.userwhereinput",{"_index":1307,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["prisma.userwhereuniqueinput",{"_index":1302,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["prisma/client",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/PrismaService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":826,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":429,"title":{"modules/PrismaModule.html":{}},"body":{"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["prismaservice",{"_index":439,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{},"coverage.html":{},"index.html":{}}}],["private",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{}}}],["processing",{"_index":374,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/RolesController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UsersController.html":{}}}],["program",{"_index":835,"title":{},"body":{"injectables/PrismaService.html":{}}}],["promise",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":677,"title":{},"body":{"injectables/HomeworksService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{}}}],["properties",{"_index":275,"title":{"properties.html":{}},"body":{"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"properties.html":{}}}],["property",{"_index":717,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["propertyname",{"_index":720,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["props",{"_index":393,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["props.description",{"_index":509,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{}}}],["props.organizer",{"_index":507,"title":{},"body":{"injectables/EventsService.html":{}}}],["props.supportedfiletypes?.join",{"_index":669,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["props.title",{"_index":668,"title":{},"body":{"injectables/HomeworksService.html":{},"injectables/RolesService.html":{}}}],["protect",{"_index":884,"title":{},"body":{"guards/RolesGuard.html":{}}}],["protecting",{"_index":736,"title":{},"body":{"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["provide",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":362,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{},"classes/FindSolutionDto.html":{}}}],["providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["public",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@useguards(localauthguard)@post('login",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["put",{"_index":399,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{}}}],["put()@useinterceptors(undefined",{"_index":588,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["query",{"_index":405,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["query('id",{"_index":422,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{}}}],["randomuuid",{"_index":1225,"title":{},"body":{"injectables/UploadService.html":{}}}],["readonly",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"controllers/RolesController.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":567,"title":{},"body":{"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["receive",{"_index":391,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UsersController.html":{}}}],["recursive",{"_index":1240,"title":{},"body":{"injectables/UploadService.html":{}}}],["reflect",{"_index":1387,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":744,"title":{},"body":{"classes/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["registerdecorator",{"_index":712,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["registering",{"_index":851,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["registeruserdto",{"_index":849,"title":{"classes/RegisterUserDto.html":{}},"body":{"classes/RegisterUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["registration",{"_index":1273,"title":{},"body":{"controllers/UsersController.html":{}}}],["relatedpropertyname",{"_index":725,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["relatedvalue",{"_index":727,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["relative",{"_index":1255,"title":{},"body":{"injectables/UploadService.html":{}}}],["remove",{"_index":1131,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["removing",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["reponses",{"_index":1059,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["repository",{"_index":436,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["request",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["request?.cookies.authentication",{"_index":781,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["requests",{"_index":375,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/RolesController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UsersController.html":{}}}],["res",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HomeworksController.html":{},"injectables/SolutionsService.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{}}}],["res.id",{"_index":1259,"title":{},"body":{"injectables/UploadService.html":{}}}],["res.map((homework",{"_index":607,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["reset",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["response",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateHomeworkDto.html":{},"classes/EditResponseDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{}}}],["response.cookie('authentication",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["response.dto",{"_index":1067,"title":{},"body":{"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{}}}],["response.dto.ts",{"_index":348,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:24",{"_index":361,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{}}}],["response.dto.ts:34",{"_index":359,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{}}}],["response.dto.ts:44",{"_index":364,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{}}}],["response.dto.ts:55",{"_index":355,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{}}}],["response.files.map((file",{"_index":1070,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["response.files.map(async",{"_index":1137,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["response.id",{"_index":1139,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["response.sendfile(absolute",{"_index":1234,"title":{},"body":{"injectables/UploadService.html":{}}}],["responsedto",{"_index":1061,"title":{},"body":{"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{}}}],["responsedto.text",{"_index":1133,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["responses",{"_index":1049,"title":{},"body":{"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{}}}],["responses.controller",{"_index":1080,"title":{},"body":{"modules/TeacherResponsesModule.html":{}}}],["responses.controller.ts",{"_index":1048,"title":{},"body":{"controllers/TeacherResponsesController.html":{},"coverage.html":{}}}],["responses.controller.ts:38",{"_index":1058,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["responses.controller.ts:56",{"_index":1064,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["responses.controller.ts:73",{"_index":1062,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["responses.controller.ts:87",{"_index":1056,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["responses.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["responses.module.ts",{"_index":1079,"title":{},"body":{"modules/TeacherResponsesModule.html":{}}}],["responses.repository",{"_index":1081,"title":{},"body":{"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesService.html":{}}}],["responses.repository.ts",{"_index":1082,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{},"coverage.html":{}}}],["responses.repository.ts:11",{"_index":1088,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["responses.repository.ts:22",{"_index":1090,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["responses.repository.ts:41",{"_index":1099,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["responses.repository.ts:62",{"_index":1096,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["responses.repository.ts:82",{"_index":1102,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["responses.repository.ts:98",{"_index":1093,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["responses.service",{"_index":1066,"title":{},"body":{"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{}}}],["responses.service.ts",{"_index":1108,"title":{},"body":{"injectables/TeacherResponsesService.html":{},"coverage.html":{}}}],["responses.service.ts:116",{"_index":1120,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["responses.service.ts:173",{"_index":1114,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["responses.service.ts:19",{"_index":1113,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["responses.service.ts:193",{"_index":1122,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["responses.service.ts:31",{"_index":1118,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["responses.service.ts:48",{"_index":1116,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["responses.service.ts:66",{"_index":1121,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["responses/dto/edit",{"_index":347,"title":{},"body":{"classes/EditResponseDto.html":{},"coverage.html":{}}}],["responses/dto/find",{"_index":546,"title":{},"body":{"classes/FindResponseDto.html":{},"coverage.html":{}}}],["responses/teacher",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"coverage.html":{}}}],["rest",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["result",{"_index":940,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UploadService.html":{}}}],["results",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":80,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MatchConstraint.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MatchConstraint.html":{},"injectables/PrismaService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["rmsync",{"_index":1223,"title":{},"body":{"injectables/UploadService.html":{}}}],["rmsync(fileabsolute",{"_index":1261,"title":{},"body":{"injectables/UploadService.html":{}}}],["rmsync(path",{"_index":1265,"title":{},"body":{"injectables/UploadService.html":{}}}],["role",{"_index":343,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/FindRoleDto.html":{},"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{}}}],["role.dto",{"_index":872,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["role.dto.ts",{"_index":342,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/FindRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:16",{"_index":344,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/FindRoleDto.html":{}}}],["role.id",{"_index":953,"title":{},"body":{"injectables/RolesService.html":{}}}],["roles",{"_index":411,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roles(roles.admin",{"_index":415,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/RolesController.html":{},"controllers/TeacherResponsesController.html":{}}}],["roles(roles.teacher",{"_index":977,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["roles.admin",{"_index":978,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["roles.controller",{"_index":901,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.enum",{"_index":875,"title":{},"body":{"controllers/RolesController.html":{}}}],["roles.repository",{"_index":902,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["roles.service",{"_index":871,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles.teacher",{"_index":416,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/TeacherResponsesController.html":{}}}],["roles/roles.module",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["roles/roles.service",{"_index":889,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolescontroller",{"_index":863,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":65,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":158,"title":{"modules/RolesModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/RolesModule.html":{},"index.html":{},"modules.html":{}}}],["rolesrepository",{"_index":898,"title":{"injectables/RolesRepository.html":{}},"body":{"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"coverage.html":{},"index.html":{}}}],["rolesservice",{"_index":870,"title":{"injectables/RolesService.html":{}},"body":{"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"index.html":{}}}],["rpc",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":751,"title":{},"body":{"classes/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":1331,"title":{},"body":{"injectables/UsersService.html":{}}}],["score",{"_index":350,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{},"injectables/TeacherResponsesService.html":{}}}],["search",{"_index":472,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["searching",{"_index":463,"title":{},"body":{"injectables/EventsRepository.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["secret",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":782,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sent",{"_index":325,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/FindHomeworkDto.html":{}}}],["server",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PrismaService.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{}}}],["server's",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UploadService.html":{}}}],["service",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/PrismaService.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":77,"title":{},"body":{"injectables/AppService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{},"controllers/UsersController.html":{}}}],["setmetadata(access_roles_key",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["shutting",{"_index":839,"title":{},"body":{"injectables/PrismaService.html":{}}}],["signoptions",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":456,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["size",{"_index":1256,"title":{},"body":{"injectables/UploadService.html":{}}}],["skip",{"_index":465,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["solution",{"_index":357,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"classes/FindResponseDto.html":{},"classes/FindSolutionDto.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{}}}],["solution.dto",{"_index":975,"title":{},"body":{"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{}}}],["solution.dto.ts",{"_index":367,"title":{},"body":{"classes/EditSolutionDto.html":{},"classes/FindSolutionDto.html":{},"coverage.html":{}}}],["solution.dto.ts:16",{"_index":369,"title":{},"body":{"classes/EditSolutionDto.html":{}}}],["solution.dto.ts:17",{"_index":552,"title":{},"body":{"classes/FindSolutionDto.html":{}}}],["solution.dto.ts:27",{"_index":553,"title":{},"body":{"classes/FindSolutionDto.html":{}}}],["solution.files.map((file",{"_index":982,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["solution.files.map(async",{"_index":1044,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["solutionid",{"_index":351,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{},"injectables/TeacherResponsesService.html":{}}}],["solutions",{"_index":957,"title":{},"body":{"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{}}}],["solutions.controller",{"_index":993,"title":{},"body":{"modules/SolutionsModule.html":{}}}],["solutions.repository",{"_index":994,"title":{},"body":{"modules/SolutionsModule.html":{},"injectables/SolutionsService.html":{}}}],["solutions.service",{"_index":974,"title":{},"body":{"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{}}}],["solutions/solutions.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["solutionscontroller",{"_index":955,"title":{"controllers/SolutionsController.html":{}},"body":{"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"coverage.html":{}}}],["solutionsmodule",{"_index":46,"title":{"modules/SolutionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SolutionsModule.html":{},"index.html":{},"modules.html":{}}}],["solutionsrepository",{"_index":991,"title":{"injectables/SolutionsRepository.html":{}},"body":{"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"coverage.html":{},"index.html":{}}}],["solutionsservice",{"_index":973,"title":{"injectables/SolutionsService.html":{}},"body":{"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsService.html":{},"coverage.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"modules/HomeworksModule.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"modules/SolutionsModule.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["specific",{"_index":497,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":732,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["src/.../auth.service.ts",{"_index":1419,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../current",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../isafter.decorator.ts",{"_index":1399,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1398,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../match.decorator.ts",{"_index":1400,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":1393,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:10",{"_index":78,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/.env",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:52",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.module.ts:47",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/auth.service.ts:20",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:54",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:67",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/current",{"_index":603,"title":{},"body":{"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":1350,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":412,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":1351,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/jwt",{"_index":734,"title":{},"body":{"classes/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":784,"title":{},"body":{"classes/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/role.guard.ts",{"_index":883,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/role.guard.ts:15",{"_index":886,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/role.guard.ts:21",{"_index":887,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/roles/dto/create",{"_index":341,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["src/auth/roles/dto/find",{"_index":548,"title":{},"body":{"classes/FindRoleDto.html":{},"coverage.html":{}}}],["src/auth/roles/roles.controller.ts",{"_index":864,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/auth/roles/roles.controller.ts:26",{"_index":869,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/auth/roles/roles.enum",{"_index":414,"title":{},"body":{"controllers/EventsController.html":{},"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{}}}],["src/auth/roles/roles.enum.ts",{"_index":1394,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/roles/roles.module.ts",{"_index":899,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/auth/roles/roles.repository.ts",{"_index":903,"title":{},"body":{"injectables/RolesRepository.html":{},"coverage.html":{}}}],["src/auth/roles/roles.repository.ts:11",{"_index":907,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["src/auth/roles/roles.repository.ts:22",{"_index":909,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["src/auth/roles/roles.repository.ts:41",{"_index":916,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["src/auth/roles/roles.repository.ts:59",{"_index":913,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["src/auth/roles/roles.service.ts",{"_index":923,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/auth/roles/roles.service.ts:17",{"_index":928,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:26",{"_index":934,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:38",{"_index":932,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:50",{"_index":930,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/roles/roles.service.ts:74",{"_index":936,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":760,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:15",{"_index":764,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:36",{"_index":766,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":787,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:13",{"_index":790,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:25",{"_index":792,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/users/dto/find",{"_index":555,"title":{},"body":{"classes/FindUserDto.html":{},"coverage.html":{}}}],["src/auth/users/dto/login",{"_index":796,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/users/dto/register",{"_index":850,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/users/users.controller.ts",{"_index":1268,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/users/users.controller.ts:23",{"_index":1275,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/users/users.controller.ts:34",{"_index":1272,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/users/users.module.ts",{"_index":1289,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/users/users.repository.ts",{"_index":1292,"title":{},"body":{"injectables/UsersRepository.html":{},"coverage.html":{}}}],["src/auth/users/users.repository.ts:11",{"_index":1297,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/auth/users/users.repository.ts:20",{"_index":1299,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/auth/users/users.repository.ts:37",{"_index":1306,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/auth/users/users.repository.ts:53",{"_index":1304,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/auth/users/users.repository.ts:66",{"_index":1310,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/auth/users/users.repository.ts:82",{"_index":1301,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/auth/users/users.service.ts",{"_index":1318,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/auth/users/users.service.ts:18",{"_index":1320,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:27",{"_index":1325,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:37",{"_index":1323,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/users/users.service.ts:49",{"_index":1321,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/database/prisma.module",{"_index":434,"title":{},"body":{"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{}}}],["src/database/prisma.module.ts",{"_index":817,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/database/prisma.service",{"_index":477,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["src/database/prisma.service.ts",{"_index":822,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/database/prisma.service.ts:26",{"_index":841,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/database/prisma.service.ts:34",{"_index":834,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/database/prisma.service.ts:38",{"_index":832,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/decorators/isafter.decorator",{"_index":304,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{}}}],["src/decorators/isafter.decorator.ts",{"_index":696,"title":{},"body":{"classes/IsAfterConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/decorators/isafter.decorator.ts:38",{"_index":707,"title":{},"body":{"classes/IsAfterConstraint.html":{}}}],["src/decorators/isafter.decorator.ts:50",{"_index":704,"title":{},"body":{"classes/IsAfterConstraint.html":{}}}],["src/decorators/match.decorator",{"_index":862,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["src/decorators/match.decorator.ts",{"_index":801,"title":{},"body":{"classes/MatchConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/decorators/match.decorator.ts:36",{"_index":804,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["src/decorators/match.decorator.ts:41",{"_index":802,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["src/events/dto/create",{"_index":271,"title":{},"body":{"classes/CreateEventDto.html":{},"coverage.html":{}}}],["src/events/dto/find",{"_index":524,"title":{},"body":{"classes/FindEventDto.html":{},"coverage.html":{}}}],["src/events/dto/update",{"_index":1142,"title":{},"body":{"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["src/events/events.controller.ts",{"_index":372,"title":{},"body":{"controllers/EventsController.html":{},"coverage.html":{}}}],["src/events/events.controller.ts:35",{"_index":390,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:46",{"_index":383,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:58",{"_index":400,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:71",{"_index":387,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.module.ts",{"_index":431,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/events/events.repository.ts",{"_index":435,"title":{},"body":{"injectables/EventsRepository.html":{},"coverage.html":{}}}],["src/events/events.repository.ts:11",{"_index":440,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["src/events/events.repository.ts:20",{"_index":443,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["src/events/events.repository.ts:37",{"_index":462,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["src/events/events.repository.ts:53",{"_index":454,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["src/events/events.repository.ts:66",{"_index":474,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["src/events/events.repository.ts:82",{"_index":447,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["src/events/events.service.ts",{"_index":484,"title":{},"body":{"injectables/EventsService.html":{},"coverage.html":{}}}],["src/events/events.service.ts:109",{"_index":490,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:18",{"_index":488,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:27",{"_index":496,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:45",{"_index":492,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:63",{"_index":489,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:88",{"_index":501,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/homeworks/dto/create",{"_index":307,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"coverage.html":{}}}],["src/homeworks/dto/find",{"_index":540,"title":{},"body":{"classes/FindHomeworkDto.html":{},"coverage.html":{}}}],["src/homeworks/dto/update",{"_index":1147,"title":{},"body":{"classes/UpdateHomeworkDto.html":{},"coverage.html":{}}}],["src/homeworks/homeworks.controller.ts",{"_index":575,"title":{},"body":{"controllers/HomeworksController.html":{},"coverage.html":{}}}],["src/homeworks/homeworks.controller.ts:101",{"_index":582,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["src/homeworks/homeworks.controller.ts:39",{"_index":584,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["src/homeworks/homeworks.controller.ts:58",{"_index":594,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["src/homeworks/homeworks.controller.ts:81",{"_index":589,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["src/homeworks/homeworks.module.ts",{"_index":621,"title":{},"body":{"modules/HomeworksModule.html":{}}}],["src/homeworks/homeworks.repository.ts",{"_index":626,"title":{},"body":{"injectables/HomeworksRepository.html":{},"coverage.html":{}}}],["src/homeworks/homeworks.repository.ts:11",{"_index":630,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["src/homeworks/homeworks.repository.ts:20",{"_index":632,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["src/homeworks/homeworks.repository.ts:37",{"_index":638,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["src/homeworks/homeworks.repository.ts:56",{"_index":636,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["src/homeworks/homeworks.repository.ts:72",{"_index":643,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["src/homeworks/homeworks.repository.ts:86",{"_index":634,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["src/homeworks/homeworks.service.ts",{"_index":652,"title":{},"body":{"injectables/HomeworksService.html":{},"coverage.html":{}}}],["src/homeworks/homeworks.service.ts:123",{"_index":662,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["src/homeworks/homeworks.service.ts:179",{"_index":656,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["src/homeworks/homeworks.service.ts:19",{"_index":655,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["src/homeworks/homeworks.service.ts:31",{"_index":660,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["src/homeworks/homeworks.service.ts:55",{"_index":658,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["src/homeworks/homeworks.service.ts:80",{"_index":665,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["src/main.ts",{"_index":1368,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/solutions/dto/edit",{"_index":366,"title":{},"body":{"classes/EditSolutionDto.html":{},"coverage.html":{}}}],["src/solutions/dto/find",{"_index":550,"title":{},"body":{"classes/FindSolutionDto.html":{},"coverage.html":{}}}],["src/solutions/solutions.controller.ts",{"_index":956,"title":{},"body":{"controllers/SolutionsController.html":{},"coverage.html":{}}}],["src/solutions/solutions.controller.ts:100",{"_index":963,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["src/solutions/solutions.controller.ts:38",{"_index":965,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["src/solutions/solutions.controller.ts:57",{"_index":972,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["src/solutions/solutions.controller.ts:80",{"_index":969,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["src/solutions/solutions.module.ts",{"_index":992,"title":{},"body":{"modules/SolutionsModule.html":{}}}],["src/solutions/solutions.repository.ts",{"_index":995,"title":{},"body":{"injectables/SolutionsRepository.html":{},"coverage.html":{}}}],["src/solutions/solutions.repository.ts:11",{"_index":999,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["src/solutions/solutions.repository.ts:20",{"_index":1001,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["src/solutions/solutions.repository.ts:37",{"_index":1007,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["src/solutions/solutions.repository.ts:56",{"_index":1005,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["src/solutions/solutions.repository.ts:74",{"_index":1012,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["src/solutions/solutions.repository.ts:88",{"_index":1003,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["src/solutions/solutions.service.ts",{"_index":1019,"title":{},"body":{"injectables/SolutionsService.html":{},"coverage.html":{}}}],["src/solutions/solutions.service.ts:112",{"_index":1028,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["src/solutions/solutions.service.ts:166",{"_index":1023,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["src/solutions/solutions.service.ts:183",{"_index":1031,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["src/solutions/solutions.service.ts:19",{"_index":1022,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["src/solutions/solutions.service.ts:31",{"_index":1027,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["src/solutions/solutions.service.ts:48",{"_index":1025,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["src/solutions/solutions.service.ts:67",{"_index":1030,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["src/teacher",{"_index":346,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"coverage.html":{}}}],["src/upload/.env",{"_index":1174,"title":{},"body":{"modules/UploadModule.html":{}}}],["src/upload/dto/find",{"_index":534,"title":{},"body":{"classes/FindFileDto.html":{},"coverage.html":{}}}],["src/upload/upload.controller.ts",{"_index":1150,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{}}}],["src/upload/upload.controller.ts:22",{"_index":1156,"title":{},"body":{"controllers/UploadController.html":{}}}],["src/upload/upload.module",{"_index":625,"title":{},"body":{"modules/HomeworksModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{}}}],["src/upload/upload.module.ts",{"_index":1170,"title":{},"body":{"modules/UploadModule.html":{}}}],["src/upload/upload.repository.ts",{"_index":1175,"title":{},"body":{"injectables/UploadRepository.html":{},"coverage.html":{}}}],["src/upload/upload.repository.ts:11",{"_index":1181,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["src/upload/upload.repository.ts:20",{"_index":1183,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["src/upload/upload.repository.ts:37",{"_index":1193,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["src/upload/upload.repository.ts:59",{"_index":1189,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["src/upload/upload.repository.ts:78",{"_index":1195,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["src/upload/upload.repository.ts:94",{"_index":1186,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["src/upload/upload.service",{"_index":666,"title":{},"body":{"injectables/HomeworksService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{}}}],["src/upload/upload.service.ts",{"_index":1202,"title":{},"body":{"injectables/UploadService.html":{},"coverage.html":{}}}],["src/upload/upload.service.ts:109",{"_index":1207,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:18",{"_index":1205,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:30",{"_index":1213,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:40",{"_index":1209,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:54",{"_index":1215,"title":{},"body":{"injectables/UploadService.html":{}}}],["start",{"_index":294,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{}}}],["starttime",{"_index":278,"title":{},"body":{"classes/CreateEventDto.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{}}}],["statements",{"_index":1338,"title":{},"body":{"coverage.html":{}}}],["strategies/jwt.strategy",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":777,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"classes/RegisterUserDto.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["successful",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":754,"title":{},"body":{"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":759,"title":{},"body":{"classes/JwtAuthGuard.html":{}}}],["support",{"_index":1410,"title":{},"body":{"modules.html":{}}}],["supportedfiletypes",{"_index":312,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/FindHomeworkDto.html":{},"injectables/HomeworksService.html":{}}}],["supportedfiletypes.join",{"_index":676,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["supportedfiletypes?.join",{"_index":690,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["surname",{"_index":559,"title":{},"body":{"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["svg",{"_index":1411,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["table",{"_index":1371,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1370,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":466,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["target",{"_index":721,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"injectables/UploadService.html":{}}}],["targetdir",{"_index":1035,"title":{},"body":{"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{}}}],["targetlocation",{"_index":1235,"title":{},"body":{"injectables/UploadService.html":{}}}],["targetroleids",{"_index":949,"title":{},"body":{"injectables/RolesService.html":{}}}],["targetroleids.includes(userroleid",{"_index":954,"title":{},"body":{"injectables/RolesService.html":{}}}],["targetrolenames",{"_index":938,"title":{},"body":{"injectables/RolesService.html":{}}}],["targetrolenames.includes(role.title",{"_index":951,"title":{},"body":{"injectables/RolesService.html":{}}}],["task",{"_index":363,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{}}}],["teacher",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateHomeworkDto.html":{},"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{},"injectables/HomeworksService.html":{},"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesService.html":{},"miscellaneous/enumerations.html":{}}}],["teacherid",{"_index":352,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"injectables/TeacherResponsesService.html":{}}}],["teacherresponse",{"_index":1050,"title":{},"body":{"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{}}}],["teacherresponsescontroller",{"_index":1047,"title":{"controllers/TeacherResponsesController.html":{}},"body":{"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"coverage.html":{}}}],["teacherresponsesmodule",{"_index":47,"title":{"modules/TeacherResponsesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TeacherResponsesModule.html":{},"index.html":{},"modules.html":{}}}],["teacherresponsesrepository",{"_index":1078,"title":{"injectables/TeacherResponsesRepository.html":{}},"body":{"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"coverage.html":{},"index.html":{}}}],["teacherresponsesservice",{"_index":1065,"title":{"injectables/TeacherResponsesService.html":{}},"body":{"controllers/TeacherResponsesController.html":{},"modules/TeacherResponsesModule.html":{},"injectables/TeacherResponsesService.html":{},"coverage.html":{},"index.html":{}}}],["text",{"_index":353,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{},"injectables/TeacherResponsesService.html":{}}}],["this.$connect",{"_index":844,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":845,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":846,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.loginuser(user",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logoutuser(response",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser",{"_index":795,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('jwt_expiration",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('upload_location",{"_index":1236,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.eventsrepository.createevent",{"_index":516,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsrepository.deleteevent",{"_index":523,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsrepository.findevent",{"_index":510,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsrepository.findevents",{"_index":506,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsrepository.updateevent",{"_index":521,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsservice.createevent(createeventdto",{"_index":421,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.deleteevent(id",{"_index":425,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.getevents(props",{"_index":419,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.updateevent(id",{"_index":423,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.finduser",{"_index":1329,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getrole",{"_index":944,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.gettargetdir(teacherid",{"_index":1125,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["this.gettargetdir(userid",{"_index":1036,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["this.homeworksrepository.createhomework",{"_index":673,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["this.homeworksrepository.deletehomework",{"_index":694,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["this.homeworksrepository.findhomework",{"_index":670,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["this.homeworksrepository.findhomeworks",{"_index":667,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["this.homeworksrepository.updatehomework",{"_index":686,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["this.homeworksservice.deletehomework(id",{"_index":616,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["this.homeworksservice.findhomeworks(props",{"_index":606,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["this.homeworksservice.updatehomework",{"_index":614,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["this.homeworksservice.uploadhomework",{"_index":612,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["this.jwtservice.signasync",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.create",{"_index":1313,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.prisma.user.delete",{"_index":1317,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.prisma.user.findfirst",{"_index":1315,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.prisma.user.findmany",{"_index":1314,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.prisma.user.update",{"_index":1316,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.prisma.userrole.create",{"_index":919,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["this.prisma.userrole.findfirst",{"_index":921,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["this.prisma.userrole.findmany",{"_index":920,"title":{},"body":{"injectables/RolesRepository.html":{}}}],["this.prismaservice.event.create",{"_index":479,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["this.prismaservice.event.delete",{"_index":483,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["this.prismaservice.event.findmany",{"_index":480,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["this.prismaservice.event.update",{"_index":482,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["this.prismaservice.file.create",{"_index":1198,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["this.prismaservice.file.delete",{"_index":1201,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["this.prismaservice.file.findmany",{"_index":1199,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["this.prismaservice.file.update",{"_index":1200,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["this.prismaservice.homework.create",{"_index":646,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["this.prismaservice.homework.delete",{"_index":651,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["this.prismaservice.homework.findfirst",{"_index":649,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["this.prismaservice.homework.findmany",{"_index":647,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["this.prismaservice.homework.update",{"_index":650,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["this.prismaservice.solution.create",{"_index":1015,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["this.prismaservice.solution.delete",{"_index":1018,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["this.prismaservice.solution.findmany",{"_index":1016,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["this.prismaservice.solution.update",{"_index":1017,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["this.prismaservice.teacherresponse.create",{"_index":1104,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["this.prismaservice.teacherresponse.delete",{"_index":1107,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["this.prismaservice.teacherresponse.findmany",{"_index":1105,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["this.prismaservice.teacherresponse.update",{"_index":1106,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["this.reflector.getallandoverride(access_roles_key",{"_index":890,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":756,"title":{},"body":{"classes/JwtAuthGuard.html":{}}}],["this.rolesrepository.createrole",{"_index":947,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findrole",{"_index":943,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findroles",{"_index":942,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.createrole",{"_index":879,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.isuserbelong(roles",{"_index":892,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.solutionsrepository.createsolution",{"_index":1037,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["this.solutionsrepository.deletesolution",{"_index":1045,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["this.solutionsrepository.findsolution",{"_index":1034,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["this.solutionsrepository.findsolutions",{"_index":1033,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["this.solutionsrepository.updatesolution",{"_index":1043,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["this.solutionsservice.deletesolution(id",{"_index":987,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["this.solutionsservice.findsolutions(props)).map",{"_index":981,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["this.solutionsservice.updatesolution",{"_index":985,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["this.solutionsservice.uploadsolution",{"_index":984,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["this.teacherresponsesrepository.createteacherresponse",{"_index":1132,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["this.teacherresponsesrepository.deleteteacherresponse",{"_index":1140,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["this.teacherresponsesrepository.findteacherresponse",{"_index":1124,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["this.teacherresponsesrepository.findteacherresponses",{"_index":1123,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["this.teacherresponsesrepository.updateteacherresponse",{"_index":1138,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["this.teacherresponsesservice.deleteresponse(id",{"_index":1074,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["this.teacherresponsesservice.findresponses(props)).map",{"_index":1069,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["this.teacherresponsesservice.updatereponse(id",{"_index":1072,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["this.teacherresponsesservice.uploadresponse(responsedto",{"_index":1071,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["this.uploadrepository.createfile",{"_index":1253,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.uploadrepository.deletefile",{"_index":1266,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.uploadrepository.findfile",{"_index":1230,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.uploadrepository.findfiles",{"_index":1229,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.uploadrepository.updatefile",{"_index":1258,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.uploadservice.delete(file.id",{"_index":679,"title":{},"body":{"injectables/HomeworksService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{}}}],["this.uploadservice.delete(image.id",{"_index":685,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["this.uploadservice.download(fileid.replace",{"_index":1164,"title":{},"body":{"controllers/UploadController.html":{}}}],["this.uploadservice.upload",{"_index":1126,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["this.uploadservice.upload(userid",{"_index":672,"title":{},"body":{"injectables/HomeworksService.html":{},"injectables/SolutionsService.html":{}}}],["this.usersrepository.createuser",{"_index":1335,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findusers",{"_index":1328,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(registeruserdto",{"_index":1283,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduser",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.usersservice.findusers(userdto",{"_index":1281,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":511,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":285,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{}}}],["title",{"_index":279,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/FindEventDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindRoleDto.html":{},"injectables/HomeworksService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["todo",{"_index":1127,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["token",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["tokenpayload",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["tokens",{"_index":761,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["transform",{"_index":333,"title":{},"body":{"classes/CreateHomeworkDto.html":{}}}],["transformer",{"_index":334,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/EditResponseDto.html":{},"classes/FindResponseDto.html":{},"dependencies.html":{}}}],["transmitted",{"_index":793,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["trigger",{"_index":1129,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["true",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateHomeworkDto.html":{},"classes/FindHomeworkDto.html":{},"injectables/HomeworksRepository.html":{},"classes/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":515,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["turned",{"_index":837,"title":{},"body":{"injectables/PrismaService.html":{}}}],["type",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"classes/IsAfterConstraint.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1417,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":1146,"title":{},"body":{"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception",{"_index":774,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["unique",{"_index":288,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{}}}],["uniquely",{"_index":450,"title":{},"body":{"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/JwtStrategy.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["unknown",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1416,"title":{},"body":{"properties.html":{}}}],["unprocessableentityexception",{"_index":1218,"title":{},"body":{"injectables/UploadService.html":{}}}],["unused",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":331,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/FindHomeworkDto.html":{}}}],["update",{"_index":401,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["updated",{"_index":403,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["updatedto",{"_index":500,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateevent",{"_index":381,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{}}}],["updateevent(id",{"_index":397,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["updateevent(params",{"_index":473,"title":{},"body":{"injectables/EventsRepository.html":{}}}],["updateeventdto",{"_index":398,"title":{"classes/UpdateEventDto.html":{}},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDto.html":{},"coverage.html":{}}}],["updatefile",{"_index":1180,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["updatefile(params",{"_index":1194,"title":{},"body":{"injectables/UploadRepository.html":{}}}],["updatehomework",{"_index":579,"title":{},"body":{"controllers/HomeworksController.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{}}}],["updatehomework(id",{"_index":661,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["updatehomework(params",{"_index":642,"title":{},"body":{"injectables/HomeworksRepository.html":{}}}],["updatehomework(user",{"_index":585,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["updatehomeworkdto",{"_index":586,"title":{"classes/UpdateHomeworkDto.html":{}},"body":{"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"classes/UpdateHomeworkDto.html":{},"coverage.html":{}}}],["updatereponse",{"_index":1111,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["updatereponse(id",{"_index":1119,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["updateresponse",{"_index":1053,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["updateresponse(id",{"_index":1060,"title":{},"body":{"controllers/TeacherResponsesController.html":{}}}],["updates",{"_index":590,"title":{},"body":{"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{}}}],["updatesolution",{"_index":960,"title":{},"body":{"controllers/SolutionsController.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{}}}],["updatesolution(id",{"_index":966,"title":{},"body":{"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{}}}],["updatesolution(params",{"_index":1011,"title":{},"body":{"injectables/SolutionsRepository.html":{}}}],["updateteacherresponse",{"_index":1087,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["updateteacherresponse(params",{"_index":1101,"title":{},"body":{"injectables/TeacherResponsesRepository.html":{}}}],["updateuser",{"_index":1296,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["updateuser(params",{"_index":1309,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["updating",{"_index":349,"title":{},"body":{"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"injectables/EventsRepository.html":{},"injectables/EventsService.html":{},"injectables/HomeworksRepository.html":{},"injectables/HomeworksService.html":{},"injectables/SolutionsRepository.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/TeacherResponsesService.html":{},"classes/UpdateEventDto.html":{},"classes/UpdateHomeworkDto.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["upload",{"_index":1204,"title":{},"body":{"injectables/UploadService.html":{}}}],["upload(ownerid",{"_index":1214,"title":{},"body":{"injectables/UploadService.html":{}}}],["upload.controller",{"_index":1171,"title":{},"body":{"modules/UploadModule.html":{}}}],["upload.repository",{"_index":1172,"title":{},"body":{"modules/UploadModule.html":{},"injectables/UploadService.html":{}}}],["upload.service",{"_index":1161,"title":{},"body":{"controllers/UploadController.html":{},"modules/UploadModule.html":{}}}],["upload/upload.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["upload_location",{"_index":1173,"title":{},"body":{"modules/UploadModule.html":{}}}],["uploadcontroller",{"_index":1149,"title":{"controllers/UploadController.html":{}},"body":{"controllers/UploadController.html":{},"modules/UploadModule.html":{},"coverage.html":{}}}],["uploaded",{"_index":1184,"title":{},"body":{"injectables/UploadRepository.html":{},"injectables/UploadService.html":{}}}],["uploadedfile",{"_index":1160,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploadedfiles",{"_index":596,"title":{},"body":{"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{}}}],["uploadedfiles.map((file",{"_index":1135,"title":{},"body":{"injectables/TeacherResponsesService.html":{}}}],["uploadedfiles.map((image",{"_index":1039,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["uploadedfiles.map(async",{"_index":1040,"title":{},"body":{"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{}}}],["uploadedimages",{"_index":671,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["uploadedimages.map((image",{"_index":674,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["uploadedimages.map(async",{"_index":678,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["uploadhomework",{"_index":580,"title":{},"body":{"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{}}}],["uploadhomework(user",{"_index":592,"title":{},"body":{"controllers/HomeworksController.html":{}}}],["uploadhomework(userid",{"_index":664,"title":{},"body":{"injectables/HomeworksService.html":{}}}],["uploading",{"_index":663,"title":{},"body":{"injectables/HomeworksService.html":{},"injectables/SolutionsService.html":{},"injectables/UploadService.html":{}}}],["uploadmodule",{"_index":48,"title":{"modules/UploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeworksModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"index.html":{},"modules.html":{}}}],["uploadrepository",{"_index":1169,"title":{"injectables/UploadRepository.html":{}},"body":{"modules/UploadModule.html":{},"injectables/UploadRepository.html":{},"injectables/UploadService.html":{},"coverage.html":{},"index.html":{}}}],["uploadresponse",{"_index":1054,"title":{},"body":{"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{}}}],["uploadresponse(responsedto",{"_index":1063,"title":{},"body":{"controllers/TeacherResponsesController.html":{},"injectables/TeacherResponsesService.html":{}}}],["uploads",{"_index":595,"title":{},"body":{"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{}}}],["uploadservice",{"_index":654,"title":{"injectables/UploadService.html":{}},"body":{"injectables/HomeworksService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"coverage.html":{},"index.html":{}}}],["uploadsolution",{"_index":961,"title":{},"body":{"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{}}}],["uploadsolution(user",{"_index":970,"title":{},"body":{"controllers/SolutionsController.html":{}}}],["uploadsolution(userid",{"_index":1029,"title":{},"body":{"injectables/SolutionsService.html":{}}}],["url",{"_index":280,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/FindEventDto.html":{},"injectables/UploadService.html":{}}}],["useclass",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["usefactory",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@get('/validate",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(rolesguard",{"_index":877,"title":{},"body":{"controllers/RolesController.html":{}}}],["useguards(rolesguard)@roles(roles.admin)@post",{"_index":868,"title":{},"body":{"controllers/RolesController.html":{}}}],["useinterceptors",{"_index":597,"title":{},"body":{"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{}}}],["useinterceptors(filesinterceptor('files",{"_index":611,"title":{},"body":{"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{}}}],["useinterceptors(undefined)@post",{"_index":971,"title":{},"body":{"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{}}}],["useinterceptors(undefined)@put",{"_index":968,"title":{},"body":{"controllers/SolutionsController.html":{},"controllers/TeacherResponsesController.html":{}}}],["user",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateHomeworkDto.html":{},"injectables/EventsService.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"controllers/HomeworksController.html":{},"injectables/HomeworksService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/SolutionsController.html":{},"injectables/SolutionsService.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"classes/FindUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.decorator",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{}}}],["user.decorator.ts",{"_index":1345,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":556,"title":{},"body":{"classes/FindUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":797,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:16",{"_index":565,"title":{},"body":{"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.dto.ts:22",{"_index":799,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:23",{"_index":858,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:25",{"_index":563,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:31",{"_index":855,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:34",{"_index":561,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:39",{"_index":853,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:43",{"_index":566,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:47",{"_index":857,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:52",{"_index":570,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:55",{"_index":860,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:61",{"_index":568,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:64",{"_index":859,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:70",{"_index":572,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:72",{"_index":861,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.id",{"_index":613,"title":{},"body":{"controllers/HomeworksController.html":{},"controllers/SolutionsController.html":{}}}],["user.password",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.userroleid",{"_index":893,"title":{},"body":{"guards/RolesGuard.html":{}}}],["userdto",{"_index":1276,"title":{},"body":{"controllers/UsersController.html":{}}}],["userid",{"_index":536,"title":{},"body":{"classes/FindFileDto.html":{},"injectables/HomeworksService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{}}}],["username",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{}}}],["usernamefield",{"_index":794,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrole",{"_index":865,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesRepository.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["userroleid",{"_index":560,"title":{},"body":{"classes/FindUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RolesRepository.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":1290,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.repository",{"_index":1291,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":1277,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/login",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/users.service",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":1267,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":159,"title":{"modules/UsersModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersrepository",{"_index":1288,"title":{"injectables/UsersRepository.html":{}},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["usersservice",{"_index":212,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["using",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{}}}],["uuid",{"_index":1244,"title":{},"body":{"injectables/UploadService.html":{}}}],["uuid}${extension",{"_index":1246,"title":{},"body":{"injectables/UploadService.html":{}}}],["validate",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"classes/IsAfterConstraint.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MatchConstraint.html":{}}}],["validate(@currentuser",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["validate(email",{"_index":791,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":765,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(user",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["validate(value",{"_index":706,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["validateuser",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(undefined",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["validationarguments",{"_index":703,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["validationarguments.constraints",{"_index":726,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["validationarguments.object",{"_index":728,"title":{},"body":{"classes/IsAfterConstraint.html":{}}}],["validationarguments.property",{"_index":812,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["validationoptions",{"_index":710,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["validationschema",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"modules/UploadModule.html":{}}}],["validator",{"_index":302,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateHomeworkDto.html":{},"classes/CreateRoleDto.html":{},"classes/EditResponseDto.html":{},"classes/EditSolutionDto.html":{},"classes/FindEventDto.html":{},"classes/FindFileDto.html":{},"classes/FindHomeworkDto.html":{},"classes/FindResponseDto.html":{},"classes/FindRoleDto.html":{},"classes/FindSolutionDto.html":{},"classes/FindUserDto.html":{},"classes/IsAfterConstraint.html":{},"classes/LoginUserDto.html":{},"classes/MatchConstraint.html":{},"classes/RegisterUserDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":711,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["validatorconstraintinterface",{"_index":700,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{}}}],["value",{"_index":708,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":499,"title":{},"body":{"injectables/EventsService.html":{},"injectables/HomeworksService.html":{},"classes/MatchConstraint.html":{},"injectables/RolesService.html":{},"injectables/SolutionsService.html":{},"injectables/TeacherResponsesService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["variable",{"_index":1346,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1420,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["verification",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["verify",{"_index":713,"title":{},"body":{"classes/IsAfterConstraint.html":{},"miscellaneous/functions.html":{}}}],["verifying",{"_index":767,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["version",{"_index":1413,"title":{},"body":{"properties.html":{}}}],["void",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{}}}],["well",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EventsRepository.html":{},"injectables/HomeworksRepository.html":{},"injectables/RolesRepository.html":{},"injectables/SolutionsRepository.html":{},"injectables/TeacherResponsesRepository.html":{},"injectables/UploadRepository.html":{},"injectables/UsersRepository.html":{}}}],["whether",{"_index":937,"title":{},"body":{"injectables/RolesService.html":{}}}],["whose",{"_index":806,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["work",{"_index":317,"title":{},"body":{"classes/CreateHomeworkDto.html":{},"classes/FindHomeworkDto.html":{}}}],["world",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["writefile",{"_index":1227,"title":{},"body":{"injectables/UploadService.html":{}}}],["writefile(fileabsolute",{"_index":1251,"title":{},"body":{"injectables/UploadService.html":{}}}],["yes",{"_index":705,"title":{},"body":{"classes/IsAfterConstraint.html":{},"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules/HomeworksModule.html":{},"modules/PrismaModule.html":{},"modules/RolesModule.html":{},"modules/SolutionsModule.html":{},"modules/TeacherResponsesModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                A common controller for the entire application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * A common controller for the entire application\n * @export\n * @class AppController\n */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): void {\n    this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nHomeworksModule\n\nHomeworksModule\n\nAppModule -->\n\nHomeworksModule->AppModule\n\n\n\n\n\nSolutionsModule\n\nSolutionsModule\n\nAppModule -->\n\nSolutionsModule->AppModule\n\n\n\n\n\nTeacherResponsesModule\n\nTeacherResponsesModule\n\nAppModule -->\n\nTeacherResponsesModule->AppModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            A module containing settings common to the entire application\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            HomeworksModule\n                        \n                        \n                            SolutionsModule\n                        \n                        \n                            TeacherResponsesModule\n                        \n                        \n                            UploadModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { UploadModule } from './upload/upload.module';\nimport { EventsModule } from './events/events.module';\nimport JwtAuthGuard from './auth/guards/jwt-auth.guard';\nimport { RolesGuard } from './auth/guards/role.guard';\nimport { HomeworksModule } from './homeworks/homeworks.module';\nimport { SolutionsModule } from './solutions/solutions.module';\nimport { TeacherResponsesModule } from './teacher-responses/teacher-responses.module';\n\n/**\n * A module containing settings common to the entire application\n * @export\n * @class AppModule\n */\n@Module({\n  imports: [\n    AuthModule,\n    UploadModule,\n    EventsModule,\n    HomeworksModule,\n    SolutionsModule,\n    TeacherResponsesModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A set of methods common to the entire application\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * A set of methods common to the entire application\n * @export\n * @class AppService\n */\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                The controller is used to authenticate users, as well as to deprive them of access to the server\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: User, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Handler of the user authentication request using his username and password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the current user in the system\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the server's response to the request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        The handler of the user's logout request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('/validate')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:52\n                        \n                    \n\n\n            \n                \n                        Validation of a user who is in the context\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the user from the context\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UseGuards, Res, Get } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { Response } from 'express';\nimport JwtAuthGuard from './guards/jwt-auth.guard';\nimport { CurrentUser } from './decorators/current-user.decorator';\nimport { User } from '@prisma/client';\nimport { Public } from './decorators/public.decorator';\n\n/**\n * The controller is used to authenticate users, as well as to deprive them of access to the server\n * @export\n * @class AuthController\n */\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Handler of the user authentication request using his username and password\n   * @param {User} user the current user in the system\n   * @param {Response} response the server's response to the request\n   * @memberof AuthController\n   */\n  @Public()\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  async login(\n    @CurrentUser() user: User,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    return this.authService.loginUser(user, response);\n  }\n\n  /**\n   * The handler of the user's logout request\n   * @param {Response} response\n   * @memberof AuthController\n   */\n  @Post('logout')\n  async logout(@Res({ passthrough: true }) response: Response) {\n    return this.authService.logoutUser(response);\n  }\n\n  /**\n   * Validation of a user who is in the context\n   * @param {User} user the user from the context\n   * @memberof AuthController\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('/validate')\n  async validate(@CurrentUser() user: User) {\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            A module for user authentication and authorization\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.module.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport * as Joi from 'joi';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from './users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { RolesModule } from './roles/roles.module';\nimport * as cookieParser from 'cookie-parser';\n\n/**\n * A module for user authentication and authorization\n * @export\n * @class AuthModule\n */\n@Module({\n  exports: [AuthService],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  imports: [\n    UsersModule,\n    PassportModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      validationSchema: Joi.object({\n        JWT_SECRET: Joi.string().required(),\n        JWT_EXPIRATION: Joi.number().required(),\n      }),\n      envFilePath: 'src/auth/.env',\n    }),\n    JwtModule.registerAsync({\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: +configService.get('JWT_EXPIRATION'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    RolesModule,\n  ],\n})\nexport class AuthModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(cookieParser()).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service layer for user authentication and authorization\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                logoutUser\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginUser(user: User, response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n                        A method for user authentication, validation, and authorization\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the current user in the system\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the server's response to the request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logoutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    logoutUser(response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:54\n                        \n                    \n\n\n            \n                \n                        A method for depriving the user of access to the system (removing the jwt token)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {Promise}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(undefined: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Validation of user authentication data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object with user information (in case of successful verification)\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from './users/users.service';\nimport { LoginUserDto } from './users/dto/login-user.dto';\nimport { User } from '@prisma/client';\nimport { compare } from 'bcrypt';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Response } from 'express';\n\nexport type TokenPayload = {\n  id: string;\n};\n\n/**\n * A service layer for user authentication and authorization\n * @export\n * @class UsersService\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private configService: ConfigService,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * A method for user authentication, validation, and authorization\n   * @param {User} user the current user in the system\n   * @param {Response} response the server's response to the request\n   * @memberof AuthService\n   */\n  async loginUser(user: User, response: Response) {\n    const { id } = user;\n\n    const expires = new Date();\n    expires.setSeconds(\n      expires.getSeconds() + this.configService.get('JWT_EXPIRATION'),\n    );\n    const token = await this.jwtService.signAsync({ id });\n\n    response.cookie('Authentication', token, {\n      httpOnly: true,\n      expires,\n    });\n  }\n\n  /**\n   * A method for depriving the user of access to the system (removing the jwt token)\n   * @param {Response} response\n   * @return {*}  {Promise}\n   * @memberof AuthService\n   */\n  async logoutUser(response: Response): Promise {\n    response.cookie('Authentication', '', {\n      httpOnly: true,\n      expires: new Date(),\n    });\n  }\n\n  /**\n   * Validation of user authentication data\n   * @param {LoginUserDto} user data required for authentication\n   * @return {Promise>} An object with user information (in case of successful verification)\n   * @memberof AuthService\n   */\n  async validateUser({ email, password }: LoginUserDto) {\n    const user = await this.usersService.findUser({ email });\n    const isPasswordsEqual = await compare(String(password), user.password);\n\n    if (user && isPasswordsEqual) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...rest } = user;\n      return rest;\n    }\n\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventDto.html":{"url":"classes/CreateEventDto.html","title":"class - CreateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dto/create-event.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object with parameters for creating a new event\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                endTime\n                            \n                            \n                                    \n                                organizer\n                            \n                            \n                                    \n                                startTime\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.dto.ts:25\n                        \n                    \n\n            \n                \n                    description of the new event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsAfter('startTime')@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.dto.ts:50\n                        \n                    \n\n            \n                \n                    date and time of the event completion\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        organizer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.dto.ts:33\n                        \n                    \n\n            \n                \n                    the unique identifier of the person who organizes the event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.dto.ts:41\n                        \n                    \n\n            \n                \n                    date and time of the event start\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.dto.ts:17\n                        \n                    \n\n            \n                \n                    the name of the new event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.dto.ts:58\n                        \n                    \n\n            \n                \n                    link to the meeting place\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsNotEmpty, IsString } from 'class-validator';\nimport { IsAfter } from 'src/decorators/isAfter.decorator';\n\n/**\n * An object with parameters for creating a new event\n * @export\n * @class CreateEventDto\n */\nexport class CreateEventDto {\n  /**\n   * the name of the new event\n   * @type {string}\n   * @memberof CreateEventDto\n   */\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  /**\n   * description of the new event\n   * @type {string}\n   * @memberof CreateEventDto\n   */\n  @IsString()\n  description: string;\n\n  /**\n   * the unique identifier of the person who organizes the event\n   * @type {string}\n   * @memberof CreateEventDto\n   */\n  @IsString()\n  organizer: string;\n\n  /**\n   * date and time of the event start\n   * @type {string}\n   * @memberof CreateEventDto\n   */\n  @IsDateString()\n  startTime: string;\n\n  /**\n   * date and time of the event completion\n   * @type {string}\n   * @memberof CreateEventDto\n   */\n  @IsAfter('startTime')\n  @IsDateString()\n  endTime: string;\n\n  /**\n   * link to the meeting place\n   * @type {string}\n   * @memberof CreateEventDto\n   */\n  @IsString()\n  url: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateHomeworkDto.html":{"url":"classes/CreateHomeworkDto.html","title":"class - CreateHomeworkDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateHomeworkDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/homeworks/dto/create-homework.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object with parameters for creating a new homework object\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deadline\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                maxFilesCount\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                supportedFileTypes\n                            \n                            \n                                    \n                                teacher\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deadline\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/homeworks/dto/create-homework.dto.ts:48\n                        \n                    \n\n            \n                \n                    deadline for completing homework\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/homeworks/dto/create-homework.dto.ts:32\n                        \n                    \n\n            \n                \n                    the content of the work (what needs to be done)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        maxFilesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Transform(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/homeworks/dto/create-homework.dto.ts:68\n                        \n                    \n\n            \n                \n                    the maximum number of files that can be sent as a response to homework\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        supportedFileTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/homeworks/dto/create-homework.dto.ts:57\n                        \n                    \n\n            \n                \n                    file extensions that can be sent as a response to homework\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        teacher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/homeworks/dto/create-homework.dto.ts:40\n                        \n                    \n\n            \n                \n                    the unique identifier of the user who made up the homework\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/homeworks/dto/create-homework.dto.ts:24\n                        \n                    \n\n            \n                \n                    the title of the new homework\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform } from 'class-transformer';\nimport {\n  IsString,\n  IsNotEmpty,\n  IsDateString,\n  IsOptional,\n  IsNumber,\n  Min,\n} from 'class-validator';\n\n/**\n * An object with parameters for creating a new homework object\n * @export\n * @class CreateHomeworkDto\n */\nexport class CreateHomeworkDto {\n  /**\n   * the title of the new homework\n   * @type {string}\n   * @memberof CreateHomeworkDto\n   */\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  /**\n   * the content of the work (what needs to be done)\n   * @type {string}\n   * @memberof CreateHomeworkDto\n   */\n  @IsString()\n  description: string;\n\n  /**\n   * the unique identifier of the user who made up the homework\n   * @type {string}\n   * @memberof CreateHomeworkDto\n   */\n  @IsString()\n  teacher: string;\n\n  /**\n   * deadline for completing homework\n   * @type {Date}\n   * @memberof CreateHomeworkDto\n   */\n  @IsDateString()\n  deadline: Date;\n\n  /**\n   * file extensions that can be sent as a response to homework\n   * @type {string[]}\n   * @memberof CreateHomeworkDto\n   */\n  @IsOptional()\n  @IsString({ each: true })\n  supportedFileTypes?: string[];\n\n  /**\n   * the maximum number of files that can be sent as a response to homework\n   * @type {number}\n   * @memberof CreateHomeworkDto\n   */\n  @IsOptional()\n  @Transform(() => Number)\n  @IsNumber()\n  @Min(0)\n  maxFilesCount?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/roles/dto/create-role.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                The object for creating an object of the Role class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/dto/create-role.dto.ts:16\n                        \n                    \n\n            \n                \n                    name of the new role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * The object for creating an object of the Role class\n * @export\n * @class CreateRoleDto\n */\nexport class CreateRoleDto {\n  /**\n   * name of the new role\n   * @type {string}\n   * @memberof CreateRoleDto\n   */\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditResponseDto.html":{"url":"classes/EditResponseDto.html","title":"class - EditResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teacher-responses/dto/edit-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object with parameters for creating and updating a new Response object\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                score\n                            \n                            \n                                    \n                                    \n                                    \n                                solutionId\n                            \n                            \n                                    \n                                    \n                                    \n                                teacherId\n                            \n                            \n                                    \n                                    \n                                    \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        score\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teacher-responses/dto/edit-response.dto.ts:55\n                        \n                    \n\n            \n                \n                    evaluation of the solution\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        solutionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teacher-responses/dto/edit-response.dto.ts:34\n                        \n                    \n\n            \n                \n                    the unique identifier of the solution that has been answered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        teacherId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teacher-responses/dto/edit-response.dto.ts:24\n                        \n                    \n\n            \n                \n                    the unique identifier of the teacher who provided the response to the task\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teacher-responses/dto/edit-response.dto.ts:44\n                        \n                    \n\n            \n                \n                    the content of the response to the solution\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Min,\n} from 'class-validator';\n\n/**\n * An object with parameters for creating and updating a new Response object\n * @export\n * @class EditResponseDto\n */\nexport class EditResponseDto {\n  /**\n   * the unique identifier of the teacher who provided the response to the task\n   * @type {string}\n   * @memberof EditResponseDto\n   */\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  teacherId: string;\n\n  /**\n   * the unique identifier of the solution that has been answered\n   * @type {string}\n   * @memberof EditResponseDto\n   */\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  solutionId: string;\n\n  /**\n   * the content of the response to the solution\n   * @type {string}\n   * @memberof EditResponseDto\n   */\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  text: string;\n\n  /**\n   * evaluation of the solution\n   * @type {number}\n   * @memberof EditResponseDto\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  score: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditSolutionDto.html":{"url":"classes/EditSolutionDto.html","title":"class - EditSolutionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditSolutionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/solutions/dto/edit-solution.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object with parameters for creating and updating a new Solution object\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                homeworkId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        homeworkId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/solutions/dto/edit-solution.dto.ts:16\n                        \n                    \n\n            \n                \n                    the unique identifier of the homework that the solution belongs to\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * An object with parameters for creating and updating a new Solution object\n * @export\n * @class EditSolutionDto\n */\nexport class EditSolutionDto {\n  /**\n   * the unique identifier of the homework that the solution belongs to\n   * @type {string}\n   * @memberof EditSolutionDto\n   */\n  @IsString()\n  @IsNotEmpty()\n  homeworkId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventsController.html":{"url":"controllers/EventsController.html","title":"controller - EventsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                events\n            \n\n\n            \n                Description\n            \n            \n                A controller for processing requests for manipulating objects of the Event class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createEvent\n                            \n                            \n                                    \n                                    Async\n                                deleteEvent\n                            \n                            \n                                    \n                                    Async\n                                findEvents\n                            \n                            \n                                    \n                                    Async\n                                updateEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEvent(createEventDto: CreateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:46\n                        \n                    \n\n\n            \n                \n                        Handler for the request to create a new object of the Event class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    a set of parameters required to create an object of the Event class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                information about the new Event class object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteEvent(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:71\n                        \n                    \n\n\n            \n                \n                        Handler for a request to delete an object of the Event class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique ID of the Event object to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEvents(props: FindEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Handler for the request to receive all events with certain parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    a set of parameters that the desired events should have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a list of objects of the Event class that match the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateEvent(id: string, updateEventDto: UpdateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Handler for an update request for an existing object of the Event class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique ID of the Event object to update\n\n                                            \n                                        \n                                        \n                                                updateEventDto\n                                            \n                                                            UpdateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    an object containing new information about the object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                information about the updated Event class object\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Delete,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport { EventsService } from './events.service';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { UpdateEventDto } from './dto/update-event.dto';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { FindEventDto } from './dto/find-event.dto';\nimport { ROLES } from 'src/auth/roles/roles.enum';\nimport { Event } from '@prisma/client';\n\n/**\n * A controller for processing requests for manipulating objects of the Event class\n * @export\n * @class EventsController\n */\n@Roles(ROLES.ADMIN, ROLES.TEACHER)\n@Controller('events')\nexport class EventsController {\n  constructor(private readonly eventsService: EventsService) {}\n\n  /**\n   * Handler for the request to receive all events with certain parameters\n   * @param {FindEventDto} props a set of parameters that the desired events should have\n   * @return {Promise} a list of objects of the Event class that match the request parameters\n   * @memberof EventsController\n   */\n  @Get()\n  async findEvents(@Body() props: FindEventDto): Promise {\n    return this.eventsService.getEvents(props);\n  }\n\n  /**\n   * Handler for the request to create a new object of the Event class\n   * @param {CreateEventDto} createEventDto a set of parameters required to create an object of the Event class\n   * @return {*} information about the new Event class object\n   * @memberof EventsController\n   */\n  @Post()\n  async createEvent(@Body() createEventDto: CreateEventDto) {\n    return this.eventsService.createEvent(createEventDto);\n  }\n\n  /**\n   * Handler for an update request for an existing object of the Event class\n   * @param {string} id the unique ID of the Event object to update\n   * @param {UpdateEventDto} updateEventDto an object containing new information about the object\n   * @return {*} information about the updated Event class object\n   * @memberof EventsController\n   */\n  @Put()\n  async updateEvent(\n    @Query('id') id: string,\n    @Body() updateEventDto: UpdateEventDto,\n  ): Promise {\n    return this.eventsService.updateEvent(id, updateEventDto);\n  }\n\n  /**\n   * Handler for a request to delete an object of the Event class\n   * @param {string} id the unique ID of the Event object to delete\n   * @memberof EventsController\n   */\n  @Delete()\n  async deleteEvent(@Query('id') id: string): Promise {\n    await this.eventsService.deleteEvent(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_imports\n\n\n\ncluster_EventsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nEventsModule\n\nEventsModule\n\nEventsModule -->\n\nPrismaModule->EventsModule\n\n\n\n\n\nEventsRepository\n\nEventsRepository\n\nEventsModule -->\n\nEventsRepository->EventsModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/events/events.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            A module for manipulating objects of the Event class\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventsRepository\n                        \n                        \n                            EventsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EventsService } from './events.service';\nimport { EventsController } from './events.controller';\nimport { EventsRepository } from './events.repository';\nimport { PrismaModule } from 'src/database/prisma.module';\n\n/**\n * A module for manipulating objects of the Event class\n * @export\n * @class EventsModule\n */\n@Module({\n  controllers: [EventsController],\n  providers: [EventsService, EventsRepository],\n  imports: [PrismaModule],\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventsRepository.html":{"url":"injectables/EventsRepository.html","title":"injectable - EventsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                A repository containing methods for manipulating objects of the Event class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEvent\n                            \n                            \n                                    Async\n                                deleteEvent\n                            \n                            \n                                    Async\n                                findEvent\n                            \n                            \n                                    Async\n                                findEvents\n                            \n                            \n                                    Async\n                                updateEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/events/events.repository.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEvent(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.repository.ts:20\n                        \n                    \n\n\n            \n                \n                        Creating a new object of the Event class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters of the new event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a new event that has been created\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteEvent(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.repository.ts:82\n                        \n                    \n\n\n            \n                \n                        Method for deleting an existing Event class object\n    where: Prisma.EventWhereUniqueInput;\n  }} params parameters that can be used to uniquely identify the event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters that can be used to uniquely identify the event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a deleted object of the Event class\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEvent(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.repository.ts:53\n                        \n                    \n\n\n            \n                \n                        Method for getting a single object of the Event class corresponding to the request parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters that the object you are looking for should have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the first object of the Event class that fits the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEvents(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.repository.ts:37\n                        \n                    \n\n\n            \n                \n                        A method for searching for all events that match the passed parameters\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.EventWhereUniqueInput;\n    where?: Prisma.EventWhereInput;\n    orderBy?: Prisma.EventOrderByWithRelationInput;\n  }} params the parameters of the desired events, as well as the request parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the desired events, as well as the request parameters\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                all events that fit the search\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateEvent(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.repository.ts:66\n                        \n                    \n\n\n            \n                \n                        Method for updating an existing Event class object\n    where: Prisma.EventWhereUniqueInput;\n    data: Prisma.EventUpdateInput;\n  }} params the parameters of the event to update, as well as new data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the event to update, as well as new data\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                updated Event class object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Event, Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/database/prisma.service';\n\n/**\n * A repository containing methods for manipulating objects of the Event class\n * @export\n * @class EventsRepository\n */\n@Injectable()\nexport class EventsRepository {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  /**\n   * Creating a new object of the Event class\n   * @param {{ data: Prisma.EventCreateInput }} params  parameters of the new event\n   * @return {Promise} a new event that has been created\n   * @memberof EventsRepository\n   */\n  async createEvent(params: { data: Prisma.EventCreateInput }): Promise {\n    const { data } = params;\n    return this.prismaService.event.create({ data });\n  }\n\n  /**\n   * A method for searching for all events that match the passed parameters\n   * @param {{\n   *     skip?: number;\n   *     take?: number;\n   *     cursor?: Prisma.EventWhereUniqueInput;\n   *     where?: Prisma.EventWhereInput;\n   *     orderBy?: Prisma.EventOrderByWithRelationInput;\n   *   }} params the parameters of the desired events, as well as the request parameters\n   * @return {Promise} all events that fit the search\n   * @memberof EventsRepository\n   */\n  async findEvents(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.EventWhereUniqueInput;\n    where?: Prisma.EventWhereInput;\n    orderBy?: Prisma.EventOrderByWithRelationInput;\n  }): Promise {\n    return this.prismaService.event.findMany({ ...params });\n  }\n\n  /**\n   * Method for getting a single object of the Event class corresponding to the request parameters\n   * @param {{ where?: Prisma.EventWhereInput }} params the parameters that the object you are looking for should have\n   * @return {Promise} the first object of the Event class that fits the request parameters\n   * @memberof EventsRepository\n   */\n  async findEvent(params: { where?: Prisma.EventWhereInput }): Promise {\n    return (await this.prismaService.event.findMany({ ...params })).at(0);\n  }\n\n  /**\n   * Method for updating an existing Event class object\n   * @param {{\n   *     where: Prisma.EventWhereUniqueInput;\n   *     data: Prisma.EventUpdateInput;\n   *   }} params the parameters of the event to update, as well as new data\n   * @return {Promise} updated Event class object\n   * @memberof EventsRepository\n   */\n  async updateEvent(params: {\n    where: Prisma.EventWhereUniqueInput;\n    data: Prisma.EventUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prismaService.event.update({ where, data });\n  }\n\n  /**\n   * Method for deleting an existing Event class object\n   * @param {{\n   *     where: Prisma.EventWhereUniqueInput;\n   *   }} params parameters that can be used to uniquely identify the event\n   * @return {Promise} a deleted object of the Event class\n   * @memberof EventsRepository\n   */\n  async deleteEvent(params: {\n    where: Prisma.EventWhereUniqueInput;\n  }): Promise {\n    const { where } = params;\n    return this.prismaService.event.delete({ where });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventsService.html":{"url":"injectables/EventsService.html","title":"injectable - EventsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service layer for manipulating objects of the Event class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEvent\n                            \n                            \n                                    Async\n                                deleteEvent\n                            \n                            \n                                    Async\n                                getEvent\n                            \n                            \n                                    Async\n                                getEvents\n                            \n                            \n                                    Async\n                                updateEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventsRepository: EventsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/events/events.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventsRepository\n                                                  \n                                                        \n                                                                        EventsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEvent(createEventDto: CreateEventDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Creating a new object of the Event class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createEventDto\n                                            \n                                                            CreateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    object containing information about the new user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a new object of the User class\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteEvent(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Deleting an existing object of the Event class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique ID of the Event object to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    getEvent(props: FindEventDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Getting a single object of the Event class that has the necessary parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters that the desired object of the Event class must have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the first object of the Event class that corresponds to the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    getEvents(props: FindEventDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Getting all objects of the Event class that have specific parameter values\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the desired data of the Event object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                all Event objects matching the query\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateEvent(id: string, updateDto: UpdateEventDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Updating an existing Event class object\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique identifier of the Event class object to update\n\n                                            \n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateEventDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    new object parameters that need to be applied\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                updated object of the Event class\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { UpdateEventDto } from './dto/update-event.dto';\nimport { FindEventDto } from './dto/find-event.dto';\nimport { EventsRepository } from './events.repository';\nimport { Event } from '@prisma/client';\n\n/**\n * A service layer for manipulating objects of the Event class\n * @export\n * @class EventsService\n */\n@Injectable()\nexport class EventsService {\n  constructor(private readonly eventsRepository: EventsRepository) {}\n\n  /**\n   * Getting all objects of the Event class that have specific parameter values\n   * @param {FindEventDto} props the desired data of the Event object\n   * @return {Promise} all Event objects matching the query\n   * @memberof EventsService\n   */\n  async getEvents(props: FindEventDto): Promise {\n    return this.eventsRepository.findEvents({\n      where: {\n        ...props,\n        organizer: { id: props.organizer },\n        description: {\n          contains: props.description,\n        },\n      },\n    });\n  }\n\n  /**\n   * Getting a single object of the Event class that has the necessary parameters\n   * @param {FindEventDto} props parameters that the desired object of the Event class must have\n   * @return {Promise} the first object of the Event class that corresponds to the request parameters\n   * @memberof EventsService\n   */\n  async getEvent(props: FindEventDto): Promise {\n    return await this.eventsRepository.findEvent({\n      where: {\n        ...props,\n        organizer: { id: props.organizer },\n        description: {\n          contains: props.description,\n        },\n      },\n    });\n  }\n\n  /**\n   * Creating a new object of the Event class\n   * @param {CreateEventDto} createEventDto object containing information about the new user\n   * @return {Promise} a new object of the User class\n   * @memberof EventsService\n   */\n  async createEvent(createEventDto: CreateEventDto): Promise {\n    const { startTime, endTime, organizer } = createEventDto;\n    if (startTime > endTime) {\n      throw new BadRequestException(\n        'The start and end dates of the event are set incorrectly',\n      );\n    }\n\n    try {\n      return await this.eventsRepository.createEvent({\n        data: { ...createEventDto, organizer: { connect: { id: organizer } } },\n      });\n    } catch (error) {\n      console.error(error);\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Updating an existing Event class object\n   * @param {string} id the unique identifier of the Event class object to update\n   * @param {UpdateEventDto} updateDto new object parameters that need to be applied\n   * @return {*} updated object of the Event class\n   * @memberof EventsService\n   */\n  async updateEvent(id: string, updateDto: UpdateEventDto) {\n    const { startTime, endTime } = updateDto;\n    const event = await this.eventsRepository.findEvent({ where: { id } });\n\n    if (startTime > endTime) {\n      throw new BadRequestException(\n        'The start and end dates of the event are set incorrectly',\n      );\n    }\n\n    return await this.eventsRepository.updateEvent({\n      where: { id },\n      data: { ...updateDto, organizer: { connect: { id: event.userId } } },\n    });\n  }\n\n  /**\n   * Deleting an existing object of the Event class\n   * @param {string} id the unique ID of the Event object to delete\n   * @memberof EventsService\n   */\n  async deleteEvent(id: string): Promise {\n    await this.eventsRepository.deleteEvent({ where: { id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindEventDto.html":{"url":"classes/FindEventDto.html","title":"class - FindEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dto/find-event.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object for searching for a event with parameters corresponding to the passed ones\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                endTime\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                organizer\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/find-event.dto.ts:32\n                        \n                    \n\n            \n                \n                    description of the event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsAfter('startTime')@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/find-event.dto.ts:60\n                        \n                    \n\n            \n                \n                    date and time of the event completion\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        organizer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/find-event.dto.ts:41\n                        \n                    \n\n            \n                \n                    the unique identifier of the person who organizes the event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/find-event.dto.ts:50\n                        \n                    \n\n            \n                \n                    date and time of the event start\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/find-event.dto.ts:23\n                        \n                    \n\n            \n                \n                    the name of the event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/find-event.dto.ts:69\n                        \n                    \n\n            \n                \n                    link to the meeting place\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDateString,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { IsAfter } from 'src/decorators/isAfter.decorator';\n\n/**\n * An object for searching for a event with parameters corresponding to the passed ones\n * @export\n * @class FindEventDto\n */\nexport class FindEventDto {\n  /**\n   * the name of the event\n   * @type {string}\n   * @memberof FindEventDto\n   */\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  title?: string;\n\n  /**\n   * description of the event\n   * @type {string}\n   * @memberof FindEventDto\n   */\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  /**\n   * the unique identifier of the person who organizes the event\n   * @type {string}\n   * @memberof FindEventDto\n   */\n  @IsOptional()\n  @IsString()\n  organizer?: string;\n\n  /**\n   * date and time of the event start\n   * @type {Date}\n   * @memberof FindEventDto\n   */\n  @IsOptional()\n  @IsDateString()\n  startTime?: Date;\n\n  /**\n   * date and time of the event completion\n   * @type {Date}\n   * @memberof FindEventDto\n   */\n  @IsOptional()\n  @IsAfter('startTime')\n  @IsDateString()\n  endTime?: Date;\n\n  /**\n   * link to the meeting place\n   * @type {string}\n   * @memberof FindEventDto\n   */\n  @IsOptional()\n  @IsString()\n  url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindFileDto.html":{"url":"classes/FindFileDto.html","title":"class - FindFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/dto/find-file.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object for searching for a file with parameters corresponding to the passed ones\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/upload/dto/find-file.dto.ts:16\n                        \n                    \n\n            \n                \n                    the unique identifier of the user who owns the file\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * An object for searching for a file with parameters corresponding to the passed ones\n * @export\n * @class FindFileDto\n */\nexport class FindFileDto {\n  /**\n   * the unique identifier of the user who owns the file\n   * @type {string}\n   * @memberof FindFileDto\n   */\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindHomeworkDto.html":{"url":"classes/FindHomeworkDto.html","title":"class - FindHomeworkDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindHomeworkDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/homeworks/dto/find-homework.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object for searching for a homework with parameters corresponding to the passed ones\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                supportedFileTypes\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                teacherId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/homeworks/dto/find-homework.dto.ts:26\n                        \n                    \n\n            \n                \n                    the content of the work (what needs to be done)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        supportedFileTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/homeworks/dto/find-homework.dto.ts:44\n                        \n                    \n\n            \n                \n                    file extensions that can be sent as a response to homework\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        teacherId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/homeworks/dto/find-homework.dto.ts:35\n                        \n                    \n\n            \n                \n                    the unique identifier of the user who made up the homework\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/homeworks/dto/find-homework.dto.ts:17\n                        \n                    \n\n            \n                \n                    the title of the homework\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\n/**\n * An object for searching for a homework with parameters corresponding to the passed ones\n * @export\n * @class FindHomeworkDto\n */\nexport class FindHomeworkDto {\n  /**\n   * the title of the homework\n   * @type {string}\n   * @memberof FindHomeworkDto\n   */\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  title?: string;\n\n  /**\n   * the content of the work (what needs to be done)\n   * @type {string}\n   * @memberof FindHomeworkDto\n   */\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  /**\n   * the unique identifier of the user who made up the homework\n   * @type {string}\n   * @memberof FindHomeworkDto\n   */\n  @IsOptional()\n  @IsString()\n  teacherId?: string;\n\n  /**\n   * file extensions that can be sent as a response to homework\n   * @type {string[]}\n   * @memberof FindHomeworkDto\n   */\n  @IsOptional()\n  @IsString({ each: true })\n  supportedFileTypes?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindResponseDto.html":{"url":"classes/FindResponseDto.html","title":"class - FindResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teacher-responses/dto/find-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object for searching for a response with parameters corresponding to the passed ones\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                score\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                solutionId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                teacherId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        score\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teacher-responses/dto/find-response.dto.ts:55\n                        \n                    \n\n            \n                \n                    evaluation of the solution\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        solutionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teacher-responses/dto/find-response.dto.ts:34\n                        \n                    \n\n            \n                \n                    the unique identifier of the solution that has been answered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        teacherId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teacher-responses/dto/find-response.dto.ts:24\n                        \n                    \n\n            \n                \n                    the unique identifier of the teacher who provided the response to the task\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/teacher-responses/dto/find-response.dto.ts:44\n                        \n                    \n\n            \n                \n                    the content of the response to the solution\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Min,\n} from 'class-validator';\n\n/**\n * An object for searching for a response with parameters corresponding to the passed ones\n * @export\n * @class FindResponseDto\n */\nexport class FindResponseDto {\n  /**\n   * the unique identifier of the teacher who provided the response to the task\n   * @type {string}\n   * @memberof FindResponseDto\n   */\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  teacherId?: string;\n\n  /**\n   * the unique identifier of the solution that has been answered\n   * @type {string}\n   * @memberof FindResponseDto\n   */\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  solutionId?: string;\n\n  /**\n   * the content of the response to the solution\n   * @type {string}\n   * @memberof FindResponseDto\n   */\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  text?: string;\n\n  /**\n   * evaluation of the solution\n   * @type {number}\n   * @memberof FindResponseDto\n   */\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  score?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindRoleDto.html":{"url":"classes/FindRoleDto.html","title":"class - FindRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/roles/dto/find-role.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object for searching for a role with parameters corresponding to the passed ones\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/roles/dto/find-role.dto.ts:16\n                        \n                    \n\n            \n                \n                    the name of the role you are looking for\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * An object for searching for a role with parameters corresponding to the passed ones\n * @export\n * @class FindRoleDto\n */\nexport class FindRoleDto {\n  /**\n   * the name of the role you are looking for\n   * @type {string}\n   * @memberof FindRoleDto\n   */\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindSolutionDto.html":{"url":"classes/FindSolutionDto.html","title":"class - FindSolutionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindSolutionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/solutions/dto/find-solution.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object for searching for a solution with parameters corresponding to the passed ones\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authodId\n                            \n                            \n                                    \n                                    \n                                    \n                                homeworkId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/solutions/dto/find-solution.dto.ts:17\n                        \n                    \n\n            \n                \n                    the unique identifier of the user who provided the solution\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        homeworkId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/solutions/dto/find-solution.dto.ts:27\n                        \n                    \n\n            \n                \n                    the unique identifier of the homework that the solution belongs to\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\n/**\n * An object for searching for a solution with parameters corresponding to the passed ones\n * @export\n * @class FindSolutionDto\n */\nexport class FindSolutionDto {\n  /**\n   * the unique identifier of the user who provided the solution\n   * @type {string}\n   * @memberof FindSolutionDto\n   */\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  authodId: string;\n\n  /**\n   * the unique identifier of the homework that the solution belongs to\n   * @type {string}\n   * @memberof FindSolutionDto\n   */\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  homeworkId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindUserDto.html":{"url":"classes/FindUserDto.html","title":"class - FindUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/dto/find-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object for searching for a user with parameters corresponding to the passed ones\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                birthday\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                patronymic\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                surname\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                userRoleId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        birthday\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/find-user.dto.ts:34\n                        \n                    \n\n            \n                \n                    the user's birthday\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/find-user.dto.ts:25\n                        \n                    \n\n            \n                \n                    user's email address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/find-user.dto.ts:16\n                        \n                    \n\n            \n                \n                    unique user ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/find-user.dto.ts:43\n                        \n                    \n\n            \n                \n                    the user's real name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        patronymic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/find-user.dto.ts:61\n                        \n                    \n\n            \n                \n                    the user's real patronymic (if it exists)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        surname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/find-user.dto.ts:52\n                        \n                    \n\n            \n                \n                    the user's real last name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        userRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/find-user.dto.ts:70\n                        \n                    \n\n            \n                \n                    the unique identifier of the user's role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsDateString, IsString, IsOptional } from 'class-validator';\n\n/**\n * An object for searching for a user with parameters corresponding to the passed ones\n * @export\n * @class FindUserDto\n */\nexport class FindUserDto {\n  /**\n   * unique user ID\n   * @type {string}\n   * @memberof FindUserDto\n   */\n  @IsOptional()\n  @IsString()\n  id?: string;\n\n  /**\n   * user's email address\n   * @type {string}\n   * @memberof FindUserDto\n   */\n  @IsOptional()\n  @IsEmail()\n  email?: string;\n\n  /**\n   * the user's birthday\n   * @type {Date}\n   * @memberof FindUserDto\n   */\n  @IsOptional()\n  @IsDateString()\n  birthday?: Date;\n\n  /**\n   * the user's real name\n   * @type {string}\n   * @memberof FindUserDto\n   */\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  /**\n   * the user's real last name\n   * @type {string}\n   * @memberof FindUserDto\n   */\n  @IsOptional()\n  @IsString()\n  surname?: string;\n\n  /**\n   * the user's real patronymic (if it exists)\n   * @type {string}\n   * @memberof FindUserDto\n   */\n  @IsOptional()\n  @IsString()\n  patronymic?: string;\n\n  /**\n   * the unique identifier of the user's role\n   * @type {string}\n   * @memberof FindUserDto\n   */\n  @IsOptional()\n  @IsString()\n  userRoleId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HomeworksController.html":{"url":"controllers/HomeworksController.html","title":"controller - HomeworksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HomeworksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/homeworks/homeworks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                homeworks\n            \n\n\n            \n                Description\n            \n            \n                A controller for processing requests for manipulating objects of the Homework class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteHomework\n                            \n                            \n                                    \n                                    Async\n                                getHomeworks\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateHomework\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadHomework\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteHomework\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteHomework(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/homeworks/homeworks.controller.ts:101\n                        \n                    \n\n\n            \n                \n                        Handler for a request to delete an object of the Homework class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique ID of the Homework object to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getHomeworks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHomeworks(props: FindHomeworkDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/homeworks/homeworks.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Handler for the request to receive all events with certain parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindHomeworkDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    a set of parameters that the desired homeworks should have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a list of objects of the Homework class that match the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateHomework\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateHomework(user: User, id: string, updateHomeworkDto: UpdateHomeworkDto, files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/homeworks/homeworks.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Handler for an update request for an existing object of the Homework class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    information about the user who updates object\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique ID of the Homework object to update\n\n                                            \n                                        \n                                        \n                                                updateHomeworkDto\n                                            \n                                                            UpdateHomeworkDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    an object containing new information about the object\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files attached to an object of the Homework class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                information about the updated Homework class object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadHomework\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadHomework(user: User, createHomeworkDto: CreateHomeworkDto, files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/homeworks/homeworks.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Handler for the request to create a new object of the Homework class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    information about the user who uploads object\n\n                                            \n                                        \n                                        \n                                                createHomeworkDto\n                                            \n                                                            CreateHomeworkDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    a set of parameters required to create an object of the Homework class\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files attached to an object of the Homework class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                information about the new Homework class object\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Post,\n  Put,\n  Query,\n  UploadedFiles,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { HomeworksService } from './homeworks.service';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { ROLES } from 'src/auth/roles/roles.enum';\nimport { FindHomeworkDto } from './dto/find-homework.dto';\nimport { Homework, User } from '@prisma/client';\nimport { FilesInterceptor } from '@nestjs/platform-express';\nimport { CurrentUser } from 'src/auth/decorators/current-user.decorator';\nimport { CreateHomeworkDto } from './dto/create-homework.dto';\nimport { UpdateHomeworkDto } from './dto/update-homework.dto';\n\n/**\n * A controller for processing requests for manipulating objects of the Homework class\n * @export\n * @class HomeworksController\n */\n@Roles(ROLES.ADMIN, ROLES.TEACHER)\n@Controller('homeworks')\nexport class HomeworksController {\n  constructor(private readonly homeworksService: HomeworksService) {}\n\n  /**\n   * Handler for the request to receive all events with certain parameters\n   * @param {FindHomeworkDto} props a set of parameters that the desired homeworks should have\n   * @return {*} a list of objects of the Homework class that match the request parameters\n   * @memberof HomeworksController\n   */\n  @Get()\n  async getHomeworks(@Body() props: FindHomeworkDto) {\n    const res = await this.homeworksService.findHomeworks(props);\n\n    return res.map((homework) => ({\n      ...homework,\n      images: homework.images.map((image) => image.url),\n    }));\n  }\n\n  /**\n   * Handler for the request to create a new object of the Homework class\n   * @param {User} user information about the user who uploads object\n   * @param {CreateHomeworkDto} createHomeworkDto a set of parameters required to create an object of the Homework class\n   * @param {Express.Multer.File[]} files files attached to an object of the Homework class\n   * @return {*} information about the new Homework class object\n   * @memberof HomeworksController\n   */\n  @Post()\n  @UseInterceptors(FilesInterceptor('files'))\n  async uploadHomework(\n    @CurrentUser() user: User,\n    @Body() createHomeworkDto: CreateHomeworkDto,\n    @UploadedFiles() files: Express.Multer.File[],\n  ) {\n    return this.homeworksService.uploadHomework(\n      user.id,\n      createHomeworkDto,\n      files,\n    );\n  }\n\n  /**\n   * Handler for an update request for an existing object of the Homework class\n   * @param {User} user information about the user who updates object\n   * @param {string} id the unique ID of the Homework object to update\n   * @param {UpdateHomeworkDto} updateHomeworkDto an object containing new information about the object\n   * @param {Express.Multer.File[]} files files attached to an object of the Homework class\n   * @return {Promise} information about the updated Homework class object\n   * @memberof HomeworksController\n   */\n  @Put()\n  @UseInterceptors(FilesInterceptor('files'))\n  async updateHomework(\n    @CurrentUser() user: User,\n    @Query('id') id: string,\n    @Body() updateHomeworkDto: UpdateHomeworkDto,\n    @UploadedFiles() files: Express.Multer.File[],\n  ): Promise {\n    return this.homeworksService.updateHomework(\n      id,\n      user.id,\n      updateHomeworkDto,\n      files,\n    );\n  }\n\n  /**\n   * Handler for a request to delete an object of the Homework class\n   * @param {string} id the unique ID of the Homework object to delete\n   * @memberof HomeworksController\n   */\n  @Delete()\n  async deleteHomework(@Query('id') id: string): Promise {\n    await this.homeworksService.deleteHomework(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomeworksModule.html":{"url":"modules/HomeworksModule.html","title":"module - HomeworksModule","body":"\n                   \n\n\n\n\n    Modules\n    HomeworksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HomeworksModule\n\n\n\ncluster_HomeworksModule_providers\n\n\n\ncluster_HomeworksModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nHomeworksModule\n\nHomeworksModule\n\nHomeworksModule -->\n\nPrismaModule->HomeworksModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nHomeworksModule -->\n\nUploadModule->HomeworksModule\n\n\n\n\n\nHomeworksRepository\n\nHomeworksRepository\n\nHomeworksModule -->\n\nHomeworksRepository->HomeworksModule\n\n\n\n\n\nHomeworksService\n\nHomeworksService\n\nHomeworksModule -->\n\nHomeworksService->HomeworksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/homeworks/homeworks.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            A module for manipulating objects of the Homework clas\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HomeworksRepository\n                        \n                        \n                            HomeworksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HomeworksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UploadModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HomeworksService } from './homeworks.service';\nimport { HomeworksController } from './homeworks.controller';\nimport { HomeworksRepository } from './homeworks.repository';\nimport { PrismaModule } from 'src/database/prisma.module';\nimport { UploadModule } from 'src/upload/upload.module';\n\n/**\n * A module for manipulating objects of the Homework clas\n * @export\n * @class HomeworksModule\n */\n@Module({\n  controllers: [HomeworksController],\n  providers: [HomeworksService, HomeworksRepository],\n  imports: [PrismaModule, UploadModule],\n})\nexport class HomeworksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HomeworksRepository.html":{"url":"injectables/HomeworksRepository.html","title":"injectable - HomeworksRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HomeworksRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/homeworks/homeworks.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                A repository containing methods for manipulating objects of the Homework class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createHomework\n                            \n                            \n                                    Async\n                                deleteHomework\n                            \n                            \n                                    Async\n                                findHomework\n                            \n                            \n                                    Async\n                                findHomeworks\n                            \n                            \n                                    Async\n                                updateHomework\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/homeworks/homeworks.repository.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createHomework\n                        \n                    \n                \n            \n            \n                \n                        \n                    createHomework(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/homeworks/homeworks.repository.ts:20\n                        \n                    \n\n\n            \n                \n                        Creating a new object of the Homework class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters of the new homework\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a new homework that has been created\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteHomework\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteHomework(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/homeworks/homeworks.repository.ts:86\n                        \n                    \n\n\n            \n                \n                        Method for deleting an existing Homework class object\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters that can be used to uniquely identify the homework\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a deleted object of the Homework class\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findHomework\n                        \n                    \n                \n            \n            \n                \n                        \n                    findHomework(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/homeworks/homeworks.repository.ts:56\n                        \n                    \n\n\n            \n                \n                        Method for getting a single object of the Homework class corresponding to the request parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters that the object you are looking for should have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the first object of the Homework class that fits the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findHomeworks\n                        \n                    \n                \n            \n            \n                \n                        \n                    findHomeworks(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/homeworks/homeworks.repository.ts:37\n                        \n                    \n\n\n            \n                \n                        A method for searching for all homeworks that match the passed parameters\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.HomeworkWhereUniqueInput;\n    where?: Prisma.HomeworkWhereInput;\n    orderBy?: Prisma.HomeworkOrderByWithRelationInput;\n  }} params the parameters of the desired homeworks, as well as the request parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the desired homeworks, as well as the request parameters\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                all homeworks that fit the search\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateHomework\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateHomework(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/homeworks/homeworks.repository.ts:72\n                        \n                    \n\n\n            \n                \n                        Method for updating an existing Homework class object\n    where: Prisma.HomeworkWhereUniqueInput;\n    data: Prisma.HomeworkUpdateInput;\n  }} params the parameters of the homework to update, as well as new data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the homework to update, as well as new data\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                updated Homework class object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/database/prisma.service';\n\n/**\n * A repository containing methods for manipulating objects of the Homework class\n * @export\n * @class HomeworksRepository\n */\n@Injectable()\nexport class HomeworksRepository {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  /**\n   * Creating a new object of the Homework class\n   * @param {{ data: Prisma.HomeworkCreateInput }} params parameters of the new homework\n   * @return {*} a new homework that has been created\n   * @memberof HomeworksRepository\n   */\n  async createHomework(params: { data: Prisma.HomeworkCreateInput }) {\n    const { data } = params;\n    return this.prismaService.homework.create({ data });\n  }\n\n  /**\n   * A method for searching for all homeworks that match the passed parameters\n   * @param {{\n   *     skip?: number;\n   *     take?: number;\n   *     cursor?: Prisma.HomeworkWhereUniqueInput;\n   *     where?: Prisma.HomeworkWhereInput;\n   *     orderBy?: Prisma.HomeworkOrderByWithRelationInput;\n   *   }} params the parameters of the desired homeworks, as well as the request parameters\n   * @return {*} all homeworks that fit the search\n   * @memberof HomeworksRepository\n   */\n  async findHomeworks(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.HomeworkWhereUniqueInput;\n    where?: Prisma.HomeworkWhereInput;\n    orderBy?: Prisma.HomeworkOrderByWithRelationInput;\n  }) {\n    return this.prismaService.homework.findMany({\n      ...params,\n      include: { images: true },\n    });\n  }\n\n  /**\n   * Method for getting a single object of the Homework class corresponding to the request parameters\n   * @param {{ where?: Prisma.HomeworkWhereInput }} params the parameters that the object you are looking for should have\n   * @return {*} the first object of the Homework class that fits the request parameters\n   * @memberof HomeworksRepository\n   */\n  async findHomework(params: { where?: Prisma.HomeworkWhereInput }) {\n    return await this.prismaService.homework.findFirst({\n      ...params,\n      include: { images: true },\n    });\n  }\n\n  /**\n   * Method for updating an existing Homework class object\n   * @param {{\n   *     where: Prisma.HomeworkWhereUniqueInput;\n   *     data: Prisma.HomeworkUpdateInput;\n   *   }} params the parameters of the homework to update, as well as new data\n   * @return {*} updated Homework class object\n   * @memberof HomeworksRepository\n   */\n  async updateHomework(params: {\n    where: Prisma.HomeworkWhereUniqueInput;\n    data: Prisma.HomeworkUpdateInput;\n  }) {\n    const { where, data } = params;\n    return this.prismaService.homework.update({ where, data });\n  }\n\n  /**\n   * Method for deleting an existing Homework class object\n   * @param {{ where: Prisma.HomeworkWhereUniqueInput }} params parameters that can be used to uniquely identify the homework\n   * @return {*} a deleted object of the Homework class\n   * @memberof HomeworksRepository\n   */\n  async deleteHomework(params: { where: Prisma.HomeworkWhereUniqueInput }) {\n    const { where } = params;\n    return this.prismaService.homework.delete({ where });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HomeworksService.html":{"url":"injectables/HomeworksService.html","title":"injectable - HomeworksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HomeworksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/homeworks/homeworks.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service layer for manipulating objects of the Homework class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteHomework\n                            \n                            \n                                    Async\n                                findHomework\n                            \n                            \n                                    Async\n                                findHomeworks\n                            \n                            \n                                    Async\n                                updateHomework\n                            \n                            \n                                    Async\n                                uploadHomework\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(homeworksRepository: HomeworksRepository, uploadService: UploadService)\n                    \n                \n                        \n                            \n                                Defined in src/homeworks/homeworks.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        homeworksRepository\n                                                  \n                                                        \n                                                                        HomeworksRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        UploadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteHomework\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteHomework(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/homeworks/homeworks.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Deleting an existing object of the Homework class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique ID of the Homework object to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findHomework\n                        \n                    \n                \n            \n            \n                \n                        \n                    findHomework(props: FindHomeworkDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/homeworks/homeworks.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Getting a single object of the Homework class that has the necessary parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindHomeworkDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters that the desired object of the Homework class must have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the first object of the Homework class that corresponds to the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findHomeworks\n                        \n                    \n                \n            \n            \n                \n                        \n                    findHomeworks(props: FindHomeworkDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/homeworks/homeworks.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Getting all objects of the Homework class that have specific parameter values\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindHomeworkDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the desired data of the Homework object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                all Homework objects matching the query\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateHomework\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateHomework(id: string, userId: string, updateHomeworkDto: UpdateHomeworkDto, files: Express.Multer.File[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/homeworks/homeworks.service.ts:123\n                        \n                    \n\n\n            \n                \n                        Updating an existing Homework class object\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique identifier of the Homework class object to update\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique identifier of the user uploading the homework\n\n                                            \n                                        \n                                        \n                                                updateHomeworkDto\n                                            \n                                                            UpdateHomeworkDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    new object parameters that need to be applied\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files attached to an object of the Homework class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                updated object of the Homework class\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadHomework\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadHomework(userId: string, createHomeworkDto: CreateHomeworkDto, files: Express.Multer.File[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/homeworks/homeworks.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Creating a new object of the Homework class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique identifier of the user uploading the homework\n\n                                            \n                                        \n                                        \n                                                createHomeworkDto\n                                            \n                                                            CreateHomeworkDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    object containing information about the new homework\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files attached to an object of the Homework class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a new object of the Homework class\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { HomeworksRepository } from './homeworks.repository';\nimport { File } from '@prisma/client';\nimport { FindHomeworkDto } from './dto/find-homework.dto';\nimport { CreateHomeworkDto } from './dto/create-homework.dto';\nimport { UploadService } from 'src/upload/upload.service';\nimport { UpdateHomeworkDto } from './dto/update-homework.dto';\n\n/**\n * A service layer for manipulating objects of the Homework class\n * @export\n * @class HomeworksService\n */\n@Injectable()\nexport class HomeworksService {\n  constructor(\n    private readonly homeworksRepository: HomeworksRepository,\n    private readonly uploadService: UploadService,\n  ) {}\n\n  /**\n   * Getting all objects of the Homework class that have specific parameter values\n   * @param {FindHomeworkDto} props the desired data of the Homework object\n   * @return {*} all Homework objects matching the query\n   * @memberof HomeworksService\n   */\n  async findHomeworks(props: FindHomeworkDto) {\n    try {\n      return await this.homeworksRepository.findHomeworks({\n        where: {\n          ...props,\n          title: { contains: props.title },\n          description: { contains: props.description },\n          supportedFileTypes: {\n            contains: props.supportedFileTypes?.join(',') || '',\n          },\n        },\n      });\n    } catch (error) {\n      console.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  /**\n   * Getting a single object of the Homework class that has the necessary parameters\n   * @param {FindHomeworkDto} props parameters that the desired object of the Homework class must have\n   * @return {*} the first object of the Homework class that corresponds to the request parameters\n   * @memberof HomeworksService\n   */\n  async findHomework(props: FindHomeworkDto) {\n    try {\n      return await this.homeworksRepository.findHomework({\n        where: {\n          ...props,\n          description: { contains: props.description },\n          supportedFileTypes: {\n            contains: props.supportedFileTypes?.join(',') || '',\n          },\n        },\n      });\n    } catch (error) {\n      console.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  /**\n   * Creating a new object of the Homework class\n   * @param {string} userId the unique identifier of the user uploading the homework\n   * @param {CreateHomeworkDto} createHomeworkDto object containing information about the new homework\n   * @param {Express.Multer.File[]} files files attached to an object of the Homework class\n   * @return {*} a new object of the Homework class\n   * @memberof HomeworksService\n   */\n  async uploadHomework(\n    userId: string,\n    createHomeworkDto: CreateHomeworkDto,\n    files: Express.Multer.File[],\n  ) {\n    const { supportedFileTypes, teacher } = createHomeworkDto;\n    let uploadedImages: File[] = [];\n\n    try {\n      uploadedImages = await this.uploadService.upload(userId, 'images', files);\n\n      return await this.homeworksRepository.createHomework({\n        data: {\n          ...createHomeworkDto,\n          images: {\n            connect: uploadedImages.map((image) => {\n              return { id: image.id };\n            }),\n          },\n          teacher: {\n            connect: { id: teacher },\n          },\n          supportedFileTypes: supportedFileTypes.join(','),\n        },\n      });\n    } catch (error) {\n      console.error(error);\n      await Promise.all(\n        uploadedImages.map(async (file) => this.uploadService.delete(file.id)),\n      );\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Updating an existing Homework class object\n   * @param {string} id the unique identifier of the Homework class object to update\n   * @param {string} userId the unique identifier of the user uploading the homework\n   * @param {UpdateHomeworkDto} updateHomeworkDto new object parameters that need to be applied\n   * @param {Express.Multer.File[]} files files attached to an object of the Homework class\n   * @return {*} updated object of the Homework class\n   * @memberof HomeworksService\n   */\n  async updateHomework(\n    id: string,\n    userId: string,\n    updateHomeworkDto: UpdateHomeworkDto,\n    files: Express.Multer.File[],\n  ) {\n    let newImages: File[] = null;\n    try {\n      const { supportedFileTypes, teacher } = updateHomeworkDto;\n\n      const homework = await this.homeworksRepository.findHomework({\n        where: { id },\n      });\n\n      if (files && files.length > 0) {\n        newImages = await this.uploadService.upload(userId, 'images', files);\n\n        await Promise.all(\n          homework.images.map(async (image) => {\n            return this.uploadService.delete(image.id);\n          }),\n        );\n      }\n\n      return await this.homeworksRepository.updateHomework({\n        where: { id },\n        data: {\n          ...updateHomeworkDto,\n          images: {\n            connect: newImages\n              ? newImages.map((image) => {\n                  return { id: image.id };\n                })\n              : homework.images,\n          },\n          teacher: {\n            connect: { id: teacher || homework.teacherId },\n          },\n          supportedFileTypes:\n            supportedFileTypes?.join(',') || homework.supportedFileTypes,\n        },\n      });\n    } catch (error) {\n      console.log(error);\n      await Promise.all(\n        newImages.map(async (image) => this.uploadService.delete(image.id)),\n      );\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Deleting an existing object of the Homework class\n   * @param {string} id the unique ID of the Homework object to delete\n   * @memberof HomeworksService\n   */\n  async deleteHomework(id: string) {\n    const homework = await this.homeworksRepository.findHomework({\n      where: { id },\n    });\n\n    try {\n      await this.homeworksRepository.deleteHomework({ where: { id } });\n      await Promise.all(\n        homework.images.map(async (image) => {\n          return this.uploadService.delete(image.id);\n        }),\n      );\n    } catch (error) {\n      console.error(error);\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsAfterConstraint.html":{"url":"classes/IsAfterConstraint.html","title":"class - IsAfterConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsAfterConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators/isAfter.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                The logic of the isAfter decorator\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/decorators/isAfter.decorator.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                validationArguments\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: any, validationArguments?: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/decorators/isAfter.decorator.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                validationArguments\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  registerDecorator,\n} from 'class-validator';\n\n/**\n * A decorator to verify that the marked field is a date that is later than the value in the 'property' field\n * @export\n * @param {string} property the name of the field to compare the current field with\n * @param {ValidationOptions} [validationOptions] additional validation parameters\n * @return {*} function for parameter validation\n */\nexport function IsAfter(\n  property: string,\n  validationOptions?: ValidationOptions,\n) {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [property],\n      validator: IsAfterConstraint,\n    });\n  };\n}\n\n/**\n * The logic of the isAfter decorator\n * @class IsAfterConstraint\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'IsAfter' })\nclass IsAfterConstraint implements ValidatorConstraintInterface {\n  validate(\n    value: any,\n    validationArguments?: ValidationArguments,\n  ): boolean | Promise {\n    const [relatedPropertyName] = validationArguments.constraints;\n    const relatedValue = (validationArguments.object as any)[\n      relatedPropertyName\n    ];\n\n    return new Date(value) > new Date(relatedValue);\n  }\n\n  defaultMessage?(validationArguments?: ValidationArguments): string {\n    const [relatedPropertyName] = validationArguments.constraints;\n\n    return `The date specified in this field must be greater than in the ${relatedPropertyName} field'`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtAuthGuard.html":{"url":"classes/JwtAuthGuard.html","title":"class - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                A decorator for protecting a path or a group of paths using jwt token authorization\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExecutionContext } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\nimport { Reflector } from '@nestjs/core';\n\n/**\n * A decorator for protecting a path or a group of paths using jwt token authorization\n * @export\n * @class JwtAuthGuard\n * @extends {AuthGuard('jwt')}\n */\nexport default class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector = new Reflector()) {\n    super();\n  }\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                The logic of protecting server paths using jwt tokens\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:36\n                        \n                    \n\n\n            \n                \n                        Verifying the correctness of the user's data presented in the token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    information about the user, with which it can be uniquely identified\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                user data (if the input data is correct)\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { TokenPayload } from '../auth.service';\nimport { UsersService } from '../users/users.service';\n\n/**\n * The logic of protecting server paths using jwt tokens\n * @export\n * @class JwtStrategy\n * @extends {PassportStrategy(Strategy)}\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    configService: ConfigService,\n    private usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: any) => {\n          return request?.cookies.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  /**\n   * Verifying the correctness of the user's data presented in the token\n   * @param {TokenPayload} payload information about the user, with which it can be uniquely identified\n   * @return {*} user data (if the input data is correct)\n   * @memberof JwtStrategy\n   */\n  async validate(payload: TokenPayload) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...rest } = await this.usersService.findUser({\n        id: payload.id,\n      });\n\n      return rest;\n    } catch (error) {\n      console.error(error);\n      throw new UnauthorizedException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalAuthGuard.html":{"url":"classes/LocalAuthGuard.html","title":"class - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                A decorator for protecting a path or a group of paths using local authorization\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\n/**\n * A decorator for protecting a path or a group of paths using local authorization\n * @export\n * @class LocalAuthGuard\n * @extends {AuthGuard('local')}\n */\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                The logic of protecting the server paths by checking the login and password\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:25\n                        \n                    \n\n\n            \n                \n                        Checking the correctness of the transmitted username (email) and password of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    user's email address\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the user's password\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                user data (if the input data is correct)\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\n\n/**\n * The logic of protecting the server paths by checking the login and password\n * @export\n * @class LocalStrategy\n * @extends {PassportStrategy(Strategy)}\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  /**\n   * Checking the correctness of the transmitted username (email) and password of the user\n   * @param {string} email user's email address\n   * @param {string} password the user's password\n   * @return {Promise} user data (if the input data is correct)\n   * @memberof LocalStrategy\n   */\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser({ email, password });\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/dto/login-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object with parameters for user authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/login-user.dto.ts:15\n                        \n                    \n\n            \n                \n                    the email address of the authenticating user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/login-user.dto.ts:22\n                        \n                    \n\n            \n                \n                    the user's password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\n\n/**\n * An object with parameters for user authentication\n * @export\n * @class LoginUserDto\n */\nexport class LoginUserDto {\n  /**\n   * the email address of the authenticating user\n   * @type {string}\n   * @memberof LoginUserDto\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * the user's password\n   * @type {string}\n   * @memberof LoginUserDto\n   */\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchConstraint.html":{"url":"classes/MatchConstraint.html","title":"class - MatchConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorators/match.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                The logic of the Match decorator\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(validationArguments?: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/decorators/match.decorator.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                validationArguments\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: any, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/decorators/match.decorator.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\n/**\n * A decorator for checking the equality of the values of the marked field and the field whose name is specified in the 'property' field\n * @export\n * @param {string} property the name of the field whose value should be equal to the value in the marked field\n * @param {ValidationOptions} [validationOptions] additional validation parameters\n * @return {*} function for parameter validation\n */\nexport function Match(property: string, validationOptions?: ValidationOptions) {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [property],\n      validator: MatchConstraint,\n    });\n  };\n}\n\n/**\n * The logic of the Match decorator\n * @export\n * @class MatchConstraint\n * @implements {ValidatorConstraintInterface}\n */\n@ValidatorConstraint({ name: 'Match' })\nclass MatchConstraint implements ValidatorConstraintInterface {\n  validate(value: any, args: ValidationArguments) {\n    const [relatedPropertyName] = args.constraints;\n    const relatedValue = (args.object as any)[relatedPropertyName];\n    return value === relatedValue;\n  }\n  defaultMessage(validationArguments?: ValidationArguments): string {\n    const [relatedPropertyName] = validationArguments.constraints;\n\n    return `${validationArguments.property} must match ${relatedPropertyName} exactly`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/prisma.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            A module for connecting and interacting an application with a database\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n/**\n * A module for connecting and interacting an application with a database\n * @export\n * @class PrismaModule\n */\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A common service layer containing the main methods of interaction between the application and the database\n\n            \n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                        \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/prisma.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/prisma.service.ts:34\n                        \n                    \n\n\n            \n                \n                        program actions when the module is turned off (for example: shutting down the server)\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/prisma.service.ts:26\n                        \n                    \n\n\n            \n                \n                        program actions during module initialization\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  INestApplication,\n  Injectable,\n  OnModuleDestroy,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n/**\n * A common service layer containing the main methods of interaction between the application and the database\n * @export\n * @class PrismaService\n * @extends {PrismaClient}\n * @implements {OnModuleInit}\n * @implements {OnModuleDestroy}\n */\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  /**\n   * program actions during module initialization\n   * @memberof PrismaService\n   */\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  /**\n   * program actions when the module is turned off (for example: shutting down the server)\n   * @memberof PrismaService\n   */\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit' as never, async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/dto/register-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object with parameters for registering a new user\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                birthday\n                            \n                            \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                patronymic\n                            \n                            \n                                    \n                                surname\n                            \n                            \n                                    \n                                userRoleId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        birthday\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/register-user.dto.ts:39\n                        \n                    \n\n            \n                \n                    birthday of a new user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Match('password')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/register-user.dto.ts:31\n                        \n                    \n\n            \n                \n                    confirmation of the user's password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/register-user.dto.ts:16\n                        \n                    \n\n            \n                \n                    the email address of the registering user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/register-user.dto.ts:47\n                        \n                    \n\n            \n                \n                    the real name of the new user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/register-user.dto.ts:23\n                        \n                    \n\n            \n                \n                    the user's password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        patronymic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/register-user.dto.ts:64\n                        \n                    \n\n            \n                \n                    the real patronymic of the new user (if it exists)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        surname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/register-user.dto.ts:55\n                        \n                    \n\n            \n                \n                    the real last name of the new user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/users/dto/register-user.dto.ts:72\n                        \n                    \n\n            \n                \n                    the ID of the new user's role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsEmail, IsOptional, IsString } from 'class-validator';\nimport { Match } from 'src/decorators/match.decorator';\n\n/**\n * An object with parameters for registering a new user\n * @export\n * @class RegisterUserDto\n */\nexport class RegisterUserDto {\n  /**\n   * the email address of the registering user\n   * @type {string}\n   * @memberof RegisterUserDto\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * the user's password\n   * @type {string}\n   * @memberof RegisterUserDto\n   */\n  password: string;\n\n  /**\n   * confirmation of the user's password\n   * @type {string}\n   * @memberof RegisterUserDto\n   */\n  @Match('password')\n  confirmPassword: string;\n\n  /**\n   * birthday of a new user\n   * @type {Date}\n   * @memberof RegisterUserDto\n   */\n  @IsDateString()\n  birthday: Date;\n\n  /**\n   * the real name of the new user\n   * @type {string}\n   * @memberof RegisterUserDto\n   */\n  @IsString()\n  name: string;\n\n  /**\n   * the real last name of the new user\n   * @type {string}\n   * @memberof RegisterUserDto\n   */\n  @IsString()\n  surname: string;\n\n  /**\n   * the real patronymic of the new user (if it exists)\n   * @type {string}\n   * @memberof RegisterUserDto\n   */\n  @IsOptional()\n  @IsString()\n  patronymic?: string;\n\n  /**\n   * the ID of the new user's role\n   * @type {string}\n   * @memberof RegisterUserDto\n   */\n  @IsString()\n  userRoleId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n            \n                Description\n            \n            \n                A controller for processing requests for manipulating objects of the UserRole class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRole(createRoleDto: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RolesGuard)@Roles(ROLES.ADMIN)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n                        Handler for the request to create a new role\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createRoleDto\n                                            \n                                                            CreateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    an object containing information about the new role\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                an object from the database containing information about the new role\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UserRole } from '@prisma/client';\nimport { Roles } from '../decorators/roles.decorator';\nimport { RolesGuard } from '../guards/role.guard';\nimport { ROLES } from './roles.enum';\n\n/**\n * A controller for processing requests for manipulating objects of the UserRole class\n * @export\n * @class RolesController\n */\n@Controller('roles')\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  /**\n   * Handler for the request to create a new role\n   * @param createRoleDto an object containing information about the new role\n   * @returns an object from the database containing information about the new role\n   */\n  @UseGuards(RolesGuard)\n  @Roles(ROLES.ADMIN)\n  @Post()\n  async createRole(@Body() createRoleDto: CreateRoleDto): Promise {\n    return this.rolesService.createRole({ title: createRoleDto.title });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/role.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    A decorator to protect a path or a group of paths by checking the user role\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesService: RolesService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/role.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/role.guard.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { ACCESS_ROLES_KEY } from '../decorators/roles.decorator';\nimport { RolesService } from '../roles/roles.service';\nimport { User } from '@prisma/client';\n\n/**\n * A decorator to protect a path or a group of paths by checking the user role\n * @export\n * @class RolesGuard\n * @implements {CanActivate}\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(\n    private rolesService: RolesService,\n    private reflector: Reflector = new Reflector(),\n  ) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const roles = this.reflector.getAllAndOverride(ACCESS_ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!roles) {\n      return true;\n    }\n\n    const user: User = context.switchToHttp().getRequest().user;\n    return this.rolesService.isUserBelong(roles, user.userRoleId);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_imports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_RolesModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nRolesModule\n\nRolesModule\n\nRolesModule -->\n\nPrismaModule->RolesModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesRepository\n\nRolesRepository\n\nRolesModule -->\n\nRolesRepository->RolesModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/roles/roles.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            A module for manipulating objects of the UserRole class\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesRepository\n                        \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\nimport { PrismaModule } from 'src/database/prisma.module';\nimport { RolesRepository } from './roles.repository';\n\n/**\n * A module for manipulating objects of the UserRole class\n * @export\n * @class RolesModule\n */\n@Global()\n@Module({\n  controllers: [RolesController],\n  providers: [RolesService, RolesRepository],\n  exports: [RolesService],\n  imports: [PrismaModule],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesRepository.html":{"url":"injectables/RolesRepository.html","title":"injectable - RolesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/roles/roles.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                A repository containing methods for manipulating objects of the UserRole class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createRole\n                            \n                            \n                                    Async\n                                findRole\n                            \n                            \n                                    Async\n                                findRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles/roles.repository.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRole(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/roles/roles.repository.ts:22\n                        \n                    \n\n\n            \n                \n                        A method for adding a new role to the database\n    data: Prisma.UserRoleCreateInput;\n  }} params parameters of the new role\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters of the new role\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a new role that has been created\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRole(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/roles/roles.repository.ts:59\n                        \n                    \n\n\n            \n                \n                        Method for getting a single object of the UserRole class corresponding to the request parameters\n    where?: Prisma.UserRoleWhereInput;\n  }} params the parameters that the object you are looking for should have\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters that the object you are looking for should have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the first object of the UserRole class that fits the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    findRoles(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/roles/roles.repository.ts:41\n                        \n                    \n\n\n            \n                \n                        A method for searching for all roles that match the passed parameters\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserRoleWhereUniqueInput;\n    where?: Prisma.UserRoleWhereInput;\n    orderBy?: Prisma.UserRoleOrderByWithRelationInput;\n  }} params the parameters of the desired users, as well as the request parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the desired users, as well as the request parameters\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                all roles that fit the search query\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma, UserRole } from '@prisma/client';\nimport { PrismaService } from 'src/database/prisma.service';\n\n/**\n * A repository containing methods for manipulating objects of the UserRole class\n * @export\n * @class RolesRepository\n */\n@Injectable()\nexport class RolesRepository {\n  constructor(private readonly prisma: PrismaService) {}\n\n  /**\n   * A method for adding a new role to the database\n   * @param {{\n   *     data: Prisma.UserRoleCreateInput;\n   *   }} params parameters of the new role\n   * @return {Promise} a new role that has been created\n   * @memberof RolesRepository\n   */\n  async createRole(params: {\n    data: Prisma.UserRoleCreateInput;\n  }): Promise {\n    const { data } = params;\n    return this.prisma.userRole.create({ data });\n  }\n\n  /**\n   * A method for searching for all roles that match the passed parameters\n   * @param {{\n   *     skip?: number;\n   *     take?: number;\n   *     cursor?: Prisma.UserRoleWhereUniqueInput;\n   *     where?: Prisma.UserRoleWhereInput;\n   *     orderBy?: Prisma.UserRoleOrderByWithRelationInput;\n   *   }} params the parameters of the desired users, as well as the request parameters\n   * @return {Promise} all roles that fit the search query\n   * @memberof RolesRepository\n   */\n  async findRoles(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserRoleWhereUniqueInput;\n    where?: Prisma.UserRoleWhereInput;\n    orderBy?: Prisma.UserRoleOrderByWithRelationInput;\n  }): Promise {\n    return this.prisma.userRole.findMany({ ...params });\n  }\n\n  /**\n   * Method for getting a single object of the UserRole class corresponding to the request parameters\n   * @param {{\n   *     where?: Prisma.UserRoleWhereInput;\n   *   }} params the parameters that the object you are looking for should have\n   * @return {Promise} the first object of the UserRole class that fits the request parameters\n   * @memberof RolesRepository\n   */\n  async findRole(params: {\n    where?: Prisma.UserRoleWhereInput;\n  }): Promise {\n    return await this.prisma.userRole.findFirst({ ...params, take: 1 });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/roles/roles.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service layer for manipulating objects of the UserRole class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createRole\n                            \n                            \n                                    Async\n                                getRole\n                            \n                            \n                                    Async\n                                getRoles\n                            \n                            \n                                    Async\n                                isUserBelong\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: RolesRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/roles/roles.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        RolesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRole(undefined: CreateRoleDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/roles/roles.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Creating a new object of the UserRole class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CreateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a new object of the UserRole class\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRole(props: FindRoleDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/roles/roles.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Getting a single object of the UserRole class that has the necessary parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters that the desired object of the UserRole class must have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the first object of the UserRole class that corresponds to the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRoles(props: FindRoleDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/roles/roles.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Getting all objects of the UserRole class that have specific parameter values\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the desired data of the UserRole object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                all UserRole objects matching the query\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isUserBelong\n                        \n                    \n                \n            \n            \n                \n                        \n                    isUserBelong(targetRoleNames: string[], userRoleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/roles/roles.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Checking whether a user role belongs to a specific set of roles\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                targetRoleNames\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the set of roles that the user should belong to\n\n                                            \n                                        \n                                        \n                                                userRoleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    current user role\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the result of the check\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { FindRoleDto } from './dto/find-role.dto';\nimport { UserRole } from '@prisma/client';\nimport { RolesRepository } from './roles.repository';\nimport { CreateRoleDto } from './dto/create-role.dto';\n\n/**\n * A service layer for manipulating objects of the UserRole class\n * @export\n * @class RolesService\n */\n@Injectable()\nexport class RolesService {\n  constructor(private readonly rolesRepository: RolesRepository) {}\n\n  /**\n   * Getting all objects of the UserRole class that have specific parameter values\n   * @param {FindRoleDto} props the desired data of the UserRole object\n   * @return {Promise} all UserRole objects matching the query\n   * @memberof RolesService\n   */\n  async getRoles(props: FindRoleDto): Promise {\n    return this.rolesRepository.findRoles({\n      where: { title: { contains: props.title } },\n    });\n  }\n\n  /**\n   * Getting a single object of the UserRole class that has the necessary parameters\n   * @param {FindRoleDto} props parameters that the desired object of the UserRole class must have\n   * @return {Promise} the first object of the UserRole class that corresponds to the request parameters\n   * @memberof RolesService\n   */\n  async getRole(props: FindRoleDto): Promise {\n    return await this.rolesRepository.findRole({\n      where: { title: { contains: props.title } },\n    });\n  }\n\n  /**\n   * Creating a new object of the UserRole class\n   * @param {CreateRoleDto} an object containing information about the new role\n   * @return {Promise} a new object of the UserRole class\n   * @memberof RolesService\n   */\n  async createRole({ title }: CreateRoleDto): Promise {\n    const role = await this.getRole({ title });\n\n    if (role) {\n      throw new BadRequestException('A role with this id already exists');\n    }\n\n    try {\n      return await this.rolesRepository.createRole({\n        data: { title },\n      });\n    } catch (error) {\n      console.error(error);\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Checking whether a user role belongs to a specific set of roles\n   * @param {string[]} targetRoleNames the set of roles that the user should belong to\n   * @param {string} userRoleId current user role\n   * @return {Promise} the result of the check\n   * @memberof RolesService\n   */\n  async isUserBelong(\n    targetRoleNames: string[],\n    userRoleId: string,\n  ): Promise {\n    const databaseRoles = await this.rolesRepository.findRoles({});\n    const targetRoleIds = databaseRoles\n      .filter((role) => targetRoleNames.includes(role.title))\n      .map((role) => role.id);\n\n    return targetRoleIds.includes(userRoleId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SolutionsController.html":{"url":"controllers/SolutionsController.html","title":"controller - SolutionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SolutionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/solutions/solutions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                solutions\n            \n\n\n            \n                Description\n            \n            \n                A controller for processing requests for manipulating objects of the Solution class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteSolution\n                            \n                            \n                                    \n                                    Async\n                                getSolutions\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateSolution\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadSolution\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSolution(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/solutions/solutions.controller.ts:100\n                        \n                    \n\n\n            \n                \n                        Handler for a request to delete an object of the Solution class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique ID of the Solution object to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSolutions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSolutions(props: FindSolutionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/solutions/solutions.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Handler for the request to receive all events with certain parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindSolutionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    a set of parameters that the desired solutions should have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a list of objects of the Solution class that match the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateSolution(id: string, user: User, createSolutionDto: EditSolutionDto, files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@Put()\n                \n            \n\n                    \n                        \n                            Defined in src/solutions/solutions.controller.ts:80\n                        \n                    \n\n\n            \n                \n                        Handler for an update request for an existing object of the Solution class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique ID of the Homework object to update\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    information about the user who updates object\n\n                                            \n                                        \n                                        \n                                                createSolutionDto\n                                            \n                                                            EditSolutionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    an object containing new information about the object\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files attached to an object of the Solution class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                information about the updated Solution class object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadSolution(user: User, createSolutionDto: EditSolutionDto, files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/solutions/solutions.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Handler for the request to create a new object of the Solution class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    information about the user who uploads object\n\n                                            \n                                        \n                                        \n                                                createSolutionDto\n                                            \n                                                            EditSolutionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    a set of parameters required to create an object of the Solution class\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files attached to an object of the Solution class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                information about the new Solution class object\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Post,\n  Put,\n  Query,\n  UploadedFiles,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { SolutionsService } from './solutions.service';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { ROLES } from 'src/auth/roles/roles.enum';\nimport { FindSolutionDto } from './dto/find-solution.dto';\nimport { FilesInterceptor } from '@nestjs/platform-express';\nimport { EditSolutionDto } from './dto/edit-solution.dto';\nimport { CurrentUser } from 'src/auth/decorators/current-user.decorator';\nimport { User } from '@prisma/client';\n\n/**\n * A controller for processing requests for manipulating objects of the Solution class\n * @export\n * @class SolutionsController\n */\n@Roles(ROLES.TEACHER, ROLES.ADMIN)\n@Controller('solutions')\nexport class SolutionsController {\n  constructor(private readonly solutionsService: SolutionsService) {}\n\n  /**\n   * Handler for the request to receive all events with certain parameters\n   * @param {FindSolutionDto} props a set of parameters that the desired solutions should have\n   * @return {*} a list of objects of the Solution class that match the request parameters\n   * @memberof SolutionsController\n   */\n  @Get()\n  async getSolutions(@Body() props: FindSolutionDto) {\n    return (await this.solutionsService.findSolutions(props)).map(\n      (solution) => ({\n        ...solution,\n        files: solution.files.map((file) => file.url),\n      }),\n    );\n  }\n\n  /**\n   * Handler for the request to create a new object of the Solution class\n   * @param {User} user information about the user who uploads object\n   * @param {EditSolutionDto} createSolutionDto a set of parameters required to create an object of the Solution class\n   * @param {Express.Multer.File[]} files files attached to an object of the Solution class\n   * @return {*} information about the new Solution class object\n   * @memberof SolutionsController\n   */\n  @UseInterceptors(FilesInterceptor('files'))\n  @Post()\n  async uploadSolution(\n    @CurrentUser() user: User,\n    @Body() createSolutionDto: EditSolutionDto,\n    @UploadedFiles() files: Express.Multer.File[],\n  ) {\n    return this.solutionsService.uploadSolution(\n      user.id,\n      createSolutionDto,\n      files,\n    );\n  }\n\n  /**\n   * Handler for an update request for an existing object of the Solution class\n   * @param {string} id the unique ID of the Homework object to update\n   * @param {User} user information about the user who updates object\n   * @param {EditSolutionDto} createSolutionDto an object containing new information about the object\n   * @param {Express.Multer.File[]} files files attached to an object of the Solution class\n   * @return {*} information about the updated Solution class object\n   * @memberof SolutionsController\n   */\n  @UseInterceptors(FilesInterceptor('files'))\n  @Put()\n  async updateSolution(\n    @Query('id') id: string,\n    @CurrentUser() user: User,\n    @Body() createSolutionDto: EditSolutionDto,\n    @UploadedFiles() files: Express.Multer.File[],\n  ) {\n    return this.solutionsService.updateSolution(\n      id,\n      user.id,\n      createSolutionDto,\n      files,\n    );\n  }\n\n  /**\n   * Handler for a request to delete an object of the Solution class\n   * @param {string} id the unique ID of the Solution object to delete\n   * @memberof SolutionsController\n   */\n  @Delete()\n  async deleteSolution(@Query('id') id: string) {\n    await this.solutionsService.deleteSolution(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SolutionsModule.html":{"url":"modules/SolutionsModule.html","title":"module - SolutionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SolutionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SolutionsModule\n\n\n\ncluster_SolutionsModule_imports\n\n\n\ncluster_SolutionsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nSolutionsModule\n\nSolutionsModule\n\nSolutionsModule -->\n\nPrismaModule->SolutionsModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nSolutionsModule -->\n\nUploadModule->SolutionsModule\n\n\n\n\n\nSolutionsRepository\n\nSolutionsRepository\n\nSolutionsModule -->\n\nSolutionsRepository->SolutionsModule\n\n\n\n\n\nSolutionsService\n\nSolutionsService\n\nSolutionsModule -->\n\nSolutionsService->SolutionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/solutions/solutions.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            A module for manipulating objects of the Solution clas\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SolutionsRepository\n                        \n                        \n                            SolutionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SolutionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UploadModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SolutionsService } from './solutions.service';\nimport { SolutionsController } from './solutions.controller';\nimport { SolutionsRepository } from './solutions.repository';\nimport { PrismaModule } from 'src/database/prisma.module';\nimport { UploadModule } from 'src/upload/upload.module';\n\n/**\n * A module for manipulating objects of the Solution clas\n * @export\n * @class SolutionsModule\n */\n@Module({\n  controllers: [SolutionsController],\n  providers: [SolutionsService, SolutionsRepository],\n  imports: [PrismaModule, UploadModule],\n})\nexport class SolutionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SolutionsRepository.html":{"url":"injectables/SolutionsRepository.html","title":"injectable - SolutionsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SolutionsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/solutions/solutions.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                A repository containing methods for manipulating objects of the Solution class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createSolution\n                            \n                            \n                                    Async\n                                deleteSolution\n                            \n                            \n                                    Async\n                                findSolution\n                            \n                            \n                                    Async\n                                findSolutions\n                            \n                            \n                                    Async\n                                updateSolution\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/solutions/solutions.repository.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    createSolution(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/solutions/solutions.repository.ts:20\n                        \n                    \n\n\n            \n                \n                        Creating a new object of the Solution class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters of the new solution\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a new solution that has been created\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSolution(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/solutions/solutions.repository.ts:88\n                        \n                    \n\n\n            \n                \n                        Method for deleting an existing Solution class object\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters that can be used to uniquely identify the solution\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a deleted object of the Solution class\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    findSolution(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/solutions/solutions.repository.ts:56\n                        \n                    \n\n\n            \n                \n                        Method for getting a single object of the Solution class corresponding to the request parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters that the object you are looking for should have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the first object of the Solution class that fits the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findSolutions\n                        \n                    \n                \n            \n            \n                \n                        \n                    findSolutions(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/solutions/solutions.repository.ts:37\n                        \n                    \n\n\n            \n                \n                        A method for searching for all solutions that match the passed parameters\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.SolutionWhereUniqueInput;\n    where?: Prisma.SolutionWhereInput;\n    orderBy?: Prisma.SolutionOrderByWithRelationInput;\n  }} params the parameters of the desired solutions, as well as the request parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the desired solutions, as well as the request parameters\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                all solutions that fit the search\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateSolution(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/solutions/solutions.repository.ts:74\n                        \n                    \n\n\n            \n                \n                        Method for updating an existing Solution class object\n    where: Prisma.SolutionWhereUniqueInput;\n    data: Prisma.SolutionUpdateInput;\n  }} params the parameters of the solution to update, as well as new data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the solution to update, as well as new data\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                updated Solution class object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/database/prisma.service';\n\n/**\n * A repository containing methods for manipulating objects of the Solution class\n * @export\n * @class SolutionsRepository\n */\n@Injectable()\nexport class SolutionsRepository {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  /**\n   * Creating a new object of the Solution class\n   * @param {{ data: Prisma.SolutionCreateInput }} params parameters of the new solution\n   * @return {*} a new solution that has been created\n   * @memberof SolutionsRepository\n   */\n  async createSolution(params: { data: Prisma.SolutionCreateInput }) {\n    const { data } = params;\n    return this.prismaService.solution.create({ data });\n  }\n\n  /**\n   * A method for searching for all solutions that match the passed parameters\n   * @param {{\n   *     skip?: number;\n   *     take?: number;\n   *     cursor?: Prisma.SolutionWhereUniqueInput;\n   *     where?: Prisma.SolutionWhereInput;\n   *     orderBy?: Prisma.SolutionOrderByWithRelationInput;\n   *   }} params the parameters of the desired solutions, as well as the request parameters\n   * @return {*} all solutions that fit the search\n   * @memberof SolutionsRepository\n   */\n  async findSolutions(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.SolutionWhereUniqueInput;\n    where?: Prisma.SolutionWhereInput;\n    orderBy?: Prisma.SolutionOrderByWithRelationInput;\n  }) {\n    return this.prismaService.solution.findMany({\n      ...params,\n      include: { files: true },\n    });\n  }\n\n  /**\n   * Method for getting a single object of the Solution class corresponding to the request parameters\n   * @param {{ where?: Prisma.SolutionWhereInput }} params the parameters that the object you are looking for should have\n   * @return {*} the first object of the Solution class that fits the request parameters\n   * @memberof SolutionsRepository\n   */\n  async findSolution(params: { where?: Prisma.SolutionWhereInput }) {\n    return (\n      await this.prismaService.solution.findMany({\n        ...params,\n        include: { files: true },\n      })\n    ).at(0);\n  }\n\n  /**\n   * Method for updating an existing Solution class object\n   * @param {{\n   *     where: Prisma.SolutionWhereUniqueInput;\n   *     data: Prisma.SolutionUpdateInput;\n   *   }} params the parameters of the solution to update, as well as new data\n   * @return {*} updated Solution class object\n   * @memberof SolutionsRepository\n   */\n  async updateSolution(params: {\n    where: Prisma.SolutionWhereUniqueInput;\n    data: Prisma.SolutionUpdateInput;\n  }) {\n    const { where, data } = params;\n    return this.prismaService.solution.update({ where, data });\n  }\n\n  /**\n   * Method for deleting an existing Solution class object\n   * @param {{ where: Prisma.SolutionWhereUniqueInput }} params parameters that can be used to uniquely identify the solution\n   * @return {*} a deleted object of the Solution class\n   * @memberof SolutionsRepository\n   */\n  async deleteSolution(params: { where: Prisma.SolutionWhereUniqueInput }) {\n    const { where } = params;\n    return this.prismaService.solution.delete({ where });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SolutionsService.html":{"url":"injectables/SolutionsService.html","title":"injectable - SolutionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SolutionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/solutions/solutions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service layer for manipulating objects of the Solution class\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getTargetDir\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteSolution\n                            \n                            \n                                    Async\n                                findSolution\n                            \n                            \n                                    Async\n                                findSolutions\n                            \n                            \n                                    Async\n                                updateSolution\n                            \n                            \n                                    Async\n                                uploadSolution\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(solutionsRepository: SolutionsRepository, uploadService: UploadService)\n                    \n                \n                        \n                            \n                                Defined in src/solutions/solutions.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        solutionsRepository\n                                                  \n                                                        \n                                                                        SolutionsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        UploadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSolution(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/solutions/solutions.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Deleting an existing object of the Solution class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique ID of the Solution object to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    findSolution(props: FindSolutionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/solutions/solutions.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Getting a single object of the Solution class that has the necessary parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindSolutionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters that the desired object of the Solution class must have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the first object of the Solution class that corresponds to the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findSolutions\n                        \n                    \n                \n            \n            \n                \n                        \n                    findSolutions(props: FindSolutionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/solutions/solutions.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Getting all objects of the Solution class that have specific parameter values\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindSolutionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the desired data of the Solution object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                all Solution objects matching the query\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateSolution(id: string, userId: string, editSolutionDto: EditSolutionDto, files: Express.Multer.File[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/solutions/solutions.service.ts:112\n                        \n                    \n\n\n            \n                \n                        Updating an existing Solution class object\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique identifier of the Solution class object to update\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique identifier of the user uploading the solution\n\n                                            \n                                        \n                                        \n                                                editSolutionDto\n                                            \n                                                            EditSolutionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    new object parameters that need to be applied\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files attached to an object of the Solution class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                updated object of the Solution class\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadSolution\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadSolution(userId: string, createSolutionDto: EditSolutionDto, files: Express.Multer.File[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/solutions/solutions.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Creating a new object of the Solution class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique identifier of the user uploading the solution\n\n                                            \n                                        \n                                        \n                                                createSolutionDto\n                                            \n                                                            EditSolutionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    object containing information about the new solution\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files attached to an object of the Solution class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a new object of the Solution class\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getTargetDir\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/solutions/solutions.service.ts:183\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { SolutionsRepository } from './solutions.repository';\nimport { FindSolutionDto } from './dto/find-solution.dto';\nimport { EditSolutionDto } from './dto/edit-solution.dto';\nimport { File } from '@prisma/client';\nimport { UploadService } from 'src/upload/upload.service';\nimport { join } from 'path';\n\n/**\n * A service layer for manipulating objects of the Solution class\n * @export\n * @class SolutionsService\n */\n@Injectable()\nexport class SolutionsService {\n  constructor(\n    private readonly solutionsRepository: SolutionsRepository,\n    private readonly uploadService: UploadService,\n  ) {}\n\n  /**\n   * Getting all objects of the Solution class that have specific parameter values\n   * @param {FindSolutionDto} props the desired data of the Solution object\n   * @return {*} all Solution objects matching the query\n   * @memberof SolutionsService\n   */\n  async findSolutions(props: FindSolutionDto) {\n    try {\n      return await this.solutionsRepository.findSolutions({\n        where: { ...props },\n      });\n    } catch (error) {\n      console.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  /**\n   * Getting a single object of the Solution class that has the necessary parameters\n   * @param {FindSolutionDto} props parameters that the desired object of the Solution class must have\n   * @return {*} the first object of the Solution class that corresponds to the request parameters\n   * @memberof SolutionsService\n   */\n  async findSolution(props: FindSolutionDto) {\n    try {\n      return await this.solutionsRepository.findSolution({\n        where: { ...props },\n      });\n    } catch (error) {\n      console.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  /**\n   * Creating a new object of the Solution class\n   * @param {string} userId the unique identifier of the user uploading the solution\n   * @param {EditSolutionDto} createSolutionDto object containing information about the new solution\n   * @param {Express.Multer.File[]} files files attached to an object of the Solution class\n   * @return {*} a new object of the Solution class\n   * @memberof SolutionsService\n   */\n  async uploadSolution(\n    userId: string,\n    createSolutionDto: EditSolutionDto,\n    files: Express.Multer.File[],\n  ) {\n    const { homeworkId } = createSolutionDto;\n    let uploadedFiles: File[] = [];\n\n    try {\n      const targetDir = this.getTargetDir(userId);\n      uploadedFiles = await this.uploadService.upload(userId, targetDir, files);\n\n      return await this.solutionsRepository.createSolution({\n        data: {\n          author: {\n            connect: { id: userId },\n          },\n          homework: {\n            connect: { id: homeworkId },\n          },\n          files: {\n            connect: uploadedFiles.map((image) => {\n              return { id: image.id };\n            }),\n          },\n        },\n      });\n    } catch (error) {\n      console.error(error);\n      await Promise.all(\n        uploadedFiles.map(async (file) => this.uploadService.delete(file.id)),\n      );\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Updating an existing Solution class object\n   * @param {string} id the unique identifier of the Solution class object to update\n   * @param {string} userId the unique identifier of the user uploading the solution\n   * @param {EditSolutionDto} editSolutionDto new object parameters that need to be applied\n   * @param {Express.Multer.File[]} files files attached to an object of the Solution class\n   * @return {*} updated object of the Solution class\n   * @memberof SolutionsService\n   */\n  async updateSolution(\n    id: string,\n    userId: string,\n    editSolutionDto: EditSolutionDto,\n    files: Express.Multer.File[],\n  ) {\n    let uploadedFiles: File[] = [];\n\n    try {\n      const solution = await this.solutionsRepository.findSolution({\n        where: {\n          AND: [{ authorId: userId, homeworkId: editSolutionDto.homeworkId }],\n        },\n      });\n\n      const targetDir = this.getTargetDir(userId);\n      uploadedFiles = await this.uploadService.upload(userId, targetDir, files);\n\n      const res = await this.solutionsRepository.updateSolution({\n        where: { id },\n        data: {\n          author: {\n            connect: { id: userId },\n          },\n          homework: {\n            connect: { id: editSolutionDto.homeworkId },\n          },\n          files: {\n            connect: uploadedFiles.map((image) => {\n              return { id: image.id };\n            }),\n          },\n        },\n      });\n\n      await Promise.all(\n        solution.files.map(async (file) => this.uploadService.delete(file.id)),\n      );\n\n      return res;\n    } catch (error) {\n      console.error(error);\n      await Promise.all(\n        uploadedFiles.map(async (file) => this.uploadService.delete(file.id)),\n      );\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Deleting an existing object of the Solution class\n   * @param {string} id the unique ID of the Solution object to delete\n   * @memberof SolutionsService\n   */\n  async deleteSolution(id: string) {\n    const solution = await this.solutionsRepository.findSolution({\n      where: { id },\n    });\n\n    try {\n      await this.solutionsRepository.deleteSolution({ where: { id } });\n\n      await Promise.all(\n        solution.files.map(async (file) => this.uploadService.delete(file.id)),\n      );\n    } catch (error) {\n      console.error(error);\n      throw new InternalServerErrorException();\n    }\n  }\n\n  private getTargetDir = (userId: string) => {\n    return join('solutions', userId);\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TeacherResponsesController.html":{"url":"controllers/TeacherResponsesController.html","title":"controller - TeacherResponsesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TeacherResponsesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teacher-responses/teacher-responses.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                responses\n            \n\n\n            \n                Description\n            \n            \n                A controller for processing requests for manipulating objects of the TeacherResponse class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteResponse\n                            \n                            \n                                    \n                                    Async\n                                getResponses\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateResponse\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteResponse(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.controller.ts:87\n                        \n                    \n\n\n            \n                \n                        Handler for a request to delete an object of the TeacherResponse class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique ID of the TeacherResponse object to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getResponses\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponses(props: FindResponseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Handler for the request to receive all events with certain parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindResponseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    a set of parameters that the desired reponses should have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a list of objects of the TeacherResponse class that match the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateResponse(id: string, responseDto: EditResponseDto, files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@Put()\n                \n            \n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Handler for an update request for an existing object of the TeacherResponse class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique ID of the TeacherResponse object to update\n\n                                            \n                                        \n                                        \n                                                responseDto\n                                            \n                                                            EditResponseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    an object containing new information about the object\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files attached to an object of the TeacherResponse class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                information about the updated TeacherResponse class object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        uploadResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadResponse(responseDto: EditResponseDto, files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.controller.ts:56\n                        \n                    \n\n\n            \n                \n                        Handler for the request to create a new object of the TeacherResponse class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                responseDto\n                                            \n                                                            EditResponseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    a set of parameters required to create an object of the TeacherResponse class\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files attached to an object of the TeacherResponse class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                information about the new TeacherResponse class object\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Post,\n  Put,\n  Query,\n  UploadedFiles,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { TeacherResponsesService } from './teacher-responses.service';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { ROLES } from 'src/auth/roles/roles.enum';\nimport { FindResponseDto } from './dto/find-response.dto';\nimport { EditResponseDto } from './dto/edit-response.dto';\nimport { FilesInterceptor } from '@nestjs/platform-express';\n\n/**\n * A controller for processing requests for manipulating objects of the TeacherResponse class\n * @export\n * @class TeacherResponsesController\n */\n@Roles(ROLES.ADMIN, ROLES.TEACHER)\n@Controller('responses')\nexport class TeacherResponsesController {\n  constructor(\n    private readonly teacherResponsesService: TeacherResponsesService,\n  ) {}\n\n  /**\n   * Handler for the request to receive all events with certain parameters\n   * @param {FindResponseDto} props a set of parameters that the desired reponses should have\n   * @return {*} a list of objects of the TeacherResponse class that match the request parameters\n   * @memberof TeacherResponsesController\n   */\n  @Get()\n  async getResponses(props: FindResponseDto) {\n    return (await this.teacherResponsesService.findResponses(props)).map(\n      (response) => ({\n        ...response,\n        files: response.files.map((file) => file.url),\n      }),\n    );\n  }\n\n  /**\n   * Handler for the request to create a new object of the TeacherResponse class\n   * @param {EditResponseDto} responseDto a set of parameters required to create an object of the TeacherResponse class\n   * @param {Express.Multer.File[]} files  files attached to an object of the TeacherResponse class\n   * @return {*} information about the new TeacherResponse class object\n   * @memberof TeacherResponsesController\n   */\n  @UseInterceptors(FilesInterceptor('files'))\n  @Post()\n  async uploadResponse(\n    @Body() responseDto: EditResponseDto,\n    @UploadedFiles() files: Express.Multer.File[],\n  ) {\n    return this.teacherResponsesService.uploadResponse(responseDto, files);\n  }\n\n  /**\n   * Handler for an update request for an existing object of the TeacherResponse class\n   * @param {string} id the unique ID of the TeacherResponse object to update\n   * @param {EditResponseDto} responseDto  an object containing new information about the object\n   * @param {Express.Multer.File[]} files files attached to an object of the TeacherResponse class\n   * @return {*} information about the updated TeacherResponse class object\n   * @memberof TeacherResponsesController\n   */\n  @UseInterceptors(FilesInterceptor('files'))\n  @Put()\n  async updateResponse(\n    @Query('id') id: string,\n    @Body() responseDto: EditResponseDto,\n    @UploadedFiles() files: Express.Multer.File[],\n  ) {\n    return this.teacherResponsesService.updateReponse(id, responseDto, files);\n  }\n\n  /**\n   * Handler for a request to delete an object of the TeacherResponse class\n   * @param {string} id the unique ID of the TeacherResponse object to delete\n   * @memberof TeacherResponsesController\n   */\n  @Delete()\n  async deleteResponse(@Query('id') id: string) {\n    return this.teacherResponsesService.deleteResponse(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TeacherResponsesModule.html":{"url":"modules/TeacherResponsesModule.html","title":"module - TeacherResponsesModule","body":"\n                   \n\n\n\n\n    Modules\n    TeacherResponsesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TeacherResponsesModule\n\n\n\ncluster_TeacherResponsesModule_providers\n\n\n\ncluster_TeacherResponsesModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nTeacherResponsesModule\n\nTeacherResponsesModule\n\nTeacherResponsesModule -->\n\nPrismaModule->TeacherResponsesModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nTeacherResponsesModule -->\n\nUploadModule->TeacherResponsesModule\n\n\n\n\n\nTeacherResponsesRepository\n\nTeacherResponsesRepository\n\nTeacherResponsesModule -->\n\nTeacherResponsesRepository->TeacherResponsesModule\n\n\n\n\n\nTeacherResponsesService\n\nTeacherResponsesService\n\nTeacherResponsesModule -->\n\nTeacherResponsesService->TeacherResponsesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/teacher-responses/teacher-responses.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            A module for manipulating objects of the TeacherResponse class\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TeacherResponsesRepository\n                        \n                        \n                            TeacherResponsesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TeacherResponsesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UploadModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TeacherResponsesService } from './teacher-responses.service';\nimport { TeacherResponsesController } from './teacher-responses.controller';\nimport { PrismaModule } from 'src/database/prisma.module';\nimport { UploadModule } from 'src/upload/upload.module';\nimport { TeacherResponsesRepository } from './teacher-responses.repository';\n\n/**\n * A module for manipulating objects of the TeacherResponse class\n * @export\n * @class TeacherResponsesModule\n */\n@Module({\n  controllers: [TeacherResponsesController],\n  providers: [TeacherResponsesService, TeacherResponsesRepository],\n  imports: [PrismaModule, UploadModule],\n})\nexport class TeacherResponsesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeacherResponsesRepository.html":{"url":"injectables/TeacherResponsesRepository.html","title":"injectable - TeacherResponsesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TeacherResponsesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teacher-responses/teacher-responses.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                A repository containing methods for manipulating objects of the TeacherResponse class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTeacherResponse\n                            \n                            \n                                    Async\n                                deleteTeacherResponse\n                            \n                            \n                                    Async\n                                findTeacherResponse\n                            \n                            \n                                    Async\n                                findTeacherResponses\n                            \n                            \n                                    Async\n                                updateTeacherResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/teacher-responses/teacher-responses.repository.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTeacherResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTeacherResponse(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.repository.ts:22\n                        \n                    \n\n\n            \n                \n                        Creating a new object of the TeacherResponse class\n    data: Prisma.TeacherResponseCreateInput;\n  }} params parameters of the new response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters of the new response\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a new response that has been created\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTeacherResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTeacherResponse(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.repository.ts:98\n                        \n                    \n\n\n            \n                \n                        Method for deleting an existing TeacherResponse class object\n    where: Prisma.TeacherResponseWhereUniqueInput;\n  }} params parameters that can be used to uniquely identify the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters that can be used to uniquely identify the response\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a deleted object of the TeacherResponse class\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findTeacherResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    findTeacherResponse(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.repository.ts:62\n                        \n                    \n\n\n            \n                \n                        Method for getting a single object of the TeacherResponse class corresponding to the request parameters\n    where?: Prisma.TeacherResponseWhereInput;\n  }} params the parameters that the object you are looking for should have\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters that the object you are looking for should have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the first object of the TeacherResponse class that fits the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findTeacherResponses\n                        \n                    \n                \n            \n            \n                \n                        \n                    findTeacherResponses(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.repository.ts:41\n                        \n                    \n\n\n            \n                \n                        A method for searching for all responses that match the passed parameters\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.TeacherResponseWhereUniqueInput;\n    where?: Prisma.TeacherResponseWhereInput;\n    orderBy?: Prisma.TeacherResponseOrderByWithRelationInput;\n  }} params the parameters of the desired responses, as well as the request parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the desired responses, as well as the request parameters\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                all responses that fit the search\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateTeacherResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTeacherResponse(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.repository.ts:82\n                        \n                    \n\n\n            \n                \n                        Method for updating an existing TeacherResponse class object\n    where: Prisma.TeacherResponseWhereUniqueInput;\n    data: Prisma.TeacherResponseUpdateInput;\n  }} params the parameters of the response to update, as well as new data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the response to update, as well as new data\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                updated TeacherResponse class object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/database/prisma.service';\n\n/**\n * A repository containing methods for manipulating objects of the TeacherResponse class\n * @export\n * @class TeacherResponsesRepository\n */\n@Injectable()\nexport class TeacherResponsesRepository {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  /**\n   * Creating a new object of the TeacherResponse class\n   * @param {{\n   *     data: Prisma.TeacherResponseCreateInput;\n   *   }} params parameters of the new response\n   * @return {*} a new response that has been created\n   * @memberof TeacherResponsesRepository\n   */\n  async createTeacherResponse(params: {\n    data: Prisma.TeacherResponseCreateInput;\n  }) {\n    const { data } = params;\n    return this.prismaService.teacherResponse.create({ data });\n  }\n\n  /**\n   * A method for searching for all responses that match the passed parameters\n   * @param {{\n   *     skip?: number;\n   *     take?: number;\n   *     cursor?: Prisma.TeacherResponseWhereUniqueInput;\n   *     where?: Prisma.TeacherResponseWhereInput;\n   *     orderBy?: Prisma.TeacherResponseOrderByWithRelationInput;\n   *   }} params the parameters of the desired responses, as well as the request parameters\n   * @return {*} all responses that fit the search\n   * @memberof TeacherResponsesRepository\n   */\n  async findTeacherResponses(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.TeacherResponseWhereUniqueInput;\n    where?: Prisma.TeacherResponseWhereInput;\n    orderBy?: Prisma.TeacherResponseOrderByWithRelationInput;\n  }) {\n    return this.prismaService.teacherResponse.findMany({\n      ...params,\n      include: { files: true },\n    });\n  }\n\n  /**\n   * Method for getting a single object of the TeacherResponse class corresponding to the request parameters\n   * @param {{\n   *     where?: Prisma.TeacherResponseWhereInput;\n   *   }} params the parameters that the object you are looking for should have\n   * @return {*} the first object of the TeacherResponse class that fits the request parameters\n   * @memberof TeacherResponsesRepository\n   */\n  async findTeacherResponse(params: {\n    where?: Prisma.TeacherResponseWhereInput;\n  }) {\n    return (\n      await this.prismaService.teacherResponse.findMany({\n        ...params,\n        include: { files: true },\n      })\n    ).at(0);\n  }\n\n  /**\n   * Method for updating an existing TeacherResponse class object\n   * @param {{\n   *     where: Prisma.TeacherResponseWhereUniqueInput;\n   *     data: Prisma.TeacherResponseUpdateInput;\n   *   }} params the parameters of the response to update, as well as new data\n   * @return {*} updated TeacherResponse class object\n   * @memberof TeacherResponsesRepository\n   */\n  async updateTeacherResponse(params: {\n    where: Prisma.TeacherResponseWhereUniqueInput;\n    data: Prisma.TeacherResponseUpdateInput;\n  }) {\n    const { where, data } = params;\n    return this.prismaService.teacherResponse.update({ where, data });\n  }\n\n  /**\n   * Method for deleting an existing TeacherResponse class object\n   * @param {{\n   *     where: Prisma.TeacherResponseWhereUniqueInput;\n   *   }} params parameters that can be used to uniquely identify the response\n   * @return {*} a deleted object of the TeacherResponse class\n   * @memberof TeacherResponsesRepository\n   */\n  async deleteTeacherResponse(params: {\n    where: Prisma.TeacherResponseWhereUniqueInput;\n  }) {\n    const { where } = params;\n    return this.prismaService.teacherResponse.delete({ where });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeacherResponsesService.html":{"url":"injectables/TeacherResponsesService.html","title":"injectable - TeacherResponsesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TeacherResponsesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/teacher-responses/teacher-responses.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service layer for manipulating objects of the TeacherResponse class\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getTargetDir\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteResponse\n                            \n                            \n                                    Async\n                                findResponse\n                            \n                            \n                                    Async\n                                findResponses\n                            \n                            \n                                    Async\n                                updateReponse\n                            \n                            \n                                    Async\n                                uploadResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(teacherResponsesRepository: TeacherResponsesRepository, uploadService: UploadService)\n                    \n                \n                        \n                            \n                                Defined in src/teacher-responses/teacher-responses.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teacherResponsesRepository\n                                                  \n                                                        \n                                                                        TeacherResponsesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        UploadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteResponse(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.service.ts:173\n                        \n                    \n\n\n            \n                \n                        Deleting an existing object of the TeacherResponse class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique ID of the TeacherResponse object to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    findResponse(props: FindResponseDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Getting a single object of the TeacherResponse class that has the necessary parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindResponseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters that the desired object of the TeacherResponse class must have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the first object of the TeacherResponse class that corresponds to the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findResponses\n                        \n                    \n                \n            \n            \n                \n                        \n                    findResponses(props: FindResponseDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Getting all objects of the TeacherResponse class that have specific parameter values\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindResponseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the desired data of the TeacherResponse object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                all TeacherResponse objects matching the query\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateReponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateReponse(id: string, responseDto: EditResponseDto, files: Express.Multer.File[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Updating an existing TeacherResponse class object\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique identifier of the TeacherResponse class object to update\n\n                                            \n                                        \n                                        \n                                                responseDto\n                                            \n                                                            EditResponseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    new object parameters that need to be applied\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files attached to an object of the TeacherResponse class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                updated object of the TeacherResponse class\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadResponse(responseDto: EditResponseDto, files: Express.Multer.File[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/teacher-responses/teacher-responses.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Creating a new object of the TeacherResponse class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                responseDto\n                                            \n                                                            EditResponseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    object containing information about the new response\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files attached to an object of the TeacherResponse class\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                a new object of the TeacherResponse class\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getTargetDir\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/teacher-responses/teacher-responses.service.ts:193\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { TeacherResponsesRepository } from './teacher-responses.repository';\nimport { FindResponseDto } from './dto/find-response.dto';\nimport { EditResponseDto } from './dto/edit-response.dto';\nimport { File } from '@prisma/client';\nimport { UploadService } from 'src/upload/upload.service';\nimport { join } from 'path';\n\n/**\n * A service layer for manipulating objects of the TeacherResponse class\n * @export\n * @class TeacherResponsesService\n */\n@Injectable()\nexport class TeacherResponsesService {\n  constructor(\n    private readonly teacherResponsesRepository: TeacherResponsesRepository,\n    private readonly uploadService: UploadService,\n  ) {}\n\n  /**\n   * Getting all objects of the TeacherResponse class that have specific parameter values\n   * @param {FindResponseDto} props the desired data of the TeacherResponse object\n   * @return {*} all TeacherResponse objects matching the query\n   * @memberof TeacherResponsesService\n   */\n  async findResponses(props: FindResponseDto) {\n    try {\n      return await this.teacherResponsesRepository.findTeacherResponses({\n        where: { ...props },\n      });\n    } catch (error) {\n      console.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  /**\n   * Getting a single object of the TeacherResponse class that has the necessary parameters\n   * @param {FindResponseDto} props parameters that the desired object of the TeacherResponse class must have\n   * @return {*} the first object of the TeacherResponse class that corresponds to the request parameters\n   * @memberof TeacherResponsesService\n   */\n  async findResponse(props: FindResponseDto) {\n    try {\n      return await this.teacherResponsesRepository.findTeacherResponse({\n        where: { ...props },\n      });\n    } catch (error) {\n      console.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  /**\n   * Creating a new object of the TeacherResponse class\n   * @param {EditResponseDto} responseDto object containing information about the new response\n   * @param {Express.Multer.File[]} files files attached to an object of the TeacherResponse class\n   * @return {*} a new object of the TeacherResponse class\n   * @memberof TeacherResponsesService\n   */\n  async uploadResponse(\n    responseDto: EditResponseDto,\n    files: Express.Multer.File[],\n  ) {\n    const { teacherId, solutionId } = responseDto;\n    let uploadedFiles: File[] = [];\n\n    try {\n      const targetDir = this.getTargetDir(teacherId);\n      uploadedFiles = await this.uploadService.upload(\n        teacherId,\n        targetDir,\n        files,\n      );\n\n      // TODO: add a trigger to automatically add and remove a response to the solution\n      return await this.teacherResponsesRepository.createTeacherResponse({\n        data: {\n          text: responseDto.text,\n          score: Number(responseDto.score),\n          teacher: {\n            connect: { id: teacherId },\n          },\n          solution: {\n            connect: { id: solutionId },\n          },\n          files: {\n            connect: uploadedFiles.map((file) => {\n              return { id: file.id };\n            }),\n          },\n        },\n      });\n    } catch (error) {\n      console.error(error);\n      await Promise.all(\n        uploadedFiles.map(async (file) => this.uploadService.delete(file.id)),\n      );\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Updating an existing TeacherResponse class object\n   * @param {string} id the unique identifier of the TeacherResponse class object to update\n   * @param {EditResponseDto} responseDto new object parameters that need to be applied\n   * @param {Express.Multer.File[]} files files attached to an object of the TeacherResponse class\n   * @return {*} updated object of the TeacherResponse class\n   * @memberof TeacherResponsesService\n   */\n  async updateReponse(\n    id: string,\n    responseDto: EditResponseDto,\n    files: Express.Multer.File[],\n  ) {\n    const { solutionId, teacherId } = responseDto;\n    let uploadedFiles: File[] = [];\n\n    try {\n      const response =\n        await this.teacherResponsesRepository.findTeacherResponse({\n          where: { AND: [{ id, solutionId, teacherId }] },\n        });\n\n      const targetDir = this.getTargetDir(teacherId);\n      uploadedFiles = await this.uploadService.upload(\n        teacherId,\n        targetDir,\n        files,\n      );\n\n      await Promise.all(\n        response.files.map(async (file) => this.uploadService.delete(file.id)),\n      );\n\n      return await this.teacherResponsesRepository.updateTeacherResponse({\n        where: { id: response.id },\n        data: {\n          text: responseDto.text,\n          score: Number(responseDto.score),\n          teacher: {\n            connect: { id: teacherId },\n          },\n          solution: {\n            connect: { id: solutionId },\n          },\n          files: {\n            connect: uploadedFiles.map((file) => {\n              return { id: file.id };\n            }),\n          },\n        },\n      });\n    } catch (error) {\n      console.error(error);\n      await Promise.all(\n        uploadedFiles.map((file) => this.uploadService.delete(file.id)),\n      );\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Deleting an existing object of the TeacherResponse class\n   * @param {string} id the unique ID of the TeacherResponse object to delete\n   * @memberof TeacherResponsesService\n   */\n  async deleteResponse(id: string) {\n    try {\n      const response =\n        await this.teacherResponsesRepository.findTeacherResponse({\n          where: { id },\n        });\n\n      await Promise.all(\n        response.files.map(async (file) => this.uploadService.delete(file.id)),\n      );\n\n      await this.teacherResponsesRepository.deleteTeacherResponse({\n        where: { id },\n      });\n    } catch (error) {\n      console.error(error);\n      throw new InternalServerErrorException();\n    }\n  }\n\n  private getTargetDir = (userId: string) => {\n    return join('responses', userId);\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEventDto.html":{"url":"classes/UpdateEventDto.html","title":"class - UpdateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dto/update-event.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object with parameters for updating the event\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateEventDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateEventDto } from './create-event.dto';\n\n/**\n * An object with parameters for updating the event\n * @export\n * @class UpdateEventDto\n * @extends {PartialType(CreateEventDto)}\n */\nexport class UpdateEventDto extends PartialType(CreateEventDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateHomeworkDto.html":{"url":"classes/UpdateHomeworkDto.html","title":"class - UpdateHomeworkDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateHomeworkDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/homeworks/dto/update-homework.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                An object with parameters for updating the homework\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateHomeworkDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateHomeworkDto } from './create-homework.dto';\n\n/**\n * An object with parameters for updating the homework\n * @export\n * @class UpdateHomeworkDto\n * @extends {PartialType(CreateHomeworkDto)}\n */\nexport class UpdateHomeworkDto extends PartialType(CreateHomeworkDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadController.html":{"url":"controllers/UploadController.html","title":"controller - UploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                media\n            \n\n\n            \n                Description\n            \n            \n                A controller with functions for manipulating files on the server\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                download\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(fileId: string, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':fileId')\n                \n            \n\n                    \n                        \n                            Defined in src/upload/upload.controller.ts:22\n                        \n                    \n\n\n            \n                \n                        Downloading files located on the server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fileId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the ID of the UploadedFile class object\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    response from the server\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Res } from '@nestjs/common';\nimport { UploadService } from './upload.service';\nimport { Response } from 'express';\n\n/**\n * A controller with functions for manipulating files on the server\n * @export\n * @class UploadController\n */\n@Controller('media')\nexport class UploadController {\n  constructor(private readonly uploadService: UploadService) {}\n\n  /**\n   * Downloading files located on the server\n   * @param {string} fileId the ID of the UploadedFile class object\n   * @param {Response} response response from the server\n   * @return {Promise}\n   * @memberof UploadController\n   */\n  @Get(':fileId')\n  async download(\n    @Param('fileId') fileId: string,\n    @Res() response: Response,\n  ): Promise {\n    return await this.uploadService.download(fileId.replace('/', ''), response);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadModule.html":{"url":"modules/UploadModule.html","title":"module - UploadModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_providers\n\n\n\ncluster_UploadModule_imports\n\n\n\ncluster_UploadModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUploadModule\n\nUploadModule\n\nUploadModule -->\n\nPrismaModule->UploadModule\n\n\n\n\n\nUploadService \n\nUploadService \n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\nUploadRepository\n\nUploadRepository\n\nUploadModule -->\n\nUploadRepository->UploadModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nUploadModule -->\n\nUploadService->UploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/upload/upload.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            A module for manipulating objects of the File class\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadRepository\n                        \n                        \n                            UploadService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UploadService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UploadService } from './upload.service';\nimport { UploadController } from './upload.controller';\nimport { PrismaModule } from 'src/database/prisma.module';\nimport { UploadRepository } from './upload.repository';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from 'joi';\n\n/**\n * A module for manipulating objects of the File class\n * @export\n * @class UploadModule\n */\n@Module({\n  controllers: [UploadController],\n  providers: [UploadService, UploadRepository],\n  exports: [UploadService],\n  imports: [\n    PrismaModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      validationSchema: Joi.object({\n        UPLOAD_LOCATION: Joi.string().required(),\n      }),\n      envFilePath: './src/upload/.env',\n    }),\n  ],\n})\nexport class UploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadRepository.html":{"url":"injectables/UploadRepository.html","title":"injectable - UploadRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/upload.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                A repository containing methods for manipulating objects of the File class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFile\n                            \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                findFile\n                            \n                            \n                                    Async\n                                findFiles\n                            \n                            \n                                    Async\n                                updateFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/upload/upload.repository.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    createFile(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.repository.ts:20\n                        \n                    \n\n\n            \n                \n                        Creating a new object of the File class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters of the new uploaded file\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a new file that has been created\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.repository.ts:94\n                        \n                    \n\n\n            \n                \n                        Method for deleting an existing File class object\n    where: Prisma.FileWhereUniqueInput;\n  }} params parameters that can be used to uniquely identify the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters that can be used to uniquely identify the file\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a deleted object of the File class\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    findFile(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.repository.ts:59\n                        \n                    \n\n\n            \n                \n                        Method for getting a single object of the File class corresponding to the request parameters\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.FileWhereUniqueInput;\n    where?: Prisma.FileWhereInput;\n    orderBy?: Prisma.FileOrderByWithRelationInput;\n  }} params the parameters that the object you are looking for should have\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters that the object you are looking for should have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the first object of the File class that fits the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    findFiles(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.repository.ts:37\n                        \n                    \n\n\n            \n                \n                        A method for searching for all files that match the passed parameters\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.FileWhereUniqueInput;\n    where?: Prisma.FileWhereInput;\n    orderBy?: Prisma.FileOrderByWithRelationInput;\n  }} params the parameters of the desired files, as well as the request parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the desired files, as well as the request parameters\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                all files that fit the search\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateFile(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.repository.ts:78\n                        \n                    \n\n\n            \n                \n                        Method for updating an existing File class object\n    where: Prisma.FileWhereUniqueInput;\n    data: Prisma.FileUpdateInput;\n  }} params the parameters of the response to update, as well as new data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the response to update, as well as new data\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                updated File class object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { File, Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/database/prisma.service';\n\n/**\n * A repository containing methods for manipulating objects of the File class\n * @export\n * @class UploadRepository\n */\n@Injectable()\nexport class UploadRepository {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  /**\n   * Creating a new object of the File class\n   * @param {{ data: Prisma.FileCreateInput }} params parameters of the new uploaded file\n   * @return {Promise} a new file that has been created\n   * @memberof UploadRepository\n   */\n  async createFile(params: { data: Prisma.FileCreateInput }): Promise {\n    const { data } = params;\n    return this.prismaService.file.create({ data });\n  }\n\n  /**\n   * A method for searching for all files that match the passed parameters\n   * @param {{\n   *     skip?: number;\n   *     take?: number;\n   *     cursor?: Prisma.FileWhereUniqueInput;\n   *     where?: Prisma.FileWhereInput;\n   *     orderBy?: Prisma.FileOrderByWithRelationInput;\n   *   }} params the parameters of the desired files, as well as the request parameters\n   * @return {Promise} all files that fit the search\n   * @memberof UploadRepository\n   */\n  async findFiles(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.FileWhereUniqueInput;\n    where?: Prisma.FileWhereInput;\n    orderBy?: Prisma.FileOrderByWithRelationInput;\n  }): Promise {\n    return this.prismaService.file.findMany({ ...params });\n  }\n\n  /**\n   * Method for getting a single object of the File class corresponding to the request parameters\n   * @param {{\n   *     skip?: number;\n   *     take?: number;\n   *     cursor?: Prisma.FileWhereUniqueInput;\n   *     where?: Prisma.FileWhereInput;\n   *     orderBy?: Prisma.FileOrderByWithRelationInput;\n   *   }} params the parameters that the object you are looking for should have\n   * @return {Promise} the first object of the File class that fits the request parameters\n   * @memberof UploadRepository\n   */\n  async findFile(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.FileWhereUniqueInput;\n    where?: Prisma.FileWhereInput;\n    orderBy?: Prisma.FileOrderByWithRelationInput;\n  }): Promise {\n    return (await this.prismaService.file.findMany({ ...params })).at(0);\n  }\n\n  /**\n   * Method for updating an existing File class object\n   * @param {{\n   *     where: Prisma.FileWhereUniqueInput;\n   *     data: Prisma.FileUpdateInput;\n   *   }} params the parameters of the response to update, as well as new data\n   * @return {Promise} updated File class object\n   * @memberof UploadRepository\n   */\n  async updateFile(params: {\n    where: Prisma.FileWhereUniqueInput;\n    data: Prisma.FileUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prismaService.file.update({ where, data });\n  }\n\n  /**\n   * Method for deleting an existing File class object\n   * @param {{\n   *     where: Prisma.FileWhereUniqueInput;\n   *   }} params parameters that can be used to uniquely identify the file\n   * @return {Promise} a deleted object of the File class\n   * @memberof UploadRepository\n   */\n  async deleteFile(params: {\n    where: Prisma.FileWhereUniqueInput;\n  }): Promise {\n    const { where } = params;\n    return this.prismaService.file.delete({ where });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadService.html":{"url":"injectables/UploadService.html","title":"injectable - UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/upload.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service layer for manipulating objects of the File class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                download\n                            \n                            \n                                    Async\n                                getFiles\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, uploadRepository: UploadRepository)\n                    \n                \n                        \n                            \n                                Defined in src/upload/upload.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadRepository\n                                                  \n                                                        \n                                                                        UploadRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Deleting files from the server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique identifier of the File class object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(id: string, response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Issuing the file contained on the server to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique identifier of the File class object\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    a Response object containing information about the server's response to the request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFiles(props: FindFileDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Getting all objects of the File class that have specific parameter values\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindFileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the desired data of the File object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                all File objects matching the query\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(ownerId: string, targetDir: string, files: Express.Multer.File[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Uploading files from users to the server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ownerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the unique identifier of the user who owns the file\n\n                                            \n                                        \n                                        \n                                                targetDir\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the target folder to which the file will be uploaded\n\n                                            \n                                        \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    files to download\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                objects containing information about uploaded files\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnprocessableEntityException } from '@nestjs/common';\nimport { UploadRepository } from './upload.repository';\nimport { File } from '@prisma/client';\nimport { FindFileDto } from './dto/find-file.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { extname, join } from 'path';\nimport { existsSync, mkdirSync, rmSync } from 'fs';\nimport { randomUUID } from 'crypto';\nimport { writeFile } from 'fs/promises';\nimport { Response } from 'express';\n\n/**\n * A service layer for manipulating objects of the File class\n * @export\n * @class UploadService\n */\n@Injectable()\nexport class UploadService {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly uploadRepository: UploadRepository,\n  ) {}\n\n  /**\n   * Getting all objects of the File class that have specific parameter values\n   * @param {FindFileDto} props the desired data of the File object\n   * @return {Promise} all File objects matching the query\n   * @memberof UploadService\n   */\n  async getFiles(props: FindFileDto): Promise {\n    return this.uploadRepository.findFiles({ where: { ...props } });\n  }\n\n  /**\n   * Issuing the file contained on the server to the user\n   * @param {string} id the unique identifier of the File class object\n   * @param {Response} response a Response object containing information about the server's response to the request\n   * @memberof UploadService\n   */\n  async download(id: string, response: Response) {\n    const file = await this.uploadRepository.findFile({ where: { id } });\n    const absolute = join(process.cwd(), file.relative);\n    response.sendFile(absolute);\n  }\n\n  /**\n   * Uploading files from users to the server\n   * @param {string} ownerId the unique identifier of the user who owns the file\n   * @param {string} targetDir the target folder to which the file will be uploaded\n   * @param {Express.Multer.File[]} files files to download\n   * @return {Promise} objects containing information about uploaded files\n   * @memberof UploadService\n   */\n  async upload(\n    ownerId: string,\n    targetDir: string,\n    files: Express.Multer.File[],\n  ): Promise {\n    const targetLocation = join(\n      this.configService.get('UPLOAD_LOCATION'),\n      targetDir,\n    );\n    const absolutePath = join(process.cwd(), targetLocation);\n\n    if (!existsSync(absolutePath)) {\n      mkdirSync(absolutePath, { recursive: true });\n    }\n\n    const result = await Promise.all(\n      files.map(async (file) => {\n        const extension = extname(file.originalname);\n        const uuid = randomUUID();\n        const filename = `${uuid}${extension}`;\n        const fileAbsolute = join(absolutePath, filename);\n        const fileRelative = join(targetLocation, filename);\n\n        try {\n          await writeFile(fileAbsolute, file.buffer);\n\n          const res = await this.uploadRepository.createFile({\n            data: {\n              owner: { connect: { id: ownerId } },\n              relative: fileRelative,\n              url: '',\n              size: file.size,\n            },\n          });\n\n          return await this.uploadRepository.updateFile({\n            where: { id: res.id },\n            data: { url: `http://localhost:3000/media/${res.id}` },\n          });\n        } catch (error) {\n          console.error(error);\n          rmSync(fileAbsolute, { recursive: true });\n          throw new UnprocessableEntityException();\n        }\n      }),\n    );\n\n    return result;\n  }\n\n  /**\n   * Deleting files from the server\n   * @param {string} id the unique identifier of the File class object\n   * @memberof UploadService\n   */\n  async delete(id: string): Promise {\n    const file = await this.uploadRepository.findFile({ where: { id } });\n    const { relative } = file;\n    const path = join(process.cwd(), relative);\n\n    if (!existsSync(path)) {\n      throw new Error(`The file you are looking for was not found: ${path}`);\n    }\n\n    try {\n      rmSync(path, { recursive: true });\n      await this.uploadRepository.deleteFile({ where: { id } });\n    } catch (error) {\n      console.log(error);\n      throw new UnprocessableEntityException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                A controller for processing requests for manipulating objects of the User class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createUser\n                            \n                            \n                                    \n                                    Async\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(registerUserDto: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/users/users.controller.ts:34\n                        \n                    \n\n\n            \n                \n                        Handler for the request to create a new object of the User class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    a set of parameters required for user registration\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                information about the new User class object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(userDto: FindUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/users/users.controller.ts:23\n                        \n                    \n\n\n            \n                \n                        Handler for the request to receive all users with certain parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userDto\n                                            \n                                                            FindUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    a set of parameters that the desired users should have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a list of objects of the User class that match the request parameters\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { User } from '@prisma/client';\nimport { FindUserDto } from './dto/find-user.dto';\nimport { RegisterUserDto } from './dto/register-user.dto';\n\n/**\n * A controller for processing requests for manipulating objects of the User class\n * @export\n * @class UsersController\n */\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Handler for the request to receive all users with certain parameters\n   * @param {FindUserDto} userDto a set of parameters that the desired users should have\n   * @return {Promise} a list of objects of the User class that match the request parameters\n   * @memberof UsersController\n   */\n  @Get()\n  async getUsers(@Body() userDto: FindUserDto): Promise {\n    return this.usersService.findUsers(userDto);\n  }\n\n  /**\n   * Handler for the request to create a new object of the User class\n   * @param {RegisterUserDto} registerUserDto a set of parameters required for user registration\n   * @return {Promise} information about the new User class object\n   * @memberof UsersController\n   */\n  @Post()\n  async createUser(@Body() registerUserDto: RegisterUserDto): Promise {\n    return this.usersService.createUser(registerUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersRepository\n\nUsersRepository\n\nUsersModule -->\n\nUsersRepository->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            A module for manipulating objects of the User class\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersRepository\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { UsersRepository } from './users.repository';\nimport { PrismaModule } from 'src/database/prisma.module';\n\n/**\n * A module for manipulating objects of the User class\n * @export\n * @class UsersModule\n */\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, UsersRepository],\n  imports: [PrismaModule],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersRepository.html":{"url":"injectables/UsersRepository.html","title":"injectable - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/users.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                A repository containing methods for manipulating objects of the User class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findUser\n                            \n                            \n                                    Async\n                                findUsers\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/users/users.repository.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/users/users.repository.ts:20\n                        \n                    \n\n\n            \n                \n                        Creating a new object of the User class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters of the new user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a new user that has been created\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/users/users.repository.ts:82\n                        \n                    \n\n\n            \n                \n                        Method for deleting an existing User class object\n    where: Prisma.UserWhereUniqueInput;\n  }} params parameters that can be used to uniquely identify the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters that can be used to uniquely identify the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a deleted object of the User class\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUser(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/users/users.repository.ts:53\n                        \n                    \n\n\n            \n                \n                        Method for getting a single object of the User class corresponding to the request parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters that the object you are looking for should have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the first object of the User class that fits the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUsers(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/users/users.repository.ts:37\n                        \n                    \n\n\n            \n                \n                        A method for searching for all users that match the passed parameters\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }} params the parameters of the desired users, as well as the request parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the desired users, as well as the request parameters\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                all users that fit the search\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/users/users.repository.ts:66\n                        \n                    \n\n\n            \n                \n                        Method for updating an existing User class object\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }} params the parameters of the user to update, as well as new data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the parameters of the user to update, as well as new data\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                updated User class object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma, User } from '@prisma/client';\nimport { PrismaService } from 'src/database/prisma.service';\n\n/**\n * A repository containing methods for manipulating objects of the User class\n * @export\n * @class UsersRepository\n */\n@Injectable()\nexport class UsersRepository {\n  constructor(private readonly prisma: PrismaService) {}\n\n  /**\n   * Creating a new object of the User class\n   * @param {{ data: Prisma.UserCreateInput }} params parameters of the new user\n   * @return {Promise} a new user that has been created\n   * @memberof UsersRepository\n   */\n  async createUser(params: { data: Prisma.UserCreateInput }): Promise {\n    const { data } = params;\n    return this.prisma.user.create({ data });\n  }\n\n  /**\n   * A method for searching for all users that match the passed parameters\n   * @param {{\n   *     skip?: number;\n   *     take?: number;\n   *     cursor?: Prisma.UserWhereUniqueInput;\n   *     where?: Prisma.UserWhereInput;\n   *     orderBy?: Prisma.UserOrderByWithRelationInput;\n   *   }} params the parameters of the desired users, as well as the request parameters\n   * @return {Promise} all users that fit the search\n   * @memberof UsersRepository\n   */\n  async findUsers(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise {\n    return this.prisma.user.findMany({ ...params });\n  }\n\n  /**\n   * Method for getting a single object of the User class corresponding to the request parameters\n   * @param {{ where?: Prisma.UserWhereInput }} params the parameters that the object you are looking for should have\n   * @return {Promise} the first object of the User class that fits the request parameters\n   * @memberof UsersRepository\n   */\n  async findUser(params: { where?: Prisma.UserWhereInput }): Promise {\n    return await this.prisma.user.findFirst({ ...params });\n  }\n\n  /**\n   * Method for updating an existing User class object\n   * @param {{\n   *     where: Prisma.UserWhereUniqueInput;\n   *     data: Prisma.UserUpdateInput;\n   *   }} params the parameters of the user to update, as well as new data\n   * @return {Promise} updated User class object\n   * @memberof UsersRepository\n   */\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.user.update({ where, data });\n  }\n\n  /**\n   * Method for deleting an existing User class object\n   * @param {{\n   *     where: Prisma.UserWhereUniqueInput;\n   *   }} params parameters that can be used to uniquely identify the user\n   * @return {Promise} a deleted object of the User class\n   * @memberof UsersRepository\n   */\n  async deleteUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n  }): Promise {\n    const { where } = params;\n    return this.prisma.user.delete({ where });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service layer for manipulating objects of the User class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findUser\n                            \n                            \n                                    Async\n                                findUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: UsersRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/users/users.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        UsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(registerUserDto: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/users/users.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Creating a new object of the User class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    object containing information about the new user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a new object of the User class\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUser(props: FindUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/users/users.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Getting a single object of the User class that has the necessary parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    parameters that the desired object of the User class must have\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the first object of the User class that corresponds to the request parameters\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUsers(props: FindUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/users/users.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Getting all objects of the User class that have specific parameter values\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                props\n                                            \n                                                            FindUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the desired data of the User object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                all User objects matching the query\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { UsersRepository } from './users.repository';\nimport { FindUserDto } from './dto/find-user.dto';\nimport { User } from '@prisma/client';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { genSalt, hash } from 'bcrypt';\n\n/**\n * A service layer for manipulating objects of the User class\n * @export\n * @class UsersService\n */\n@Injectable()\nexport class UsersService {\n  constructor(private readonly usersRepository: UsersRepository) {}\n\n  /**\n   * Getting all objects of the User class that have specific parameter values\n   * @param {FindUserDto} props the desired data of the User object\n   * @return {Promise} all User objects matching the query\n   * @memberof UsersService\n   */\n  async findUsers(props: FindUserDto): Promise {\n    return this.usersRepository.findUsers({ where: { ...props } });\n  }\n\n  /**\n   * Getting a single object of the User class that has the necessary parameters\n   * @param {FindUserDto} props parameters that the desired object of the User class must have\n   * @return {Promise} the first object of the User class that corresponds to the request parameters\n   * @memberof UsersService\n   */\n  async findUser(props: FindUserDto): Promise {\n    return (\n      await this.usersRepository.findUsers({ where: { ...props }, take: 1 })\n    ).at(0);\n  }\n\n  /**\n   * Creating a new object of the User class\n   * @param {RegisterUserDto} registerUserDto object containing information about the new user\n   * @return {Promise} a new object of the User class\n   * @memberof UsersService\n   */\n  async createUser(registerUserDto: RegisterUserDto): Promise {\n    const { email, password, confirmPassword } = registerUserDto;\n    const user = await this.findUser({ email });\n\n    if (user || password !== confirmPassword) {\n      throw new BadRequestException('Invalid data for creating a user');\n    }\n\n    try {\n      const salt = await genSalt(10);\n      const hashedPassword = await hash(String(password), salt);\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { confirmPassword, userRoleId, ...rest } = registerUserDto;\n      return await this.usersRepository.createUser({\n        data: {\n          ...rest,\n          password: hashedPassword,\n          userRole: {\n            connect: { id: userRoleId },\n          },\n        },\n      });\n    } catch (error) {\n      console.error(error);\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/auth/decorators/current-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/current-user.decorator.ts\n            \n            variable\n            getCurrentUserByContext\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ACCESS_ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            class\n            JwtAuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            class\n            LocalAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/guards/role.guard.ts\n            \n            guard\n            RolesGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/roles/dto/create-role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/roles/dto/find-role.dto.ts\n            \n            class\n            FindRoleDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.repository.ts\n            \n            injectable\n            RolesRepository\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/auth/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/users/dto/find-user.dto.ts\n            \n            class\n            FindUserDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/auth/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/users/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/auth/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/users/users.repository.ts\n            \n            injectable\n            UsersRepository\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/auth/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/database/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/decorators/isAfter.decorator.ts\n            \n            class\n            IsAfterConstraint\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/decorators/isAfter.decorator.ts\n            \n            function\n            IsAfter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/match.decorator.ts\n            \n            class\n            MatchConstraint\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/decorators/match.decorator.ts\n            \n            function\n            Match\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/events/dto/create-event.dto.ts\n            \n            class\n            CreateEventDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/events/dto/find-event.dto.ts\n            \n            class\n            FindEventDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/events/dto/update-event.dto.ts\n            \n            class\n            UpdateEventDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/events/events.controller.ts\n            \n            controller\n            EventsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/events/events.repository.ts\n            \n            injectable\n            EventsRepository\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/events/events.service.ts\n            \n            injectable\n            EventsService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/homeworks/dto/create-homework.dto.ts\n            \n            class\n            CreateHomeworkDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/homeworks/dto/find-homework.dto.ts\n            \n            class\n            FindHomeworkDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/homeworks/dto/update-homework.dto.ts\n            \n            class\n            UpdateHomeworkDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/homeworks/homeworks.controller.ts\n            \n            controller\n            HomeworksController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/homeworks/homeworks.repository.ts\n            \n            injectable\n            HomeworksRepository\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/homeworks/homeworks.service.ts\n            \n            injectable\n            HomeworksService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/solutions/dto/edit-solution.dto.ts\n            \n            class\n            EditSolutionDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/solutions/dto/find-solution.dto.ts\n            \n            class\n            FindSolutionDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/solutions/solutions.controller.ts\n            \n            controller\n            SolutionsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/solutions/solutions.repository.ts\n            \n            injectable\n            SolutionsRepository\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/solutions/solutions.service.ts\n            \n            injectable\n            SolutionsService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/teacher-responses/dto/edit-response.dto.ts\n            \n            class\n            EditResponseDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/teacher-responses/dto/find-response.dto.ts\n            \n            class\n            FindResponseDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/teacher-responses/teacher-responses.controller.ts\n            \n            controller\n            TeacherResponsesController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/teacher-responses/teacher-responses.repository.ts\n            \n            injectable\n            TeacherResponsesRepository\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/teacher-responses/teacher-responses.service.ts\n            \n            injectable\n            TeacherResponsesService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/upload/dto/find-file.dto.ts\n            \n            class\n            FindFileDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/upload/upload.controller.ts\n            \n            controller\n            UploadController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/upload/upload.repository.ts\n            \n            injectable\n            UploadRepository\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/upload/upload.service.ts\n            \n            injectable\n            UploadService\n            \n                83 %\n                (5/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @prisma/client : ^5.8.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            multer : ^1.4.5-lts.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            prisma : ^5.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ROLES   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/roles/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ROLES\n                    \n                \n                    \n                        \n                            Currently possible user roles\n\n                        \n                    \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 TEACHER\n                            \n                        \n                        \n                            \n                                Value : TEACHER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsAfter   (src/.../isAfter.decorator.ts)\n                        \n                        \n                            Match   (src/.../match.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Application entry point\n\n\n                \n            \n        \n    \n    src/decorators/isAfter.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsAfter\n                        \n                    \n                \n            \n            \n                \nIsAfter(property: string, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        A decorator to verify that the marked field is a date that is later than the value in the 'property' field\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                property\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the name of the field to compare the current field with\n\n                                            \n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    additional validation parameters\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/decorators/match.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Match\n                        \n                    \n                \n            \n            \n                \nMatch(property: string, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n                        A decorator for checking the equality of the values of the marked field and the field whose name is specified in the 'property' field\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                property\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the name of the field whose value should be equal to the value in the marked field\n\n                                            \n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    additional validation parameters\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_imports\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_HomeworksModule\n\n\n\ncluster_HomeworksModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_SolutionsModule\n\n\n\ncluster_SolutionsModule_providers\n\n\n\ncluster_TeacherResponsesModule\n\n\n\ncluster_TeacherResponsesModule_providers\n\n\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\ncluster_UploadModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nHomeworksModule\n\nHomeworksModule\n\nAppModule -->\n\nHomeworksModule->AppModule\n\n\n\n\n\nSolutionsModule\n\nSolutionsModule\n\nAppModule -->\n\nSolutionsModule->AppModule\n\n\n\n\n\nTeacherResponsesModule\n\nTeacherResponsesModule\n\nAppModule -->\n\nTeacherResponsesModule->AppModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nHomeworksModule -->\n\nUploadModule->HomeworksModule\n\n\n\nSolutionsModule -->\n\nUploadModule->SolutionsModule\n\n\n\nTeacherResponsesModule -->\n\nUploadModule->TeacherResponsesModule\n\n\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUploadService \n\nUploadService \n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nEventsModule -->\n\nPrismaModule->EventsModule\n\n\n\nHomeworksModule -->\n\nPrismaModule->HomeworksModule\n\n\n\nSolutionsModule -->\n\nPrismaModule->SolutionsModule\n\n\n\nTeacherResponsesModule -->\n\nPrismaModule->TeacherResponsesModule\n\n\n\nUploadModule -->\n\nPrismaModule->UploadModule\n\n\n\nRolesModule -->\n\nPrismaModule->RolesModule\n\n\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nEventsRepository\n\nEventsRepository\n\nEventsModule -->\n\nEventsRepository->EventsModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\nHomeworksRepository\n\nHomeworksRepository\n\nHomeworksModule -->\n\nHomeworksRepository->HomeworksModule\n\n\n\n\n\nHomeworksService\n\nHomeworksService\n\nHomeworksModule -->\n\nHomeworksService->HomeworksModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nRolesRepository\n\nRolesRepository\n\nRolesModule -->\n\nRolesRepository->RolesModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nSolutionsRepository\n\nSolutionsRepository\n\nSolutionsModule -->\n\nSolutionsRepository->SolutionsModule\n\n\n\n\n\nSolutionsService\n\nSolutionsService\n\nSolutionsModule -->\n\nSolutionsService->SolutionsModule\n\n\n\n\n\nTeacherResponsesRepository\n\nTeacherResponsesRepository\n\nTeacherResponsesModule -->\n\nTeacherResponsesRepository->TeacherResponsesModule\n\n\n\n\n\nTeacherResponsesService\n\nTeacherResponsesService\n\nTeacherResponsesModule -->\n\nTeacherResponsesService->TeacherResponsesModule\n\n\n\n\n\nUploadRepository\n\nUploadRepository\n\nUploadModule -->\n\nUploadRepository->UploadModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nUploadModule -->\n\nUploadService->UploadModule\n\n\n\n\n\nUsersRepository\n\nUsersRepository\n\nUsersModule -->\n\nUsersRepository->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomeworksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SolutionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TeacherResponsesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TokenPayload   (src/.../auth.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.service.ts\n    \n    \n        \n            \n                \n                    \n                    TokenPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ACCESS_ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            CurrentUser   (src/.../current-user.decorator.ts)\n                        \n                        \n                            getCurrentUserByContext   (src/.../current-user.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ACCESS_ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'accessRoles'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...args: string[]) => SetMetadata(ACCESS_ROLES_KEY, args)\n                    \n                \n\n            \n                \n                    A decorator that designates a path or group of paths that are only available to users with specific roles\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    return getCurrentUserByContext(context);\n  },\n)\n                    \n                \n\n            \n                \n                    Decorator for getting the current user from the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUserByContext\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (context: ExecutionContext) => {\n  switch (context.getType()) {\n    case 'http': {\n      return context.switchToHttp().getRequest().user;\n    }\n    case 'rpc': {\n      return context.switchToRpc().getData().user;\n    }\n    default: {\n      throw new Error('Unknown type of context');\n    }\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    A decorator for marking a path or a group of paths that are accessible to all users\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
